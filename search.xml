<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Android 根据设置的日期获取星期几]]></title>
      <url>%2F2017%2F03%2F22%2F%E6%A0%B9%E6%8D%AE%E8%AE%BE%E7%BD%AE%E7%9A%84%E6%97%A5%E6%9C%9F%E8%8E%B7%E5%8F%96%E6%98%9F%E6%9C%9F%E5%87%A0%2F</url>
      <content type="text"><![CDATA[版权声明：本文为转载，出处未知，知道出处可以联系我。 有个注意的点：就是包的引入，你的对应版本是24和以上就引入Android.icu.util包版本是24以下就引入Java.util包123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 判断当前日期是星期几 * * @param pTime 设置的需要判断的时间 //格式如2012-09-08 * * @return dayForWeek 判断结果 * @Exception 发生异常 */// String pTime = "2012-03-12"; private String getWeek(String pTime) &#123; String Week = ""; SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd"); Calendar c = Calendar.getInstance(); try &#123; c.setTime(format.parse(pTime)); &#125; catch (ParseException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; if (c.get(Calendar.DAY_OF_WEEK) == 1) &#123; Week += "天"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 2) &#123; Week += "一"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 3) &#123; Week += "二"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 4) &#123; Week += "三"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 5) &#123; Week += "四"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 6) &#123; Week += "五"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 7) &#123; Week += "六"; &#125; return Week; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Okhttp获取中文网页乱码的解决方式]]></title>
      <url>%2F2017%2F03%2F22%2FOkhttp%E8%8E%B7%E5%8F%96%E4%B8%AD%E6%96%87%E7%BD%91%E9%A1%B5%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[版权声明：本文为转载，出处未知，知道出处可以联系我。 OkHttp post请求编码问题 解决放法###在回调方法onResponse方法中12byte[] b = response.body().bytes(); //获取数据的bytesString info = new String(b, "GB2312"); //然后将其转为gb2312]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[爬坑之路一_初步认识Android爬虫]]></title>
      <url>%2F2017%2F03%2F22%2F%E7%88%AC%E5%9D%91%E4%B9%8B%E8%B7%AF%E4%B8%80-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86Android%E7%88%AC%E8%99%AB%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 心血来潮想做个漫画App，看到掘金的各种Python爬虫等，看了原理，觉得Adnroid上应该也很简单啊，现在网络访问开源库那么多，期中Okhttp就挺好用，不过Okhttp访问返回的源码中中文会出现乱码，Okhttp获取页面中文乱码问题解决方法或者直接用原生的来访问，获取到网页源码，然后直接通过pattern来匹配正则表达式不就能够很方便的爬出很多页面的东西吗？可是。。。我太天真了，一开始直接使用pattern来匹配就遇到了字符大小超过限制的问题，那应该怎么办？后来又了解到了Jsoup，Jsoup中文ApiJsoup是一个Java的html解析器，可以使用可以通过DOM，CSS以及类似jQuery的方法来查询取出数据。现在应该可以了吧，字符大小是解决了。新的问题出现了，我根本取不到那个img标签。几番调试，我发现了，那通过Jsoup访问的返回网页没有了img标签！！！只剩下一个加载中.gif和加载错误的图片。word天，搞什么，这网页居然没有加载完！于是又查询资料，发现Jsoup不支持js操作，也就是说我们通过Jsoup除非抓取网页的静态内容，动态的没法抓取！那就很尴尬了啊。目前我想到的解决方法：1.通过WebView 来构建模拟访问，然后在网页加载完成之后也就是重写WebViewClient中的onPageFinished(WebView view,String url){}方法来通过DOM条件来获取到加载之后的网页的数据。2.也是通过WebView来构建模拟访问，然后管理下载（图片等）3.还是WebView来构建模拟访问，再与JS交互来取得自己想要的数据。另外，通过WebView构建模拟访问加载页面完毕之后可以做很多事情，毕竟我们可以拿到真正的网页源码了，那么我们要怎么获取网页源码呢？WebViewh获取网页源码方式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CoordinatorLayout与NestedScrollView嵌套RecyclerView使用中的坑]]></title>
      <url>%2F2017%2F03%2F22%2FCoordinatorLayout%E4%B8%8ENestedScrollView%E5%B5%8C%E5%A5%97RecyclerView%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%9D%91%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 做一个详情页面的时候，遇到了上述使用方式的坑，上滑的时候RecyclerView上滑了，但是并没有与头部也就是AppBarLayout产生联动，头部没有上拉了。这个问题的解决方法是调用RecyclerView中的setNestedScrollingEnabled(false);让RecyclerView顺滑滑动。即可解决NestedScrollView与RecyclerView嵌套使用的问题。这应该是最简单的方式解决这个嵌套冲突。谨以此作为笔记或者帮助其他和我一样遇到这种坑的童鞋。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android 控件的相对动画实现小说阅读的上下菜单的隐藏与显示]]></title>
      <url>%2F2017%2F03%2F22%2F%E6%8E%A7%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%AF%B9%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E5%B0%8F%E8%AF%B4%E9%98%85%E8%AF%BB%E7%9A%84%E4%B8%8A%E4%B8%8B%E8%8F%9C%E5%8D%95%E7%9A%84%E9%9A%90%E8%97%8F%E4%B8%8E%E6%98%BE%E7%A4%BA%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 直接上代码：1.这个是相对于自身往上平移自身高度的动画123TranslateAnimation translateAnimation =new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f); 2.这个是相对于自身往下平移自身高度的动画1234TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f); 其实就是对于下面这个方法的使用12public TranslateAnimation(int fromXType, float fromXValue, int toXType, float toXValue, int fromYType, float fromYValue, int toYType, float toYValue) **不过在动画的执行的地方有不同，不是通过Start()方法执行动画，而是通过设置View 的Visibility来控制动画的播放。比如这里有一个需要隐藏的View 变量名为topLayout，那么这里实现动画的方式就为**12toplayout.setAnimation(translateAnimation);toplayout.setVisibility(View.INVISIBLE); 这里就可以实现动画的播放，这里设置的是INVISIBLE，是因为我们的控件本来是可见的（VISIBLE），所以动画的控制是通过View的可见性来控制的，也就是说，这里也可以设置为View.GONE，也是可以触发动画。当处于INVISIBLE或者GONE的时候，设置为VISIBLE就可以播放动画了。下面上效果：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[通过OnScrollListener来监听RecyclerView的位置，以更新RV]]></title>
      <url>%2F2017%2F03%2F22%2F%E9%80%9A%E8%BF%87OnScrollListener%E6%9D%A5%E7%9B%91%E5%90%ACRecyclerView%E7%9A%84%E4%BD%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 最近做一个漫画app，在阅读漫画界面需要通过获取recyclerView的位置来实时更新界面上的图片进度（比如1/9），查阅资料得知了可以通过LayoutManager来获取recyclerView的item位置信息。那么由于这里我的是一幅图是整个屏幕大小，所以通过代码：123LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); 其中，adapterNowPos 就是当前的图片位置，allItems 则是recyclerView中的所有条目数量。接下来需要搞定的就是动态通知了，于是我们给recyclerView添加一个滑动监听器，完整的代码如下：123456789101112recyclerView.setOnScrollListener(new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); String s = adapterNowPos+1+"/"+allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); &#125; &#125;); 这样就完成了实时更新。下面上图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[漫吧漫画阅读界面的搭建（一）基础布局搭建（完整代码）]]></title>
      <url>%2F2017%2F03%2F22%2F%E6%BC%AB%E5%90%A7%E6%BC%AB%E7%94%BB%E9%98%85%E8%AF%BB%E7%95%8C%E9%9D%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E5%B8%83%E5%B1%80%E6%90%AD%E5%BB%BA%EF%BC%88%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%89%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址 第一篇链接 漫吧漫画阅读界面的搭建（一）基础布局搭建（上）第二篇链接 漫吧漫画阅读界面的搭建（一）基础布局搭建（下） 这一篇是完整代码的展示，博文是前两篇方便起见，代码都为一个文件布局代码：主布局：lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:background="@color/colorSliteGray" tools:context="winter.zxb.smilesb101.cartoon8.WatchComicActivity"&gt; &lt;!-- The primary full-screen view. This can be replaced with whatever view is needed to present your content, e.g. VideoView, SurfaceView, TextureView, etc. --&gt; &lt;android.support.v7.widget.RecyclerView android:id="@+id/fullscreen_content" android:layout_width="match_parent" android:layout_height="match_parent" android:gravity="center"/&gt; &lt;!--底部小的状态栏--&gt; &lt;LinearLayout android:id="@+id/small_status" android:layout_width="wrap_content" android:layout_height="30dp" android:layout_alignParentEnd="true" android:layout_alignParentBottom="true" android:background="@drawable/round_rect_pressed" android:orientation="horizontal"&gt; &lt;TextView android:id="@+id/comic_name_bottom" android:layout_width="wrap_content" android:layout_height="match_parent" android:textColor="@color/colorSliteGray" android:gravity="center" android:layout_marginLeft="2dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:id="@+id/comic_pic_state" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:textColor="@color/colorSliteGray" android:layout_marginLeft="10dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:id="@+id/time" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:textColor="@color/colorSliteGray" android:layout_marginLeft="10dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/battery" android:layout_marginLeft="10dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:id="@+id/battery" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:maxLines="1" android:textColor="@color/colorSliteGray" android:layout_marginRight="20dp" android:textSize="12sp"/&gt; &lt;/LinearLayout&gt; &lt;!--菜单按钮区域(实际作用区域)--&gt; &lt;LinearLayout android:id="@+id/menu_ctrl" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical" android:visibility="visible"&gt; &lt;!--上一话--&gt; &lt;TextView android:id="@+id/preHUAText" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1"&gt; &lt;/TextView&gt; &lt;!--显示或者隐藏状态栏的触发器--&gt; &lt;TextView android:id="@+id/toogle" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1" android:layout_centerInParent="true"&gt;&lt;/TextView&gt; &lt;!--下一话--&gt; &lt;TextView android:id="@+id/nextHUAText" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1"&gt; &lt;/TextView&gt; &lt;/LinearLayout&gt; &lt;!--菜单按钮效果效果区域--&gt; &lt;LinearLayout android:id="@+id/menu_content" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical" android:visibility="gone"&gt; &lt;!--上一话--&gt; &lt;TextView android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1" android:text="@string/preHUA" android:textColor="@color/colorWrite" android:background="#50000000" android:gravity="center" android:textSize="30sp"&gt; &lt;/TextView&gt; &lt;!--显示或者隐藏状态栏的触发器--&gt; &lt;TextView android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1" android:layout_centerInParent="true" android:background="#50000000" android:textSize="30sp" android:text="@string/menu" android:textColor="@color/colorWrite" android:gravity="center" android:layout_marginTop="10dp" android:layout_marginBottom="10dp"&gt;&lt;/TextView&gt; &lt;!--下一话--&gt; &lt;TextView android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1" android:text="@string/nextHUA" android:textColor="@color/colorWrite" android:background="#50000000" android:gravity="center" android:textSize="30sp"&gt; &lt;/TextView&gt; &lt;/LinearLayout&gt; &lt;!--顶部栏--&gt; &lt;LinearLayout android:id="@+id/top_layout" android:layout_width="match_parent" android:layout_height="50dp" android:orientation="horizontal" android:background="#80000000" android:visibility="gone"&gt; &lt;LinearLayout android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1" android:orientation="horizontal"&gt; &lt;Button android:id="@+id/back_btn" android:layout_width="10dp" android:layout_height="20dp" android:layout_gravity="center_vertical" android:layout_marginLeft="15dp" android:background="@mipmap/arrow_left_better"/&gt; &lt;TextView android:id="@+id/comic_name" android:layout_width="wrap_content" android:layout_height="30dp" android:layout_gravity="center_vertical" android:gravity="center" android:layout_marginLeft="10dp" android:textColor="@color/colorWrite"/&gt; &lt;TextView android:id="@+id/comic_pic_state_top" android:layout_width="wrap_content" android:layout_height="30dp" android:layout_marginLeft="10dp" android:textColor="@color/colorWrite" android:layout_gravity="center_vertical" android:gravity="center"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="match_parent" android:orientation="horizontal" android:layout_marginLeft="10dp"&gt; &lt;Button android:id="@+id/show_menuBtn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/info_72px" android:layout_marginRight="10dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;Button android:id="@+id/feed_backBtn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/edit_71" android:layout_marginRight="10dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;Button android:id="@+id/downloadpic_Btn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/download_46" android:layout_marginRight="10dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;Button android:id="@+id/sharePicBtn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/external_link_75" android:layout_marginRight="20dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;!--SeekBar的操作提示栏,默认不可见，按下SeekBar可见，抬起不可见--&gt; &lt;RelativeLayout android:id="@+id/bottom_seekBar_help" android:layout_width="match_parent" android:layout_height="30dp" android:layout_above="@+id/bottom_layout" android:layout_marginBottom="10dp" android:background="#80000000" android:visibility="gone"&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="match_parent" android:orientation="horizontal" android:layout_centerInParent="true"&gt; &lt;TextView android:id="@+id/seekBar_help_now" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorAqua"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:layout_gravity="center" android:text=" / " android:textColor="@color/colorSliteGray"/&gt; &lt;TextView android:id="@+id/seekBar_help_num" android:layout_width="wrap_content" android:layout_height="match_parent" android:layout_gravity="center" android:gravity="center" android:textColor="@color/colorSliteGray"/&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; &lt;!--底部栏--&gt; &lt;LinearLayout android:id="@+id/bottom_layout" android:layout_width="match_parent" android:layout_height="wrap_content" android:orientation="vertical" android:layout_alignParentBottom="true" android:background="#80000000" android:visibility="gone"&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="50dp" android:orientation="horizontal" android:layout_marginBottom="10dp" android:layout_marginLeft="15dp" android:layout_marginRight="15dp" android:layout_marginTop="10dp"&gt; &lt;TextView android:id="@+id/preHUA" android:layout_width="wrap_content" android:layout_height="match_parent" android:text="@string/preHUA" android:textColor="@color/colorSliteGray" android:gravity="center"/&gt; &lt;SeekBar android:id="@+id/bottom_seekBar" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_marginLeft="10dp" android:layout_marginRight="10dp" android:layout_weight="1" android:layout_gravity="center"/&gt; &lt;TextView android:id="@+id/nextHUA" android:layout_width="wrap_content" android:layout_height="match_parent" android:text="@string/nextHUA" android:textColor="@color/colorSliteGray" android:gravity="center"/&gt; &lt;/LinearLayout&gt; &lt;!--底部菜单栏--&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_marginTop="10dp" android:layout_marginBottom="10dp" android:orientation="horizontal" android:layout_marginLeft="20dp" android:layout_marginRight="20dp"&gt; &lt;LinearLayout android:id="@+id/indexBtn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/menu_expanded_109" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center" android:gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/index"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/download_comic_Btn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/downloadbtn" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/download"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/light_btn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/light_bulb_46" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/light"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/phone_switch" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/phonestatus_switch" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/landscape"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/options_btn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/options_72" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/options"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; RecyclerView item布局：123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;RelativeLayout android:layout_width="match_parent" android:layout_weight="1" android:layout_height="0dp"&gt; &lt;!--做出占位的字，图片加载出来后会被图片覆盖--&gt; &lt;TextView android:id="@+id/textView" android:background="@color/colorSliteGray" android:layout_width="match_parent" android:layout_height="match_parent" android:textColor="@color/colorDimGray" android:text="1" android:textSize="80sp" android:gravity="center"/&gt; &lt;ImageView android:id="@+id/imageView" android:layout_width="match_parent" android:layout_height="match_parent" android:scaleType="fitXY" android:layout_gravity="center"/&gt; &lt;/RelativeLayout&gt; &lt;!--分隔线，让布局看起来更清晰，可以去掉--&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="3dp" android:background="@color/colorSliteGray" android:layout_alignParentBottom="true"&gt;&lt;/LinearLayout&gt; &lt;/LinearLayout&gt; Java代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532package winter.zxb.smilesb101.cartoon8; import android.annotation.SuppressLint; import android.app.Activity; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.content.IntentFilter; import android.media.Image; import android.os.AsyncTask; import android.os.BatteryManager; import android.os.Message; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentPagerAdapter; import android.support.v7.app.ActionBar; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.os.Handler; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.util.Log; import android.view.LayoutInflater; import android.view.MotionEvent; import android.view.View; import android.view.ViewGroup; import android.view.WindowManager; import android.view.animation.Animation; import android.view.animation.TranslateAnimation; import android.widget.Button; import android.widget.ImageSwitcher; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.RelativeLayout; import android.widget.SeekBar; import android.widget.TextView; import android.widget.Toast; import com.bumptech.glide.Glide; import java.util.ArrayList; import ComicData.Comic; import RetailsWorm.HtmlAnalysisUtils; import RetailsWorm.NetWorkUtils; import Utils.Utils; import static ComicData.comicStaticValue.COMIC_PICS; import static ComicData.comicStaticValue.COMIC_PIC_DOM; /** * An example full-screen activity that shows and hides the system UI (i.e. * status bar and navigation/system bar) with user interaction. */ public final class WatchComicActivity extends AppCompatActivity implements View.OnClickListener&#123; /** * Whether or not the system UI should be auto-hidden after * &#123;@link #AUTO_HIDE_DELAY_MILLIS&#125; milliseconds. */ private static final boolean AUTO_HIDE = true; /** * If &#123;@link #AUTO_HIDE&#125; is set, the number of milliseconds to wait after * user interaction before hiding the system UI. */ private static final int AUTO_HIDE_DELAY_MILLIS = 1000; /** * 动画时间 */ private static final int UI_ANIMATION_DELAY = 200; private final Handler mHideHandler = new Handler(); private RecyclerView mContentView; private View mControlsView; private MyContentViewAdapter adapter; private int adapterNowPos,allItems; private final Runnable mShowPart2Runnable = new Runnable()&#123; @Override public void run()&#123; // Delayed display of UI elements ActionBar actionBar = getSupportActionBar(); if(actionBar != null) &#123; actionBar.show(); &#125; &#125; &#125;; /** * 显示或者隐藏状态 */ private boolean mVisible; Handler handler = new Handler()&#123; @Override public void handleMessage(Message msg)&#123; switch(msg.what) &#123; case NetWorkUtils.MSG_HTML: String html = msg.obj.toString(); if(!html.equals(NetWorkUtils.HTML_EMPTY)) &#123; InitLayoutValue(html); &#125; else &#123; Log.i(TAG,"handleMessage: 网络错误！！"); &#125; break; &#125; &#125; &#125;; /** * 处理网页 * @param html */ void InitLayoutValue(final String html) &#123; new AsyncTask&lt;String,Void,Void&gt;()&#123; @Override protected Void doInBackground(String... params)&#123; Log.i(TAG,"doInBackground: 后台操作获取图片"); comic = new Comic(); comic_Pics = HtmlAnalysisUtils.getComicPicsString(params[0],COMIC_PICS,5);//第5个位置是图片位置 comic.setName(HtmlAnalysisUtils.getComicDetails(params[0],COMIC_PIC_DOM.get(2),HtmlAnalysisUtils.WHAT_innerHTML).get(0)); comic_hua = HtmlAnalysisUtils.getComicDetails(params[0],COMIC_PIC_DOM.get(1),HtmlAnalysisUtils.WHAT_innerHTML).get(0).replace(comic.getName(),"");//去掉多余的名称 return null; &#125; @Override protected void onPostExecute(Void aVoid)&#123; super.onPostExecute(aVoid); //Log.i(TAG,"onPostExecute: 获取图片完成"); comic_name_bottom.setText(comic_hua); comic_name_top.setText(comic_hua); if(comic_Pics!=null) &#123; Log.i(TAG,"onPostExecute: "+comic_Pics.get(1)); //实例化adapter mContentView.setLayoutManager(new LinearLayoutManager(activity)); adapter = new MyContentViewAdapter(comic_Pics); mContentView.setAdapter(adapter); mContentView.setOnScrollListener(scrollListener); &#125; &#125; &#125;.execute(html); &#125; private RecyclerView.OnScrollListener scrollListener = new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); //设置seekbar seekBar.setMax(allItems-1); Log.i(TAG,"onScrolled: "+allItems); seekBar.setProgress(adapterNowPos); setpicText();//设置文字 &#125; &#125;; private static final String TAG = "WatchComicActivity"; /** * 漫画的VALUE */ public static String COMIC_VALUE = "COMIC"; public static String COMIC_LINK = "CMOIC_LINK"; public static String COMIC_HUA = "HUA"; public static String COMIC_NAME = "NAME"; private Comic comic; private String comic_link; private String comic_hua; private ArrayList&lt;String&gt; comic_Pics; private Activity activity; private LinearLayout toplayout; private Button showCtrlbtn,backBtn,feedbackBtn,downLoadPicBtn,sharePicBtn; private LinearLayout bottomlayout; private TextView nextToogle,toogleBtn,preToogle; private LinearLayout menu_content; private TextView comic_name_bottom,comic_pic_state,time,battery; private SeekBar seekBar; private LinearLayout small_status; private RelativeLayout bottom_seekBar_help; private TextView seekBar_help_now,seekBar_help_num; private Button backbtn; private TextView comic_name_top,pic_state_top; private LinearLayout indexBtn,download_comic_Btn,light_btn,phone_switch,options_btn; @Override protected void onCreate(Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_watch_comic); //注册电量监听广播 registerReceiver(batterReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED)); mVisible = false;//一开始是不可见状态 mContentView = (RecyclerView)findViewById(R.id.fullscreen_content); toplayout = (LinearLayout)findViewById(R.id.top_layout); bottomlayout = (LinearLayout)findViewById(R.id.bottom_layout); toogleBtn = (TextView)findViewById(R.id.toogle); nextToogle = (TextView)findViewById(R.id.nextHUAText); preToogle = (TextView)findViewById(R.id.preHUAText); menu_content = (LinearLayout)findViewById(R.id.menu_content); showCtrlbtn = (Button)findViewById(R.id.show_menuBtn); backBtn = (Button)findViewById(R.id.back_btn); feedbackBtn = (Button)findViewById(R.id.feed_backBtn); downLoadPicBtn = (Button)findViewById(R.id.downloadpic_Btn); sharePicBtn = (Button)findViewById(R.id.sharePicBtn); bottom_seekBar_help = (RelativeLayout)findViewById(R.id.bottom_seekBar_help); seekBar_help_now = (TextView)findViewById(R.id.seekBar_help_now); seekBar_help_num = (TextView)findViewById(R.id.seekBar_help_num); menu_content.setOnClickListener(this); showCtrlbtn.setOnClickListener(this); backBtn.setOnClickListener(this); feedbackBtn.setOnClickListener(this); downLoadPicBtn.setOnClickListener(this); sharePicBtn.setOnClickListener(this); comic_name_bottom = (TextView)findViewById(R.id.comic_name_bottom); comic_pic_state = (TextView)findViewById(R.id.comic_pic_state); time = (TextView)findViewById(R.id.time); battery = (TextView)findViewById(R.id.battery); time.setText(Utils.getTimeHour()); small_status = (LinearLayout)findViewById(R.id.small_status); seekBar = (SeekBar)findViewById(R.id.bottom_seekBar); seekBar.setOnSeekBarChangeListener(seekChangerListener); //Log.i(TAG,"onCreate: "+Utils.getPhoneBatteryInfo(this,BatteryManager.BATTERY_PROPERTY_CURRENT_NOW,Utils.DATATYPE_INT)); toogleBtn.setOnClickListener(this); nextToogle.setOnClickListener(this); preToogle.setOnClickListener(this); toogleBtn.setOnTouchListener(ctrl_touchlistenner); nextToogle.setOnTouchListener(ctrl_touchlistenner); preToogle.setOnTouchListener(ctrl_touchlistenner); comic_name_top = (TextView)findViewById(R.id.comic_name); pic_state_top = (TextView)findViewById(R.id.comic_pic_state_top); //底边菜单 indexBtn = (LinearLayout)findViewById(R.id.indexBtn); download_comic_Btn = (LinearLayout)findViewById(R.id.download_comic_Btn); light_btn = (LinearLayout)findViewById(R.id.light_btn); phone_switch = (LinearLayout)findViewById(R.id.phone_switch); options_btn = (LinearLayout)findViewById(R.id.options_btn); indexBtn.setOnClickListener(this); download_comic_Btn.setOnClickListener(this); light_btn.setOnClickListener(this); phone_switch.setOnClickListener(this); indexBtn.setOnClickListener(this); options_btn.setOnClickListener(this); activity = this; if(getIntent()!=null) &#123; Intent intent = getIntent(); comic = (Comic)intent.getSerializableExtra(COMIC_VALUE); comic_link = intent.getStringExtra(COMIC_LINK); new Runnable()&#123; @Override public void run()&#123; NetWorkUtils.getHtmlPage(activity,comic_link,handler);//获取网页数据 &#125; &#125;.run(); &#125; &#125; private float Sy = 0,Ey = 0;//放在外面是为了更新sy的值，让滑动更加顺滑 /** * 控制板的触摸事件监听，用来处理滑动冲突（控制面板与recyclerView的滑动冲突） */ View.OnTouchListener ctrl_touchlistenner = new View.OnTouchListener()&#123; @Override public boolean onTouch(View v,MotionEvent event)&#123; switch(event.getAction()) &#123; case MotionEvent.ACTION_DOWN: Sy = event.getY(); //Log.i(TAG,"onTouch: 按下事件 "+Sy); break; case MotionEvent.ACTION_MOVE: Ey = event.getY(); float res = (Ey-Sy); //Log.i(TAG,"onTouch: 分发事件给recyclerView 移动距离为 "+res); //让RecyclerView开始滑动 mContentView.scrollBy(mContentView.getScrollX(),mContentView.getScrollY()-(int)res); Sy = event.getY();//更新开始位置 break; &#125; return false; &#125; &#125;; /** * seekBar值改变的监听 */ SeekBar.OnSeekBarChangeListener seekChangerListener = new SeekBar.OnSeekBarChangeListener()&#123; @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser)&#123; //更新辅助面板 if(bottom_seekBar_help.getVisibility()==View.VISIBLE) &#123; seekBar_help_now.setText(progress + 1+""); &#125; &#125; @Override public void onStartTrackingTouch(SeekBar seekBar)&#123; //显示辅助面板 bottom_seekBar_help.setVisibility(View.VISIBLE); seekBar_help_num.setText(seekBar.getMax()+1+"");//设置总数 &#125; @Override public void onStopTrackingTouch(SeekBar seekBar)&#123; //关闭辅助面板 bottom_seekBar_help.setVisibility(View.GONE); int progress = seekBar.getProgress(); Log.i(TAG,"onProgressChanged: 选择了，第"+progress); //设置图片状态（1/9）; adapterNowPos = progress; setpicText(); mContentView.scrollToPosition(adapterNowPos);//不能平稳滑动，否者联动出错 &#125; &#125;; /** * 设置图片文字（第几张/总共几张） */ void setpicText() &#123; String s = adapterNowPos+1+ "/" + allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); &#125; /** * 展示上下栏 */ void showPanel() &#123; //Log.i(TAG,"hidePanel: 显示"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,1.0f,Animation.RELATIVE_TO_SELF,0.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation1); bottomlayout.setAnimation(translateAnimation); toplayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 //底部状态栏消失 small_status.setVisibility(View.GONE); //隐藏上下操作板，注意只能是隐藏，不能GONE，否者会导致中间控制板占据所有屏幕的问题 nextToogle.setVisibility(View.INVISIBLE); preToogle.setVisibility(View.INVISIBLE); &#125; /** * 隐藏上下栏 */ void hidePanel() &#123; //Log.i(TAG,"hidePanel: 隐藏"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation); bottomlayout.setAnimation(translateAnimation1); toplayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 //底部状态栏显示 small_status.setVisibility(View.VISIBLE); //显示上下操作板 nextToogle.setVisibility(View.VISIBLE); preToogle.setVisibility(View.VISIBLE); &#125; /** * 触发器用来控制显示与隐藏 */ void toogle() &#123; if(mVisible) &#123; hidePanel(); mVisible = false; &#125; else &#123; showPanel(); mVisible = true; &#125; &#125; @Override public void onClick(View v)&#123; switch(v.getId()) &#123; case R.id.back_btn://返回按钮 onBackPressed();//调用返回 break; case R.id.show_menuBtn://显示操作平台按钮 //Log.i(TAG,"onClick: 操作平台按钮"); if(View.GONE == menu_content.getVisibility()) &#123; menu_content.setVisibility(View.VISIBLE); hidePanel(); mVisible = false; //底部状态栏消失 small_status.setVisibility(View.GONE); &#125; break; case R.id.feed_backBtn://反馈按钮 break; case R.id.downloadpic_Btn://下载此张图片按钮 break; case R.id.sharePicBtn://分享漫画链接或者此张图片 break; case R.id.toogle: //Log.i(TAG,"onClick: 隐藏按钮按下"); toogle(); break; case R.id.nextHUAText://下一张图片 adapterNowPos++; scroolRV_To(adapterNowPos); break; case R.id.preHUAText://上一张图片 adapterNowPos--; scroolRV_To(adapterNowPos); break; case R.id.menu_content://操作面板容器 menu_content.setVisibility(View.GONE); //底部状态栏显示 small_status.setVisibility(View.GONE); break; case R.id.indexBtn://目录按钮 //目录界面 break; case R.id.download_comic_Btn://下载漫画按钮 break; case R.id.light_btn://亮度按钮 break; case R.id.phone_switch://切换手机的横竖屏 break; case R.id.options_btn://选项按钮 break; &#125; &#125; /** * 滚动到位置 * @param pos */ void scroolRV_To(int pos) &#123; if(adapterNowPos&gt;=allItems) &#123; adapterNowPos = allItems; Toast.makeText(this,"已经到顶啦！",Toast.LENGTH_SHORT); &#125; else if(adapterNowPos &lt;= 0) &#123; adapterNowPos = 0; Toast.makeText(this,"已经到底啦！",Toast.LENGTH_SHORT); &#125; mContentView.smoothScrollToPosition(adapterNowPos); &#125; /** * 图片显示view的adapter */ class MyContentViewAdapter extends RecyclerView.Adapter &#123; private ArrayList&lt;String&gt; pics; private Context context; public MyContentViewAdapter(ArrayList&lt;String&gt; pics)&#123; this.pics = pics; &#125; @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType)&#123; context = parent.getContext(); View view = LayoutInflater.from(context) .inflate(R.layout.comicpics_item,parent,false); return new MyViewHolder(view); &#125; @Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position)&#123; MyViewHolder myViewHolder = (MyViewHolder)holder; myViewHolder.textView.setText(position+1+"");//设置占位 Glide.with(context) .load(pics.get(position)) .into(myViewHolder.imageView); &#125; @Override public int getItemCount()&#123; return pics.size(); &#125; class MyViewHolder extends RecyclerView.ViewHolder&#123; private View rootView; private ImageView imageView; private TextView textView; public MyViewHolder(View itemView)&#123; super(itemView); rootView = itemView; imageView = (ImageView)rootView.findViewById(R.id.imageView); textView = (TextView)rootView.findViewById(R.id.textView); &#125; &#125; &#125; public BroadcastReceiver batterReceiver = new BroadcastReceiver()&#123; @Override public void onReceive(Context context,Intent intent)&#123; int level = intent.getIntExtra("level",0); //Log.i(TAG,"onReceive: "+level); battery.setText(level+"%"); &#125; &#125;; &#125; 文章到此结束，欢迎到我的项目地址或者新博客看看。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[漫吧漫画阅读界面的搭建（一）基础布局搭建（下）]]></title>
      <url>%2F2017%2F03%2F22%2F%E6%BC%AB%E5%90%A7%E6%BC%AB%E7%94%BB%E9%98%85%E8%AF%BB%E7%95%8C%E9%9D%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E5%B8%83%E5%B1%80%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址 想看第一篇的童鞋,漫吧漫画阅读界面的搭建（一）基础布局搭建（上）想直接看代码的童鞋，漫吧漫画阅读界面的搭建（一）基础布局搭建（完全代码）文章较长，看文章需要耐心。我们来接着上一篇文章，三、实现右下角的小状态栏先上布局代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!--底部小的状态栏--&gt; &lt;LinearLayout android:id="@+id/small_status" android:layout_width="wrap_content" android:layout_height="30dp" android:layout_alignParentEnd="true" android:layout_alignParentBottom="true" android:background="@drawable/round_rect_pressed" android:orientation="horizontal"&gt; &lt;TextView android:id="@+id/comic_name_bottom" android:layout_width="wrap_content" android:layout_height="match_parent" android:textColor="@color/colorSliteGray" android:gravity="center" android:layout_marginLeft="2dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:id="@+id/comic_pic_state" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:textColor="@color/colorSliteGray" android:layout_marginLeft="10dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:id="@+id/time" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:textColor="@color/colorSliteGray" android:layout_marginLeft="10dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/battery" android:layout_marginLeft="10dp" android:maxLines="1" android:textSize="12sp"/&gt; &lt;TextView android:id="@+id/battery" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:maxLines="1" android:textColor="@color/colorSliteGray" android:layout_marginRight="20dp" android:textSize="12sp"/&gt; &lt;/LinearLayout&gt; 然后再添上和前面布局相关联的代码就可以了，再加上相对应的按钮监听以及对应逻辑就可以了。四、解决问题我们这里有几个问题，1.RecyclerView与SeekBar以及提示文字（也就是现在是第几张图/总共的图片）首先获取RecyclerView的位置，获取RecyclerView的位置博文,贴上获取位置的代码1234567891011121314151617private RecyclerView.OnScrollListener scrollListener = new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); //l.findFirstCompletelyVisibleItemPosition(); //Log.i(TAG,"onScrolled: "+l.findFirstVisibleItemPosition()); if((adapterNowPos-1)!=l.findFirstVisibleItemPosition()) &#123; //不等于的时候才是有效改变 adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); //设置seekbar seekBar.setMax(allItems); seekBar.setProgress(adapterNowPos); &#125; &#125; &#125;; SeekBar值的监听123456789101112131415161718192021222324252627/** * seekBar值改变的监听 */ SeekBar.OnSeekBarChangeListener seekChangerListener = new SeekBar.OnSeekBarChangeListener()&#123; @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser)&#123; Log.i(TAG,"onProgressChanged: 选择了，第"+progress); //设置图片状态（1/9）; if(progress!=0) &#123; adapterNowPos = progress; String s = adapterNowPos + "/" + allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); scroolRV_To(adapterNowPos); &#125; &#125; @Override public void onStartTrackingTouch(SeekBar seekBar)&#123; &#125; @Override public void onStopTrackingTouch(SeekBar seekBar)&#123; &#125; &#125;; 滚动控制代码123456789101112131415161718/** * 滚动到位置 * @param pos */ void scroolRV_To(int pos) &#123; if(adapterNowPos&gt;=allItems) &#123; adapterNowPos = allItems; Toast.makeText(this,"已经到顶啦！",Toast.LENGTH_SHORT); &#125; else if(adapterNowPos&lt;=1) &#123; adapterNowPos = 1; Toast.makeText(this,"已经到底啦！",Toast.LENGTH_SHORT); &#125; mContentView.smoothScrollToPosition(adapterNowPos); &#125; 这样，第一个问题就解决了。2.上一张图片和下一张图片与上下菜单面板有点击事件冲突（上下点击事件被下一张下一张图片拦截）在隐藏和显示面板的时候，把上一张图片和下一张图片隐藏了，注意不能是设置GONE属性，否者会导致中间的（也就是显示或者隐藏上下菜单的控件全屏化）。3.控制面板和RecyclerView的滑动冲突处理这里由于我们的控制面板（也就是上一张图下一张图，以及上下菜单的控制面板）与RecyclerView的滑动有冲突，后者滑动事件被前者所拦截。解决方法：重写控制面板的OnTouch方法，在move中进行事件分发。下面上代码：12345678910111213141516171819202122232425262728private float Sy = 0,Ey = 0;//放在外面是为了更新sy的值，让滑动更加顺滑 /** * 控制板的触摸事件监听，用来处理滑动冲突（控制面板与recyclerView的滑动冲突） */ View.OnTouchListener ctrl_touchlistenner = new View.OnTouchListener()&#123; @Override public boolean onTouch(View v,MotionEvent event)&#123; switch(event.getAction()) &#123; case MotionEvent.ACTION_DOWN: Sy = event.getY(); //Log.i(TAG,"onTouch: 按下事件 "+Sy); break; case MotionEvent.ACTION_MOVE: Ey = event.getY(); float res = (Ey-Sy); if(Math.abs(res) &gt; 10) &#123; //Log.i(TAG,"onTouch: 分发事件给recyclerView 移动距离为 "+res); //让RecyclerView开始滑动 mContentView.scrollBy(mContentView.getScrollX(),mContentView.getScrollY()-(int)res); Sy = event.getY();//更新开始位置 &#125; break; &#125; return false; &#125; &#125;; 这样滑动冲突就解决了。4.SeekBar与RecyclerView的联动BUG直接拖动SeekBar然后更新RecyclerView的话，会导致SeekBar和RecyclerView都自带鬼畜效果。问题所在：在SeekBar中更新RecyclerView的时候不能让RecyclerView平稳滑动，这样的话会导致RecyclerView的onScrollListener被多次触发，而我们在onScrollListener中又更新了SeekBar，这样就导致了鬼畜的出现。解决方式：不实时更新，只在离开Seekbar的时候更新，实时更新一个文本来作为用户提示，用于辅助用户操作。下面贴上代码，辅助布局代码：1234567891011121314151617181920212223242526272829303132333435363738&lt;!--SeekBar的操作提示栏,默认不可见，按下SeekBar可见，抬起不可见--&gt; &lt;RelativeLayout android:id="@+id/bottom_seekBar_help" android:layout_width="match_parent" android:layout_height="30dp" android:layout_above="@+id/bottom_layout" android:layout_marginBottom="10dp" android:background="#80000000" android:visibility="gone"&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="match_parent" android:orientation="horizontal" android:layout_centerInParent="true"&gt; &lt;TextView android:id="@+id/seekBar_help_now" android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorAqua"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="match_parent" android:gravity="center" android:layout_gravity="center" android:text=" / " android:textColor="@color/colorSliteGray"/&gt; &lt;TextView android:id="@+id/seekBar_help_num" android:layout_width="wrap_content" android:layout_height="match_parent" android:layout_gravity="center" android:gravity="center" android:textColor="@color/colorSliteGray"/&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; java代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556private RecyclerView.OnScrollListener scrollListener = new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); //设置seekbar seekBar.setMax(allItems-1); Log.i(TAG,"onScrolled: "+allItems); seekBar.setProgress(adapterNowPos); setpicText();//设置文字 &#125; &#125;; /*** seekBar值改变的监听*/ SeekBar.OnSeekBarChangeListener seekChangerListener = new SeekBar.OnSeekBarChangeListener()&#123; @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser)&#123; //更新辅助面板 if(bottom_seekBar_help.getVisibility()==View.VISIBLE) &#123; seekBar_help_now.setText(progress + 1+""); &#125; &#125; @Override public void onStartTrackingTouch(SeekBar seekBar)&#123; //显示辅助面板 bottom_seekBar_help.setVisibility(View.VISIBLE); seekBar_help_num.setText(seekBar.getMax()+1+"");//设置总数 &#125; @Override public void onStopTrackingTouch(SeekBar seekBar)&#123; //关闭辅助面板 bottom_seekBar_help.setVisibility(View.GONE); int progress = seekBar.getProgress(); Log.i(TAG,"onProgressChanged: 选择了，第"+progress); //设置图片状态（1/9）; adapterNowPos = progress; setpicText(); mContentView.scrollToPosition(adapterNowPos);//不能平稳滑动，否者联动出错 &#125; &#125;; /*** 设置图片文字（第几张/总共几张）*/ void setpicText() &#123; String s = adapterNowPos+1+ "/" + allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); &#125; 这样就完美解决了问题,这个界面就基本完成！完整代码查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[漫吧漫画阅读界面的搭建（一）基础布局搭建（上）]]></title>
      <url>%2F2017%2F03%2F22%2Fuibuilder-first-1%2F</url>
      <content type="text"><![CDATA[版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址 想看第二篇的童鞋,漫吧漫画阅读界面的搭建（一）基础布局搭建（下）想直接看代码的童鞋，漫吧漫画阅读界面的搭建（一）基础布局搭建（完全代码）文章较长，看文章需要耐心。老规矩，先上效果,（图片质量有点差，这是因为质量好老是会超过大小限制，请谅解） 一、首先我们来实现基本的图片显示部分这里想法是这样的，实现方式多样1.可以通过ViewPager控件然后加载Fragment来实现。2.可以通过RecyclerView或者ListView的item实现。3.可以通过轮播控件来实现。当然还有其他的方式。这里我使用的是第二种，通过RecyclerView的item来实现。下面上代码：item布局：123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;RelativeLayout android:layout_width="match_parent" android:layout_weight="1" android:layout_height="0dp"&gt; &lt;!--做出占位的字，图片加载出来后会被图片覆盖--&gt; &lt;TextView android:id="@+id/textView" android:background="@color/colorSliteGray" android:layout_width="match_parent" android:layout_height="match_parent" android:textColor="@color/colorDimGray" android:text="1" android:textSize="80sp" android:gravity="center"/&gt; &lt;ImageView android:id="@+id/imageView" android:layout_width="match_parent" android:layout_height="match_parent" android:scaleType="fitXY" android:layout_gravity="center"/&gt; &lt;/RelativeLayout&gt; &lt;!--分隔线，让布局看起来更清晰，可以去掉--&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="3dp" android:background="@color/colorSliteGray" android:layout_alignParentBottom="true"&gt;&lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 然后看看漫画查看界面的布局：123456789101112131415&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:background="@color/colorSliteGray" tools:context="winter.zxb.smilesb101.cartoon8.WatchComicActivity"&gt; &lt;!-- The primary full-screen view. This can be replaced with whatever view is needed to present your content, e.g. VideoView, SurfaceView, TextureView, etc. --&gt; &lt;android.support.v7.widget.RecyclerView android:id="@+id/fullscreen_content" android:layout_width="match_parent" android:layout_height="match_parent" android:gravity="center"/&gt; &lt;/RelativeLayout&gt; 这样就把图片显示的布局搭建好了，recyclerView的使用应该很简单美着里就不再赘述了。二、实现上下菜单这里我们通过TranslateAnimation配合布局的显示消失来实现消失和显示的动画具体的这篇博客有描述控件显示与隐藏动画那么第一步还是我们的界面，这里是接着前面的漫画主布局做的顶端布局：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!--顶部栏--&gt; &lt;LinearLayout android:id="@+id/top_layout" android:layout_width="match_parent" android:layout_height="50dp" android:orientation="horizontal" android:background="#80000000" android:visibility="gone" android:translationZ="99dp"&gt; &lt;LinearLayout android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1" android:orientation="horizontal"&gt; &lt;Button android:id="@+id/back_btn" android:layout_width="10dp" android:layout_height="20dp" android:layout_gravity="center_vertical" android:layout_marginLeft="15dp" android:background="@mipmap/arrow_left_better"/&gt; &lt;TextView android:id="@+id/comic_name" android:layout_width="wrap_content" android:layout_height="30dp" android:layout_gravity="center_vertical" android:gravity="center" android:layout_marginLeft="10dp" android:textColor="@color/colorWrite"/&gt; &lt;TextView android:id="@+id/comic_pic_state_top" android:layout_width="wrap_content" android:layout_height="30dp" android:layout_marginLeft="10dp" android:textColor="@color/colorWrite" android:layout_gravity="center_vertical" android:gravity="center"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="match_parent" android:orientation="horizontal" android:layout_marginLeft="10dp"&gt; &lt;Button android:id="@+id/show_menuBtn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/info_72px" android:layout_marginRight="10dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;Button android:id="@+id/feed_backBtn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/edit_71" android:layout_marginRight="10dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;Button android:id="@+id/downloadpic_Btn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/download_46" android:layout_marginRight="10dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;Button android:id="@+id/sharePicBtn" android:layout_width="20dp" android:layout_height="20dp" android:background="@mipmap/external_link_75" android:layout_marginRight="20dp" android:layout_gravity="center_vertical" android:layout_marginLeft="10dp"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 底部布局（同样是与漫画主布局在一个文件内）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149&lt;!--底部栏--&gt; LinearLayout android:id="@+id/bottom_layout" android:layout_width="match_parent" android:layout_height="wrap_content" android:orientation="vertical" android:layout_alignParentBottom="true" android:background="#80000000" android:visibility="gone" android:translationZ="99dp"&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="50dp" android:orientation="horizontal" android:layout_marginBottom="10dp" android:layout_marginLeft="15dp" android:layout_marginRight="15dp" android:layout_marginTop="10dp"&gt; &lt;TextView android:id="@+id/preHUA" android:layout_width="wrap_content" android:layout_height="match_parent" android:text="@string/preHUA" android:textColor="@color/colorSliteGray" android:gravity="center"/&gt; &lt;SeekBar android:id="@+id/bottom_seekBar" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_marginLeft="10dp" android:layout_marginRight="10dp" android:layout_weight="1" android:layout_gravity="center"/&gt; &lt;TextView android:id="@+id/nextHUA" android:layout_width="wrap_content" android:layout_height="match_parent" android:text="@string/nextHUA" android:textColor="@color/colorSliteGray" android:gravity="center"/&gt; &lt;/LinearLayout&gt; !--底部菜单栏--&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_marginTop="10dp" android:layout_marginBottom="10dp" android:orientation="horizontal" android:layout_marginLeft="20dp" android:layout_marginRight="20dp"&gt; &lt;LinearLayout android:id="@+id/indexBtn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/menu_expanded_109" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center" android:gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/index"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/download_comic_Btn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/downloadbtn" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/download"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/light_btn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/light_bulb_46" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/light"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/phone_switch" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/phonestatus_switch" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/landscape"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id="@+id/options_btn" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:orientation="vertical"&gt; &lt;ImageView android:layout_width="30dp" android:layout_height="30dp" android:src="@mipmap/options_72" android:layout_gravity="center"/&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:gravity="center" android:layout_gravity="center" android:textColor="@color/colorSliteGray" android:text="@string/options"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 看了上面的布局代码，是不是觉得布局内容太多了?我们一可以使用引入布局来实现，这个看个人习惯，当然我建议通过引入布局的方式来做，这样代码看起来不会那么辛苦，修改起来也更简单。重点来了，我们需要动态的控制上下菜单布局的显示与隐藏。这里我们还需要一个接受用户点击的控件，来接收用户点击然后控制显示与影藏，这里可以看你喜好以及实际需求添加控件到合适位置。我添加的布局是（注意这里应该添加到RecyclerView的布局以下，因为RecyclerView是全屏的，而我们的主容器又是相对布局，添加到之前的话会导致点击事件被RecyclerView拦截）：1234567891011121314151617181920212223242526272829&lt;!--菜单按钮区域(实际作用区域)--&gt; &lt;LinearLayout android:id="@+id/menu_ctrl" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical" android:visibility="visible"&gt; &lt;!--上一张图片--&gt; &lt;TextView android:id="@+id/preHUAText" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1"&gt; &lt;/TextView&gt; &lt;!--显示或者隐藏状态栏的触发器--&gt; &lt;TextView android:id="@+id/toogle" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1" android:layout_centerInParent="true"&gt;&lt;/TextView&gt; &lt;!--下一张图片--&gt; &lt;TextView android:id="@+id/nextHUAText" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1"&gt; &lt;/TextView&gt; &lt;/LinearLayout&gt; 那么剩下的就是使用Java代码进行相关控制了直接上代码（很简单，主要是动画代码，前面我已经给出了相关博客，有问题可以去看看）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273private LinearLayout toplayout; private LinearLayout bottomlayout; /** * 动画时间 */ private static final int UI_ANIMATION_DELAY = 200; /** * 显示或者隐藏状态 */ private boolean mVisible; /** * 展示上下栏 */ void showPanel() &#123; //Log.i(TAG,"hidePanel: 显示"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,1.0f,Animation.RELATIVE_TO_SELF,0.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation1); bottomlayout.setAnimation(translateAnimation); toplayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 //底部状态栏消失 small_status.setVisibility(View.GONE); //隐藏上下操作板，&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;防止与上下菜单冲突&lt;/span&gt;，注意只能是隐藏，不能GONE，否者会导致中间控制板占据所有屏幕的问题 nextToogle.setVisibility(View.INVISIBLE); preToogle.setVisibility(View.INVISIBLE); &#125; /** * 隐藏上下栏 */ void hidePanel() &#123; //Log.i(TAG,"hidePanel: 隐藏"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation); bottomlayout.setAnimation(translateAnimation1); toplayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 //底部状态栏显示 small_status.setVisibility(View.VISIBLE); //显示上下操作板，防止与上下菜单冲突 nextToogle.setVisibility(View.VISIBLE); preToogle.setVisibility(View.VISIBLE); &#125; /** * 触发器用来控制显示与隐藏 */ void toogle() &#123; if(mVisible) &#123; hidePanel(); mVisible = false; &#125; else &#123; showPanel(); mVisible = true; &#125; &#125; 接下来就是设定按下监听，然后调用toogle()方法就可以实现上下菜单栏的显示隐藏了。这篇先到这里，有兴趣的可以继续漫吧漫画阅读界面的搭建（一）基础布局搭建（下）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常用颜色表]]></title>
      <url>%2F2017%2F03%2F22%2Fcolor-list%2F</url>
      <content type="text"><![CDATA[颜色名 16进制颜色值 rgb 颜色值 AliceBlue #F0F8FF rgb(240, 248, 255) AntiqueWhite #FAEBD7 rgb(250, 235, 215) Aqua #00FFFF rgb(0, 255, 255) Aquamarine #7FFFD4 rgb(127, 255, 212) Azure #F0FFFF rgb(240, 255, 255) Beige #F5F5DC rgb(245, 245, 220) Bisque #FFE4C4 rgb(255, 228, 196) Black #000000 rgb(0, 0, 0) BlanchedAlmond #FFEBCD rgb(255, 235, 205) Blue #0000FF rgb(0, 0, 255) BlueViolet #8A2BE2 rgb(138, 43, 226) Brown #A52A2A rgb(165, 42, 42) BurlyWood #DEB887 rgb(222, 184, 135) CadetBlue #5F9EA0 rgb(95, 158, 160) Chartreuse #7FFF00 rgb(127, 255, 0) Chocolate #D2691E rgb(210, 105, 30) Coral #FF7F50 rgb(255, 127, 80) CornflowerBlue #6495ED rgb(100, 149, 237) Cornsilk #FFF8DC rgb(255, 248, 220) Crimson #DC143C rgb(220, 20, 60) Cyan #00FFFF rgb(0, 255, 255) DarkBlue #00008B rgb(0, 0, 139) DarkCyan #008B8B rgb(0, 139, 139) DarkGoldenRod #B8860B rgb(184, 134, 11) DarkGray #A9A9A9 rgb(169, 169, 169) DarkGreen #006400 rgb(0, 100, 0) DarkKhaki #BDB76B rgb(189, 183, 107) DarkMagenta #8B008B rgb(139, 0, 139) DarkOliveGreen #556B2F rgb(85, 107, 47) Darkorange #FF8C00 rgb(255, 140, 0) DarkOrchid #9932CC rgb(153, 50, 204) DarkRed #8B0000 rgb(139, 0, 0) DarkSalmon #E9967A rgb(233, 150, 122) DarkSeaGreen #8FBC8F rgb(143, 188, 143) DarkSlateBlue #483D8B rgb(72, 61, 139) DarkSlateGray #2F4F4F rgb(47, 79, 79) DarkTurquoise #00CED1 rgb(0, 206, 209) DarkViolet #9400D3 rgb(148, 0, 211) DeepPink #FF1493 rgb(255, 20, 147) DeepSkyBlue #00BFFF rgb(0, 191, 255) DimGray #696969 rgb(105, 105, 105) DodgerBlue #1E90FF rgb(30, 144, 255) Feldspar #D19275 rgb(209, 146, 117) FireBrick #B22222 rgb(178, 34, 34) FloralWhite #FFFAF0 rgb(255, 250, 240) ForestGreen #228B22 rgb(34, 139, 34) Fuchsia #FF00FF rgb(255, 0, 255) Gainsboro #DCDCDC rgb(220, 220, 220) GhostWhite #F8F8FF rgb(248, 248, 255) Gold #FFD700 rgb(255, 215, 0) GoldenRod #DAA520 rgb(218, 165, 32) Gray #808080 rgb(128, 128, 128) Green #008000 rgb(0, 128, 0) GreenYellow #ADFF2F rgb(173, 255, 47) HoneyDew #F0FFF0 rgb(240, 255, 240) HotPink #FF69B4 rgb(255, 105, 180) IndianRed #CD5C5C rgb(205, 92, 92) Indigo #4B0082 rgb(75, 0, 130) Ivory #FFFFF0 rgb(255, 255, 240) Khaki #F0E68C rgb(240, 230, 140) Lavender #E6E6FA rgb(230, 230, 250) LavenderBlush #FFF0F5 rgb(255, 240, 245) LawnGreen #7CFC00 rgb(124, 252, 0) LemonChiffon #FFFACD rgb(255, 250, 205) LightBlue #ADD8E6 rgb(173, 216, 230) LightCoral #F08080 rgb(240, 128, 128) LightCyan #E0FFFF rgb(224, 255, 255) LightGoldenRodYellow #FAFAD2 rgb(250, 250, 210) LightGrey #D3D3D3 rgb(211, 211, 211) LightGreen #90EE90 rgb(144, 238, 144) LightPink #FFB6C1 rgb(255, 182, 193) LightSalmon #FFA07A rgb(255, 160, 122) LightSeaGreen #20B2AA rgb(32, 178, 170) LightSkyBlue #87CEFA rgb(135, 206, 250) LightSlateBlue #8470FF rgb(132, 112, 255) LightSlateGray #778899 rgb(119, 136, 153) LightSteelBlue #B0C4DE rgb(176, 196, 222) LightYellow #FFFFE0 rgb(255, 255, 224) Lime #00FF00 rgb(0, 255, 0) LimeGreen #32CD32 rgb(50, 205, 50) Linen #FAF0E6 rgb(250, 240, 230) Magenta #FF00FF rgb(255, 0, 255) Maroon #800000 rgb(128, 0, 0) MediumAquaMarine #66CDAA rgb(102, 205, 170) MediumBlue #0000CD rgb(0, 0, 205) MediumOrchid #BA55D3 rgb(186, 85, 211) MediumPurple #9370D8 rgb(147, 112, 216) MediumSeaGreen #3CB371 rgb(60, 179, 113) MediumSlateBlue #7B68EE rgb(123, 104, 238) MediumSpringGreen #00FA9A rgb(0, 250, 154) MediumTurquoise #48D1CC rgb(72, 209, 204) MediumVioletRed #C71585 rgb(199, 21, 133) MidnightBlue #191970 rgb(25, 25, 112) MintCream #F5FFFA rgb(245, 255, 250) MistyRose #FFE4E1 rgb(255, 228, 225) Moccasin #FFE4B5 rgb(255, 228, 181) NavajoWhite #FFDEAD rgb(255, 222, 173) Navy #000080 rgb(0, 0, 128) OldLace #FDF5E6 rgb(253, 245, 230) Olive #808000 rgb(128, 128, 0) OliveDrab #6B8E23 rgb(107, 142, 35) Orange #FFA500 rgb(255, 165, 0) OrangeRed #FF4500 rgb(255, 69, 0) Orchid #DA70D6 rgb(218, 112, 214) PaleGoldenRod #EEE8AA rgb(238, 232, 170) PaleGreen #98FB98 rgb(152, 251, 152) PaleTurquoise #AFEEEE rgb(175, 238, 238) PaleVioletRed #D87093 rgb(216, 112, 147) PapayaWhip #FFEFD5 rgb(255, 239, 213) PeachPuff #FFDAB9 rgb(255, 218, 185) Peru #CD853F rgb(205, 133, 63) Pink #FFC0CB rgb(255, 192, 203) Plum #DDA0DD rgb(221, 160, 221) PowderBlue #B0E0E6 rgb(176, 224, 230) Purple #800080 rgb(128, 0, 128) Red #FF0000 rgb(255, 0, 0) RosyBrown #BC8F8F rgb(188, 143, 143) RoyalBlue #4169E1 rgb(65, 105, 225) SaddleBrown #8B4513 rgb(139, 69, 19) Salmon #FA8072 rgb(250, 128, 114) SandyBrown #F4A460 rgb(244, 164, 96) SeaGreen #2E8B57 rgb(46, 139, 87) SeaShell #FFF5EE rgb(255, 245, 238) Sienna #A0522D rgb(160, 82, 45) Silver #C0C0C0 rgb(192, 192, 192) SkyBlue #87CEEB rgb(135, 206, 235) SlateBlue #6A5ACD rgb(106, 90, 205) SlateGray #708090 rgb(112, 128, 144) Snow #FFFAFA rgb(255, 250, 250) SpringGreen #00FF7F rgb(0, 255, 127) SteelBlue #4682B4 rgb(70, 130, 180) Tan #D2B48C rgb(210, 180, 140) Teal #008080 rgb(0, 128, 128) Thistle #D8BFD8 rgb(216, 191, 216) Tomato #FF6347 rgb(255, 99, 71) Turquoise #40E0D0 rgb(64, 224, 208) Violet #EE82EE rgb(238, 130, 238) VioletRed #D02090 rgb(208, 32, 144) Wheat #F5DEB3 rgb(245, 222, 179) White #FFFFFF rgb(255, 255, 255) WhiteSmoke #F5F5F5 rgb(245, 245, 245) Yellow #FFFF00 rgb(255, 255, 0) YellowGreen #9ACD32 rgb(154, 205, 50)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo 使用总结]]></title>
      <url>%2F2017%2F03%2F22%2Fsummer-hexo%2F</url>
      <content type="text"><![CDATA[1.在 md 文件中引入图片等资源md 中引入图片是可以通过相对地址的，所以为了引用到，可以生成一遍，然后把图片放到 public 文件夹下的需求位置，然后通过相对地址引用就好了，来个栗子，我们放了一张 test.png 到 public/img/ 下，那么相对地址是：1/img/test.png 其他资源同样如此使用，不过为了节约空间，建议保存图片到其他位置（比如网盘之类或者云服务器，毕竟Github pages 空间有限）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Next 使用总结]]></title>
      <url>%2F2017%2F03%2F22%2Fsummer-next%2F</url>
      <content type="text"><![CDATA[1. Next 中的多级目录Next 是默认支持了多级目录的，那么要怎么设置呢？添加分类标签我就不说了，官方文档说的很清楚，我们创建（ hexo new summer_next）了一篇文章后,大概是这样子的12345---title: summer-nextdate: 2017-03-22 09:36:37tags:--- 默认并没有分类标签，我们想要实现把文章分类的话，就添加如下代码12categories: - Hexo 这样我们的文章就会被分类到 Hexo 类别下，那么如何实现多级分类呢？很简单，只需要在 Hexo （也就是你想要增加子分类的分类后），再写出分类，来个栗子1234categories: - Hexo- Next- 定制你的 Next 侧边栏 这样我们就实现了如下效果,多级菜单就实现了： 2. Next 中 Nest 动画背景这个很简单，直接打开 next/_config.yml 文件，找到 canvas ：false，然后改成 true 就好了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[定制你的 Next 侧边栏---定制社交链接]]></title>
      <url>%2F2017%2F03%2F22%2Fcustom-your-next-sidebar%2F</url>
      <content type="text"><![CDATA[Next 侧边栏文件的位置为（next/layout/_macro/sidebar.swig）实现自定义的社交这里有人就会觉得我是多事了，我确实是蛋疼，不仅蛋疼还胃疼，我直接按照 Next 上的主题配置社交模块，居然没有任何反应，作为一个才入坑的萌新，迫于无奈，只能使用笨法子来暴力解决了。还是看看症状图吧，服药前 服药后 下面说治病过程，打开侧边栏文件，找到如下位置（ 82 行）1234567891011121314&lt;div class=&quot;links-of-author motion-element&quot;&gt; &#123;% if theme.social %&#125; &#123;% for name, link in theme.social %&#125; &lt;span class=&quot;links-of-author-item&quot;&gt; &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; target=&quot;_blank&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot;&gt; &#123;% if theme.social_icons.enable %&#125; &lt;i class=&quot;fa fa-fw fa-&#123;&#123; theme.social_icons[name] | default(&apos;globe&apos;) | lower &#125;&#125;&quot;&gt;&lt;/i&gt; &#123;% endif %&#125; &#123;&#123; name &#125;&#125; &lt;/a&gt; &lt;/span&gt; &#123;% endfor %&#125; &#123;% endif %&#125; &lt;/div&gt; 可以看到这里是使用了遍历来生成我们的社交，但是不知为毛我的没有。所以就暴力一点。直接全部改成下面的样子123456789101112131415161718192021222324252627282930313233343536&lt;!--自己写的社交链接--&gt; &lt;div class=&quot;links-of-author motion-element&quot;&gt; &lt;span class=&quot;links-of-author-item&quot;&gt; &lt;a href=&quot;https://github.com/WinterSmileSB101&quot; title=&quot;Github&quot;&gt; &lt;i class=&quot;fa fa-fw fa-github fa-lg&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;span class=&quot;links-of-author-item&quot;&gt; &lt;a href=&quot;http://weibo.com/5602632941/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1&quot; title=&quot;微博&quot;&gt; &lt;i class=&quot;fa fa-fw fa-weibo fa-lg&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;span class=&quot;links-of-author-item&quot;&gt; &lt;a href=&quot;http://www.jianshu.com/users/73344bc7e890/timeline&quot; title=&quot;简书&quot;&gt; &lt;i class=&quot;fa fa-fw fa-bookmark fa-lg&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;links-of-author-item&quot;&gt; &lt;a href=&quot;https://www.douban.com/people/159359470/&quot; title=&quot;豆瓣&quot;&gt; &lt;i class=&quot;fa fa-fw fa-newspaper-o fa-lg&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;span class=&quot;links-of-author-item&quot;&gt; &lt;a href=&quot;http://blog.csdn.net/qq_21265915&quot; title=&quot;CSDN博客&quot;&gt; &lt;i class=&quot;fa fa-fw fa-bug fa-lg&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;/div&gt; &lt;!--自己写的社交链接--&gt; 个人觉得这里条目也不多，就直接全部写出来了，懒得去搞那些花里胡哨的东西（懒癌症又犯了），把 href 中的换成对应你的链接就可以了，如果多了可以删除一些，少了可以增加一些，真是美滋滋。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[为你的Hexo添加Nest动画]]></title>
      <url>%2F2017%2F03%2F22%2FNext-Use-Nest%2F</url>
      <content type="text"><![CDATA[如果你没有使用 Hexo 主题（或者主题中没有集合Nest）1.添加下列代码到你的布局文件中的 标签之前（位置/layout/layout.ejs）1&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 2.在引用的同时可以对 Nest 进行相关的配置 color ： 线条颜色, 默认: ‘0,0,0’ ；三个数字分别为(R,G,B)，注意用,分割 opacity : 线条透明度（0~1）, 默认: 0.5 count : 线条的总数量, 默认: 150，（建议修改少点，否者 cpu 占用过高） zIndex : 背景的z-index属性，css属性用于控制所在层的位置, 默认: -13.举个栗子 1&lt;script type=&quot;text/javascript&quot; color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 然后编译，提交，就大功告成 如果你使用集成了 Nest 的主题，就去主题配置中开启这里以 Next 主题为栗子（主题配置文件在 next/_config.yml,默认是false），找到12# Canvas-nestcanvas_nest: false 在文档的大概接近最下方的位置，把 false 修改成 ture，然后编译，提交，就大功告成]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用GitHubPages+Hexo+域名创建独立私有博客]]></title>
      <url>%2F2017%2F03%2F20%2FCreatYourOwnWithGithubpages-and-Hexo%2F</url>
      <content type="text"><![CDATA[使用GitHubPages+Hexo+域名创建自己的独立私有博客为什么要搭建独立私有博客？1.独立的才是最好的。2.可以使用免费的github控件来托管自己的博文。3.可以通过个性域名而不是绑定的二级域名。4.可以自由的定制自己博客的所有东西（所有的所有都可以自由定制，想想都激动啊）。搭建步骤1.安装Node.js- 绿色安装可以直接在网上下载绿色版的node.js，这样就可以不用安装了，但是需要自己配置环境变量，然后通过cmd中键入node来进入node.js- 下载node.js中文网官网下载图例：1.英文官网 2.中文官网 - 安装过程基本一路next，你也可以改变安装的位置，安装位置默认是在C盘。 安装完成后我们可以通过cmd键入node来进入node.js或者直接通过开始菜单中node.js文件夹下的node.js command prompt 来直接进入node.js交互模式，如下图 2.更改NPM源国外的NPM源并不稳定，即使翻墙也不一定能将Hexo下载下来，所以这里直接更改为淘宝源。1$ npm config set registry https://registry.npm.taobao.org npm info underscore 3.安装Hexo这里安装的是hexo最新版本，如果想安装以前的的版本请运行命令1$ npm install -g hexo 4.快速开始- Hexo 文档这里再贴上Hexo的文档，想研究的可以看看Hexo中文文档- 建立Hexo工程1$ hexo init blog 上述命令的意思为在当前命令目录创建一个名为blog的文件夹来作为工程的根目录，想要在其他地方创建可以直接cd到那个位置然后再运行上诉命令（这里blog也是可以随便你定义的）输入命令后会是一顿加载过程，不用管，你现在可以去喝口水或者休息一下眼睛。等一会再回来应该就会看到如下界面(由于输出太多中间我就省略了) 好那么现在我们的工程初始化就算完成了。- 新建一个md文档这里就需要两步了，先需要进入工程文件夹1$ cd blog 先来看看如果不进入的话会出现什么情况 现在看看正确的情况 然后我们创建md文档文件–当然是老套路，一言不合就HelloWorld，此时会在/blog/sources/_post/目录下生成HelloWorld.md文件。1$ hexo new &quot;HelloWorld&quot; 这里的”HelloWorld”是文件的名称，也是我们的文章标题的名称，可以自由定义- 把我们建立的md文件交付Hexo生成静态网页文件使用Hexo引擎将Markdown格式的文件解析成可以使用浏览器查看的HTML文件，HTML文件存储在blog/public目录下。命令如下1$ hexo generate 或者简化的写法1$ hexo g 结果如下 - 运行Hexo 服务器1$ hexo server 打开命令行提示的地址，一般是http://0.0.0.0:4000/，或者是http://localhost:4000,既可以看到我们的Hexo网站。如果提示找不到server命令则需要运行命令1$ npm install hexo-server--save Hexo3.0之后把server独立出来了，所以需要单独安装。运行命令后,可以看到这里我们的服务器地址是http://localhost:4000/ 现在访问http://loaclhost:4000/，可以看到我们所写的文章已经提交到Hexo服务器上了 以后新建文件同理，修改了内容之后需要先生成静态网页文件再启动服务器。- Hexo 安装主题安装主题需要从Git上克隆，Hexo提供了默认主题landscape。如果想要使用别人的主题则需要用到Git工具。Windows用户和Mac用户安装Git都比较简单，Windows用户登录git官网下载软件安装，Mac用户只需在命令行中键入Git命令就会自动提示安装（详细安装教程请移步Git）。安装完成后打开命令行工具（Windows用户打开开始菜单Git目录下的Git Bash）。或者直接在你的Hexo工程的根文件夹打开cmd键入如下命令（这里以yilia主题为例，Git地址）1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置修改hexo工程根目录下的 _config.yml ： theme: yiliaHexo 更新主题12$ cd themes/yilia$ git pull 具体yilia主题配置请移步Git地址- 附上一些 Hexo 主题地址yilia知乎：好看的 Hexo 主题排行下面我们就要把 Hexo 的静态网页上传到GitHub pages上去- 申请GitHub账号已经有的同学可以无视首先进入网站 GitHub然后点击右上角的 sign up 进入注册界面，如下 输入你的用户名（不能改，而且只能有一个），其他的就和一般的注册没啥两样。必要：GitHub的邮箱必须要绑定且验证，要不然没有免费静态空间—应该是这样的，Git具体配置注册帐号以及验证完成后，登录Github点击右上角 + 号，点击 New Repository（新建仓库）如下图 进入新建仓库界面，这里是重点，仓库的名称必须是 yourusername.github.io,这里 yourusername 就是你注册时候的 username 必须严格按照这种命名方式，否者是不能通关过 yourusername.github.io 访问到此页面的，具体如下图,其中 youruesrname 就是前面的 owner 单用户的时候可以直接这样看，多用户时注意区别，由于我已经创建了 WinterSmileSB101.github.io 所以他提示已经存在，你在确定输入无误之后就点击3的位置，其他的东西你也可以进行配置，不配置也无所谓。 下面在浏览器中输入WinterSmileSB101.github.io ,由于这里我已经搭建完成所以效果如下： 现在就要把我们的静态网页文件通过 Hexo 上传到 Github 上我们的个人主页上了在工程目录安装 deployer-git 命令如下1$ npm install hexo-deployer-git --save 在/blog/_config.yml中修改deploy属性(注意:之后有空格，否则出错)1234deploy: type: git repository: https://github.com/WinterSmileSB101/WinterSmileSB101.github.io.git branch: master 把repository： 后的换成你自己的 Git 仓库地址如何找到自己的Git项目地址(如果直接进入项目主界面看不到链接，就按下图顺序操作) 这里使用的是 http 方式提交到Git，可能会频繁的要求输入帐号以及密码，嫌麻烦可以通过SSH的方式提交然后再通过下面命令提交代码到Git12$ hexo generate$ hexo deploy 以后有修改的话就依次运行上面代码提交Git，就可以了这里可能在运行 hexo deploy 的时候出现如下问题1error deployer not found:github 有几种方式解决这个问题- 注意 type 的值： hexo 更新到3.0之后，deploy的type 的github需要改成git- 解决方法：npm install hexo-deployer-git –save 改了之后执行，然后再部署，就可以了恭喜你，现在你已经拥有一个自己的私有博客了！下面是域名申请与绑定，不想使用个人域名的就可以不用接着往下再看了。- 使用域名来访问你的 Hexo申请域名申请域名有几种方式，比如腾讯云、阿里云（推荐）、GoDaddy 等等。这里我用 阿里云 为例子先登录，这里可以直接通过淘宝帐号登录阿里云然后1234graph LR点击产品--&gt;域名注册域名注册--&gt;在搜索框里输入你想注册的域名在搜索框里输入你想注册的域名--&gt;点击查询 过程如下图 我们可以看到，这里就检查出了域名是否被注册，选择没被注册的加入清单然后去结算就好了。 绑定域名到yourusername.github.io打开你的 Hexo 项目文件夹，进入source文件夹，并新建文本文档名为 CNAME（注意没有后缀名），如下图 然后通过记事本打开 CNAME 文件，输入你购买的域名并且保存，如下图 我们还需要解析域名12graph LR进入控制台--&gt;点击左侧域名 出现如下,然后点击解析 进入域名解析界面,点击添加解析，然后会提示验证，验证即可 这里的记录类型我们选择 CNAME主机记录可以不用管记录值填写前面的 yourusername.github.io，如下 记录类型选择 A 的话 记录值就要填写通过 cmd ping yourusername.github.io 所得出的IP地址。如下（红圈的部分即为 IP 地址） 然后点击保存，这时候你又可以去休息一下了，因为这个修改会有 1 - 几分钟左右的缓存时间，也就是可能不会马上生效。休息完了回来，打开浏览器，输入你的域名，比如我这里申请的是WinterSmileSB101.online，见证奇迹的时刻来了， 别急，还没按下 Enter 呢OK 看到这里相信你已经搭建好了自己的独立私有博客了，接下来就去丰富它吧Hexo 生成的是 md 文件（markDown文件），一种很强大的标记语言，使用她我们能简单的控制格式，简单的做出各种专业图等等，具体使用方式MarkDown中文文档以及一些 markDown 编辑器1.好用的 markDown 编辑器2.有道云笔记3.七款优秀的 markDown 编辑器3.Atom(推荐，我现在就在用支持导出PDF等，也支持实时预览，真的很强大的一款编辑器)]]></content>
    </entry>

    
  
  
</search>
