{"meta":{"title":"WinterSmileSB101 的个人房间","subtitle":"胆小认生，不易相处","description":"成都工业学院14级，学习了各种后台技能，对前端也甚是抱有好感，准备再入坑前端。","author":"WinterSmileSB101","url":"http://WinterSmileSB101.online"},"pages":[{"title":"categories","date":"2017-03-23T14:44:32.000Z","updated":"2017-03-23T14:44:55.075Z","comments":false,"path":"categories/index.html","permalink":"http://WinterSmileSB101.online/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-03-23T14:43:18.000Z","updated":"2017-03-23T14:43:52.689Z","comments":false,"path":"tags/index.html","permalink":"http://WinterSmileSB101.online/tags/index.html","excerpt":"","text":""},{"title":"关于我 about","date":"2017-03-21T11:07:31.000Z","updated":"2017-03-21T11:27:36.000Z","comments":true,"path":"about/index.html","permalink":"http://WinterSmileSB101.online/about/index.html","excerpt":"简历张孝波联系方式Email：891532752@qq.com OR zxb13194889618@outlook.com个人博客：http://WinterSmileSB101.online OR http://blog.csdn.net/qq_21265915GitHub： https://github.com/WinterSmileSB101专业技能熟悉Unity3D使用，有一定的C#经验熟悉JAVA的相关知识熟悉Android相关知识，4大组件都有了解以及能够使用能够使用第三方开源库到自己的项目中能够使用Git进行版本控制对一些前端流行框架有一定的了解","text":"简历张孝波联系方式Email：891532752@qq.com OR zxb13194889618@outlook.com个人博客：http://WinterSmileSB101.online OR http://blog.csdn.net/qq_21265915GitHub： https://github.com/WinterSmileSB101专业技能熟悉Unity3D使用，有一定的C#经验熟悉JAVA的相关知识熟悉Android相关知识，4大组件都有了解以及能够使用能够使用第三方开源库到自己的项目中能够使用Git进行版本控制对一些前端流行框架有一定的了解 教育背景2014/09–2018/07 成都工业学院 计算机工程学院 学士参与项目参与了学校的一个体质监测系统的开发（当时是做的Webservices后台）独立开发了几个小游戏独立开发了几款软件（部分暂时没有同步到Git）1.馨天气（一款天气App）2.馨拍（一款拍照软件）3.馨乐（一款音乐软件，UI部分是仿照网易云音乐）4.馨闻（一款新闻类APP）5.易希芸（一款查询购物类的APP–卖家端）6.漫吧（一款漫画APP，基于Android爬虫–自行写的爬虫代码，没有依赖框架）工作经历本人现在正在苦苦找寻实习工作中，希望有公司看到这里能够给我一次机会，谢谢。为什么选择我本人现在虽然暂无工作经验，但是有一定的专业知识积累，其他各方面的知识也有不少了解，而且热爱学习，积极向上，对编程学习有着极大的兴趣，能够积极的完成任务，能够独立或者合作的完成任务"}],"posts":[{"title":"Python3.7 爬虫（二）使用 Urllib2 与 BeautifulSoup4 抓取解析网页","slug":"Python3.7 爬虫（二）使用 Urllib2 与 BeautifulSoup 抓取解析网页","date":"2017-04-08T08:55:47.000Z","updated":"2017-04-09T06:17:52.000Z","comments":true,"path":"2017/04/08/Python3.7 爬虫（二）使用 Urllib2 与 BeautifulSoup 抓取解析网页/","link":"","permalink":"http://WinterSmileSB101.online/2017/04/08/Python3.7 爬虫（二）使用 Urllib2 与 BeautifulSoup 抓取解析网页/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 开篇上一篇中我们通过原生的 re 模块已经完成了网页的解析，对于熟悉正则表达式的童鞋来说很好上手，但是对于萌新来说，还是有一定难度以及复杂度的，那么这里我们就来使用第三方解析包来解析获取到的网页吧。 BeautifulSoup官方的 BeautifulSoup 是这样的：123Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。Beautiful Soup已成为和lxml、html6lib一样出色的python解释器，为用户灵活地提供不同的解析策略或强劲的速度。 而且这个支持多种解析方式，以及解析方式中也可以加上正则表达式来过滤结果，是不是已经迫不及待要试试这个第三方库了？那么看看官方中文文档，如果看不到超链的：http://beautifulsoup.readthedocs.io/zh_CN/latest/ ，或者看看这篇博文，地址 : http://cuiqingcai.com/1319.html ,文档说的很清楚，从安装到使用，所以我这里就不再添足了。下面直接讲怎么使用它来解析一篇网页，我们这里还是以 糗事百科 来实验。 获取网页内容网址：http://www.qiushibaike.com/imgrank/网页内容以及我们想要获取的信息如下： 下面解释一下上图中几个位置的对应信息 作者信息 段子文字部分 段子图片部分（如果没有图片则没有这个元素） 段子评分以及评论 我们这里还是通过 Urllib2 来获取网页内容，代码如下： 12345678910111213# -*- coding: utf-8 -*-import urllibimport urllib.requesturl = \"http://www.qiushibaike.com/imgrank/\"print(url)user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'req = urllib.request.Request(url, headers=&#123; 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'&#125;)response = urllib.request.urlopen(req)content = response.read().decode('utf-8')print(content) 运行,网页获取成功： 解析 Html下面就是解析了，先引入包1from bs4 import BeautifulSoup 分别解析然后使用解析，这里我们先来获取作者头像链接，尾部添加代码如下： 1234soup = BeautifulSoup(content, \"lxml\")items = soup.select(\"div.author a img\")for item in items: print(item['src']) 这里我是用的解释器是 lxml 这里你也可以使用原生的 html.parser，不过 html.parser 解析速度一般而且对中文支持不是很好，所以这里我们用解析快对中文支持好的 lxml 具体的解释器文档请看 官方中文文档 我使用的方式是：css 选择器，因为我粗略还是有点 Web 功底，所以感觉这个比较顺手，你们可以选择其他方式，看自己喜好了，建议多看 官方中文文档 来熟悉这个库的使用。想要使用css选择器但是不熟悉 css 的可以看看这里 CSS选择器详解 运行结果如下,是不是很简单？： 一次性解析通过上面的解析，我们已经会使用 BeautifulSoup来进行解析 html 了那么这次来解析剩下的东西，最终代码如下：12345678910111213141516171819202122232425262728293031# -*- coding: utf-8 -*-from bs4 import BeautifulSoup import urllibimport urllib.requesturl = \"http://www.qiushibaike.com/\"print(url)user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'req = urllib.request.Request(url, headers=&#123; 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'&#125;)response = urllib.request.urlopen(req)content = response.read().decode('utf-8')print(content)soup = BeautifulSoup(content, \"lxml\")items1 = soup.select(\"div.author a img\")items2 = soup.select(\"a div.content span\")items3 = soup.select(\"div.thumb a img\")n = 0length1 = len(items1)length3 = len(items3)while n &lt; length1: print('作者信息：\\n名称：'+items1[n]['alt']+'\\n头像链接：'+items1[n]['src']+'\\n\\n') print('段子信息：\\n段子：'+items2[n].text+'\\n') #以免有些没有图片的段子报错 if n &lt; length3: print('段子图片链接：'+items3[n]['src']+'\\n\\n\\n') else: print('\\n\\n\\n') n += 1 运行，结果： 可以看到我们的数据已经全部取出来了。 获取全部网页段子那么想要获取全部的段子怎么办？网页中下方有页数，先通过主页获取一个html 然后得到页数 后面通过 http://www.qiushibaike.com/imgrank/page/ +页数就可以了，比如我们这里的首页其实也可以表示为 http://www.qiushibaike.com/imgrank/page/1 ，表示之后通过循环或者递归调用爬取即可。","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Python 爬虫","slug":"爬虫/Python-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Python-爬虫/"}],"tags":[{"name":"Python3","slug":"Python3","permalink":"http://WinterSmileSB101.online/tags/Python3/"},{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"Urllib2","slug":"Urllib2","permalink":"http://WinterSmileSB101.online/tags/Urllib2/"},{"name":"BeautifulSoup4","slug":"BeautifulSoup4","permalink":"http://WinterSmileSB101.online/tags/BeautifulSoup4/"}]},{"title":"Python3.7 爬虫（一）使用 Urllib2 与正则表达式抓取","slug":"Python3.7 爬虫（一）使用 Urllib 与正则表达式抓取","date":"2017-04-08T08:55:47.000Z","updated":"2017-04-09T02:25:07.721Z","comments":true,"path":"2017/04/08/Python3.7 爬虫（一）使用 Urllib 与正则表达式抓取/","link":"","permalink":"http://WinterSmileSB101.online/2017/04/08/Python3.7 爬虫（一）使用 Urllib 与正则表达式抓取/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 我们今天就一起来通过 Python3 自带库 Urllib 与正则表达式来抓取糗事百科。废话不多说，下面正题：分析网址通过浏览器进入糗事百科首页，http://www.qiushibaike.com/你会看到如下界面：然后按下F12，进入开发者模式，感觉貌似没什么特殊的嘛。那么直接通过 http://www.qiushibaike.com/ 网址进行爬取。 准备工作既然是第一篇，那么必不可少的就是环境的搭建以及编辑器的选取。 这里环境的搭建我就不多说了 廖雪峰廖老师的教程中说的很清楚,Python一点都不了解的童鞋可以先看看这个学习一下，我也整理了 PDF 以及 EPUB 版本，观看或者下载，地址 至于编辑器，我这里推荐 vscode，好看开源插件多,这里再介绍开发 python 时候的辅助插件，地址新建项目文件夹任意找一个位置，只要你自己觉得舒服的地方新建一个项目文件夹，比如我的项目位置是：1E:\\adt-bundle-windows-x86_64-20131030\\python\\3.x\\projects\\demo 新建文件我这里是使用的 vscode 选中文件夹右键通过vscode打开，而后在软件中的文件夹上右键新建文件，输入 12345678910然后输入如下语句：```python# -*- coding: utf-8 -*-import urllib.requestimport urlliburl = &quot;http://www.qiushibaike.com&quot;response = urllib.request.urlopen(url)content = response.read().decode(&apos;utf-8&apos;)print(content) 运行，出师不利啊，看看提示，说是没有响应。 访问网页无响应其实就是网站的 UA 防护，一般的网站都要检查是否是浏览器在进行访问，所以我们这里的方式就是设置请求头，最简答的设置一个浏览器类型好了。为上述代码添加如下代码,并且修改打开url 为 req：1234user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'req = urllib.request.Request(url, headers=&#123; 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'&#125;) 再次运行,这里网页太长就不贴完了。 提取自己想要的信息前面我们已经拿到了网页 html 想做什么都随便我们了，这里我们要使用这些 html 来获得我们想要的信息。比如这里我们要获取每条段子的文字或者图片链接那么再次回到浏览器，按下 F12，点击 Elements 面板，效果如下： 从上图可以发现，我们需要的信息在右边，1 位置是发布者，发布者头像等，2 位置就是我们所需要的文字内容了，3 位置就是我们的图片了，没有图片的话是没有 3 位置的 div 的。 设计正则表达式这里给出一个学习 Python3 re 模块正则表达式，对正则表达式不了解的可以看看，想要深入了解请自行百度正则表达式，地址 我们要匹配的内容如下：1234567891011&lt;a href=\"/article/118848511\" target=\"_blank\" class=\"contentHerf\"&gt;&lt;div class=\"content\"&gt;&lt;span&gt;今天去相亲了！去之前，媒人拿出了张照片 说女方喜欢拍古装艺术照 我一看照片 虽然只露出眼睛和眉毛，但从我阅人无数的经验来看，此女子也应该还不错！可回来之后，我生气的质问媒人 完全跟照片不一样啊 媒人说.....你是不是把照片拿反了.....&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class=\"thumb\"&gt;&lt;a href=\"/article/118848511\" target=\"_blank\"&gt;&lt;img src=\"http://pic.qiushibaike.com/system/pictures/11884/118848511/medium/app118848511.jpg\" alt=\"完全跟照片不一样啊\"&gt;&lt;/a&gt;&lt;/div&gt; 先来匹配文字部分吧，1'&lt;div.*?class=\"content\"&gt;\\n*?&lt;span.*?&lt;/span&gt;\\n*?&lt;/div&gt;' 使用 re 模块进行正则匹配，添加 re``` 引用，并且追加下面代码到文件末尾12345```pythonpattern = re.compile(&apos;&lt;div.*?class=&quot;content&quot;&gt;\\n*?&lt;span.*?&lt;/span&gt;\\n*?&lt;/div&gt;&apos;)items = re.findall(pattern, content)for item in items: print(item) 运行：可以看到我们已经取出需要的标签了 不过可以看到，这里我们获取到了只是标签的位置，这里我们需要的是内容，所以需要去掉我们不需要的部分，通过字符串的 replace(old,new) 可以实现这一点，修改代码如下：12345b = '&lt;div class=\"content\"&gt;&lt;span&gt;'for item in items: temp = item.replace('\\n', '') temp = temp.replace('&lt;/span&gt;&lt;/div&gt;', '') print(temp.replace(b, '')+'\\n') 再次运行： 可以看到已经是纯文本了。 获取图片段子编写正则表达式 1'&lt;a.*?&gt;\\n&lt;img.*?&gt;' 写入代码：12 运行： 和上面一样，获取到了标签，但是我们需要准确的数据，这里我们再使用一次正则表达式匹配网址：1'http:.*[JPEG|jpg]' 修改代码如下：1234for item in items: resp = re.compile('http:.*[JPEG|jpg]') res = resp.findall(item) print(res[0]) 运行： 图片地址取出来了 一次完成工作下面我们来把上面的工作合到一起完成,这里就要提到一个概念 分组，原文概念解释如下： 正则表达式分组分组就是用一对圆括号“()”括起来的正则表达式，匹配出的内容就表示一个分组。从正则表达式的左边开始看，看到的第一个左括号“(”表示第一个分组，第二个表示第二个分组，依次类推，需要注意的是，有一个隐含的全局分组（就是0），就是整个正则表达式。分完组以后，要想获得某个分组的内容，直接使用group(num)和groups()函数去直接提取就行。 例如：提取代码中的超链接中的文本123456&gt;&gt;&gt; s='&lt;div&gt;&lt;a href=\"https://support.google.com/chrome/?p=ui_hotword_search\" target=\"_blank\"&gt;更多&lt;/a&gt;&lt;p&gt;dfsl&lt;/p&gt;&lt;/div&gt;'&gt;&gt;&gt; print re.search(r'&lt;a.*&gt;(.*)&lt;/a&gt;',s).group(1)更多或者&gt;&gt;&gt; print re.match(r'.*&lt;a.*&gt;(.*)&lt;/a&gt;',s).group(1)更多 按照上面的分组匹配以后，我们就可以拿到我们想拿到的字串，但是如果我们正则表达式中括号比较多，那我们在拿我们想要的字串时，要去挨个数我们想要的字串时第几个括号，这样会很麻烦，这个时候Python又引入了另一种分组，那就是命名分组，上面的叫无名分组。 命名分组命名分组就是给具有默认分组编号的组另外再给一个别名。命名分组的语法格式如下： (?P正则表达式)#name是一个合法的标识符如：提取字符串中的ip地址1234&gt;&gt;&gt; s = \"ip='230.192.168.78',version='1.0.0'\"&gt;&gt;&gt; re.search(r\"ip='(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+).*\", s)&gt;&gt;&gt; res.group('ip')#通过命名分组引用分组'230.192.168.78' 存在的一个坑这里有一个匹配模式的坑，关于匹配模式： 编译标志（匹配模式）re.compile() 函数还接受可选的第二个参数，用以设置匹配模式。可选的匹配模式有： re.IGNORECASE：忽略大小写，同 re.I。 re.MULTILINE：多行模式，改变^和$的行为，同 - re.M。 re.DOTALL：点任意匹配模式，让’.’可以匹配包括’\\n’在内的任意字符，同 re.S。 re.LOCALE：使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定， 同 re.L。 re.ASCII：使 \\w \\W \\b \\B \\s \\S 只匹配 ASCII 字符，而不是 Unicode 字符，同 re.A。 re.VERBOSE：详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。主要是为了让正则表达式更易读，同re.X。例如，以下两个正则表达式是等价的：1234a = re.compile(r\"\"\"\\d + # the integral part \\. # the decimal point \\d * # some fractional digits\"\"\", re.X) b = re.compile(r\"\\d+\\.\\d*\") 看到这里是不是很兴奋啊？这样可以简化很多操作，那么来试试：12pattern = re.compile('&lt;div.*?class=\"content\"&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/div&gt;', re.S)items = re.findall(pattern, content) 还没等运行呢，就报错了。。 神马，说不存在？我去，什么意思，官方文档莫非是在逗我吗？仔细研究，搞了半天，扫描了 3 遍官方文档之后，终于发现了，你丫的藏的这么深！ 原来在 Python 3.6 之后，把以前的 re.S 等等的 flag 全部转移到 RegexFlag 中了，所以我们要改变用法 把 改写成 ```re.RegexFlag.S```, 这次没有报错误了，运行(perfect nice！)：123456789101112131415161718192021222324252627282930313233![image](http://on792ofrp.bkt.clouddn.com/17-4-9/23522085-file_1491698778621_16868.png)### 我们的代码修改于是我们根据分组以及模式匹配就可以非常简单的取到对应位置的正则表达式的值，修改正则表达式如下，现在我们一口气获取到内容与图片,最终代码：```python# -*- coding: utf-8 -*-import urllib.requestimport urllibimport reurl = &quot;http://www.qiushibaike.com/imgrank/&quot;user_agent = &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;req = urllib.request.Request(url, headers=&#123; &apos;User-Agent&apos;: &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;&#125;)response = urllib.request.urlopen(req)content = response.read().decode(&apos;utf-8&apos;)print(content)patternPic = re.compile(&apos;&lt;a.*?&gt;\\n&lt;img src=&quot;(.*?)&quot;.*?&gt;&apos;)pattern = re.compile(&apos;&lt;div.*?class=&quot;content&quot;&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/a&gt;&apos;+&apos;(.*?&lt;div.*?&quot;stats&quot;.*?&lt;/div&gt;)&apos;, re.RegexFlag.S)items = re.findall(pattern, content)for item in items: print(isinstance(item, str)) print() if re.search(&apos;img&apos;, item[1]): #再次匹配 patternA = re.compile(&apos;&lt;a.*?&gt;.*?&lt;img src=&quot;(.*?)&quot;.*?&gt;&apos;, re.RegexFlag.S) img = patternA.findall(item[1]) print(&apos;段子：==&gt; &apos;+item[0], &apos;\\n\\n&apos;, &apos;段子图片：==&gt; &apos;+img[0]+&apos;\\n\\n\\n&apos;) else: print(&apos;段子：==&gt; &apos;+item[0], &apos;\\n\\n\\n&apos;) 效果如下： 那么我们的爬虫就算是完成了，你也可以完善一下，比如说爬取用户的信息以及评论等最后欢迎交流学习。","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Python 爬虫","slug":"爬虫/Python-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Python-爬虫/"}],"tags":[{"name":"Python3","slug":"Python3","permalink":"http://WinterSmileSB101.online/tags/Python3/"},{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"Urllib2","slug":"Urllib2","permalink":"http://WinterSmileSB101.online/tags/Urllib2/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://WinterSmileSB101.online/tags/正则表达式/"}]},{"title":"Python3.7 爬虫（三）使用 Urllib2 与 BeautifulSoup4 爬取网易云音乐歌单","slug":"Python3.7 爬虫（三）使用 Urllib2 与 BeautifulSoup 爬取网易云音乐歌单","date":"2017-04-08T08:55:47.000Z","updated":"2017-04-09T12:03:39.872Z","comments":true,"path":"2017/04/08/Python3.7 爬虫（三）使用 Urllib2 与 BeautifulSoup 爬取网易云音乐歌单/","link":"","permalink":"http://WinterSmileSB101.online/2017/04/08/Python3.7 爬虫（三）使用 Urllib2 与 BeautifulSoup 爬取网易云音乐歌单/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 废话在前面的的博客中我们已经能够使用 python3 配合自带的库或者第三方库抓取以及解析网页，我们今天来试试抓取网易云音乐的歌单信息 分析网页要战胜敌人，必须要先了解敌人，然后设计对策，一招致命！首先浏览器打开网页,按下 F12：http://music.163.com/#/discover/playlist 我们现在来分析网页点击右侧界面中的 Network 进入网络请求分析界面，如下： 上图中我们可以看到请求还分了类型的，这里我们查看类型为 document 的条目，看着 playlist 条目比较像是包含歌单的文件，于是我们点击 playlist 条目： 点击 preview， 如上图，我们左边的歌单在右边找到了，看来就是这个请求获取到了歌单。然后我们点击 Headers 界面，来到请求头信息界面： 可以看到，这条请求的网址是：http://music.163.com/discover/playlist ，向下翻还可以发现，host 为 music.163.com，下面我们就可以来获取网页数据了，不过现在网址变成了：http://music.163.com/discover/playlist 抓取 html网页内容获取，按照三部曲来做 直接通过网址访问，看能否取到需要的 html (一般是不可能的) 通过设置 headers，一开始就设置一个 UA，如：1&apos;User-Agent&apos;: &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;&#125;``` 不过一般来说是可以通过正确获得 html 的，但是有些网站会判断 host 是否是自己，所以有的时候我们还需要加上(这里以我们要访问的网易歌单界面来作为例子)：```&apos;Host&apos;: &apos;music.163.com&apos; 一开始能获取，多次调试后不能获取了？这个是网站检测到你的 IP 访问次数过多而禁止你访问了（也就是防止）我们就需要设置代理来避免这个问题。示例代码如下： 123456789import urllib2enable_proxy = Trueproxy_handler = urllib2.ProxyHandler(&#123;\"http\" : 'http://some-proxy.com:8080'&#125;)null_proxy_handler = urllib2.ProxyHandler(&#123;&#125;)if enable_proxy: opener = urllib2.build_opener(proxy_handler)else: opener = urllib2.build_opener(null_proxy_handler)urllib2.install_opener(opener) 通过上面的分析我们就通过网址：http://music.163.com/discover/playlist 来获取歌单，先直接获取，不设置 Headers，运行，发现就输出了： 这样我们就可以开始解析 html 了，不过我还是建议添加上 UA 与 host ，养成一个习惯，不要每次都试来浪费时间。于是我们获取 html 的代码如下： 1234567891011121314151617181920# 爬取网易云音乐的爬虫# -*- coding: utf-8 -*-import urllib.requestimport urllibdef gethtml(url, headers=&#123;&#125;): req = urllib.request.Request(url, headers=headers) response = urllib.request.urlopen(req) content = response.read().decode('utf-8') response.close() return contenturl = 'http://music.163.com/discover/playlist'url = gethtml(url, headers=&#123; 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)', 'Host': 'music.163.com'&#125;)print(url) 解析 html这里我们使用 BeautifulSoup4 使用 css 选择器来选择元素来解析 html ，回到浏览器 F12，来分析怎么获得需要的信息： 如图，从上到下依次的信息是 歌单封面 歌单名称与链接 歌单播放量 歌单创建人以及创建人主页 那么我们现在就来以此通过css 选出包含内容的最小标签。封面图片 img 标签 1234567soup.select('ul#m-pl-container li div img')``` 歌单名称与链接 a 标签```pythonsoup.select('ul#m-pl-container li div a.msk') 歌单播放量 span 标签 1soup.select('div.bottom span.nb') 歌单创建人与创建人主页 1soup.select('ul#m-pl-container li p a') 然后我们通过遍历来输出这些标签中的信息，完整代码如下： 12345678910111213141516171819202122232425262728293031323334353637# 爬取网易云音乐的爬虫# -*- coding: utf-8 -*-from bs4 import BeautifulSoupimport urllib.requestimport urllib#获取网页def gethtml(url, headers=&#123;&#125;): req = urllib.request.Request(url, headers=headers) response = urllib.request.urlopen(req) content = response.read().decode('utf-8') response.close() return content#解析音乐列表网页def parsehtmlMusicList(html): soup = BeautifulSoup(html, 'lxml') list_pic = soup.select('ul#m-pl-container li div img') list_nameUrl = soup.select('ul#m-pl-container li div a.msk') list_num = soup.select('div.bottom span.nb') list_author = soup.select('ul#m-pl-container li p a') n = 0 length = len(list_pic) while n &lt; length: print('歌单图片：'+list_pic[n]['src']+'\\n\\n') print('歌单名称：'+list_nameUrl[n]['title']+'\\n\\n歌单地址：'+list_nameUrl[n]['href']+'\\n\\n') print('歌单播放量：'+list_num[n].text+'\\n\\n') print('歌单作者：'+list_author[n]['title']+'\\n\\n作者主页：'+list_author[n]['href']+'\\n\\n\\n') n += 1url = 'http://music.163.com/discover/playlist'url = gethtml(url, headers=&#123; 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)', 'Host': 'music.163.com'&#125;)parsehtmlMusicList(url) 最终效果如下： 欢迎交流。","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Python 爬虫","slug":"爬虫/Python-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Python-爬虫/"}],"tags":[{"name":"Python3","slug":"Python3","permalink":"http://WinterSmileSB101.online/tags/Python3/"},{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"Urllib2","slug":"Urllib2","permalink":"http://WinterSmileSB101.online/tags/Urllib2/"},{"name":"BeautifulSoup4","slug":"BeautifulSoup4","permalink":"http://WinterSmileSB101.online/tags/BeautifulSoup4/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://WinterSmileSB101.online/tags/网易云音乐/"}]},{"title":"Css 文字省略样式（单行/多行）","slug":"css-els","date":"2017-03-29T00:47:44.000Z","updated":"2017-03-29T01:03:16.658Z","comments":true,"path":"2017/03/29/css-els/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/29/css-els/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 效果图 上面的效果实现代码如下：123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; .inaline &#123; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; /*clip 修剪文本。*/ &#125; .intwoline &#123; display: -webkit-box !important; overflow: hidden; text-overflow: ellipsis; word-break: break-all; -webkit-box-orient: vertical; -webkit-line-clamp: 3; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=\"inaline\"&gt;元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。&lt;/p&gt; &lt;p style=\"width: 500px;border: 1px solid red;\" class=\"intwoline\"&gt;元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。元素可提供相关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 如果实现单行文本的溢出显示省略号同学们应该都知道用text-overflow:ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。实现方法：123overflow:hidden;text-overflow:ellipsis;white-space:nowrap; 效果如图： 但是这个属性只支持单行文本的溢出显示省略号，如果我们要实现多行文本溢出显示省略号呢。接下来重点说一说多行文本溢出显示省略号，如下。实现方法1:1234display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:3;overflow:hidden; 效果如下： 适用范围：因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；1234注：-webkit-line-clamp用来限制在一个块元素显示的文本的行数。为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：display:-webkit-box;必须结合的属性，将对象作为弹性伸缩盒子模型显示。-webkit-box-orient必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式。 实现方法2：123456789101112131415161718192021p&#123; position:relative; line-height:20px; max-height:40px; overflow:hidden;&#125;p::after&#123; content:\"...\"; position:absolute; bottom:0; right:0; padding-left:40px; background: -webkit-linear-gradient(left,transparent,#fff55%); background: -o-linear-gradient(right,transparent,#fff55%); background: -moz-linear-gradient(right,transparent,#fff55%); background: linear-gradient(toright,transparent,#fff55%);&#125; 效果如下： 适用范围：该方法适用范围广，但文字未超出行的情况下也会出现省略号,可结合js优化该方法。12345注：将height设置为line-height的整数倍，防止超出的文字露出。给p::after添加渐变背景可避免文字只显示一半。由于ie6-7不显示content内容，所以要添加标签兼容ie6-7（如：…）；兼容ie8需要将::after替换成:after。 文章点击进入详情：已知显示两行CSS：12345678.intwoline &#123; display: -webkit-box !important; overflow: hidden; text-overflow: ellipsis; word-break: break-all; -webkit-box-orient: vertical; -webkit-line-clamp: 2; &#125; 假设页面有3个:12345678&lt;div class=\"color_lightBlack intwoline flag\" style=\"border: 1px solid red;height: 40px;overflow: hidden;\"&gt; &lt;p class=\"font14\" style=\"font-size:14px;text-indent:28px;color:#111111;font-family:\"\"&gt; 1111掌众金融作为一家专注互联网消费金融的金融科技公司，掌众金融作为一家专注互联网消费金融的金融科技公司，掌众金融作为一家专注互联网消费金融的金融科技公司，掌众金融作为一家专注互联网消费金融的金融科技公司。 &lt;/p&gt; &lt;p class=\"font14\" style=\"font-size:14px;text-indent:28px;color:#111111;font-family:\"\"&gt; 2222掌众金融作为一家专注互联网消费金融的金融科技公司，掌众金融作为一家专注互联网消费金融的金融科技公司，掌众金融作为一家专注互联网消费金融的金融科技公司，掌众金融作为一家专注互联网消费金融的金融科技公司。 &lt;/p&gt; &lt;/div&gt; 添加 js1234567$(function() &#123; $(\".flag\").each(function(i) &#123; var str = ''; str = $(\".flag:eq(\" + i + \")\").text(); $(\".flag:eq(\" + i + \")\").empty().text(str); &#125;) &#125;); 为什么不用js 截取字符串，–》不知道屏幕宽度！！！！！！！！！！！","categories":[{"name":"WEB","slug":"WEB","permalink":"http://WinterSmileSB101.online/categories/WEB/"},{"name":"前端开发","slug":"WEB/前端开发","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/"},{"name":"CSS","slug":"WEB/前端开发/CSS","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://WinterSmileSB101.online/tags/CSS/"},{"name":"文字省略","slug":"文字省略","permalink":"http://WinterSmileSB101.online/tags/文字省略/"}]},{"title":"MUI 使用爬坑之路之 tab 多页面操作","slug":"mui-tab-pages","date":"2017-03-28T05:08:23.000Z","updated":"2017-03-29T01:04:49.048Z","comments":true,"path":"2017/03/28/mui-tab-pages/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/28/mui-tab-pages/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 最近想入坑前端开发，也是为了开发 App 更快更接地气。在各种前端框架的纠结中我还是决定先入坑 MUI ，开坑不易，欢迎交流。 首先贴上几个链接 MUI 官网H5 的相关 APIHbulider 官网 OK，下面直接进入正题我们今天来试试制作网易云 App 的 UI，界面如下： 那么就开始工作吧，首先下载 Hbulider，然后打开新建移动 App 选择 MUI 模板（不下载也可以，可以手动创建 MUI 项目，这里就不再赘述）。然后打开 index.html,在 body 标签中添加如下代码12345678910111213141516171819202122232425&lt;!-- 主界面不动、菜单移动 --&gt; &lt;!-- 侧滑导航根容器 --&gt; &lt;div class=\"mui-off-canvas-wrap mui-draggable mui-slide-in\"&gt; &lt;!-- 菜单容器 --&gt; &lt;aside class=\"mui-off-canvas-left\" id=\"offCanvasSide\"&gt; &lt;div class=\"mui-scroll-wrapper\"&gt; &lt;div class=\"mui-scroll\"&gt; &lt;!-- 菜单具体展示内容 --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/aside&gt; &lt;!-- 主页面容器 --&gt; &lt;div class=\"mui-inner-wrap\"&gt; &lt;!-- 主页面标题 --&gt; &lt;header class=\"mui-bar mui-bar-nav\" style=\"margin-top: 10px;background-color: #FF0000;\"&gt; &lt;a class=\"mui-icon mui-action-menu mui-icon-bars mui-pull-left\" href=\"#offCanvasSide\"&gt;&lt;/a&gt; &lt;div class=\" mui-segmented-control\" style=\"margin:-4px 100px 0px 100px;align-content: center; align-self: center; \"&gt; &lt;a class=\"mui-control-item mui-active\" id=\"mine\" style=\"background-color: #FF0000; color: #cococo;\"&gt;我的&lt;/a&gt; &lt;a class=\"mui-control-item\" id=\"discory\" style=\"background-color: #FF0000;\"&gt;发现&lt;/a&gt; &lt;a class=\"mui-control-item\" id=\"dynamic\" style=\"background-color: #FF0000;\"&gt;动态&lt;/a&gt; &lt;/div&gt; &lt;/header&gt; &lt;div class=\"mui-off-canvas-backdrop\"&gt;&lt;/div&gt; 其中我们的侧滑栏可以直接通过联想代码块快速实现触发语句 1moffcanvas 其实你不用打完就会出现可以选择的代码块，对应的代码块都有作用解释，这样可以很快的选择到需要的代码块。上述代码有几个注意的地方：1.我的 header 标签后的第一个 a 标签有下移 10px 的样式，这是因为我们要实现沉浸式（透明）状态栏，实现方法如下：1234567891011121314151617181920212223242526272829ios: 打开应用的manifest.json文件，切换到代码视图，在plus -&gt; distribute -&gt; apple 下添加UIReserveStatusbarOffset节点并设置值为false。 注意： 1. 真机运行不生效，需提交App云端打包后才生效； 2. 此功能仅在iOS7及以上系统有效。 android: 打开应用的manifest.json文件，切换到代码视图，在plus -&gt; distribute -&gt; google 下添加ImmersedStatusbar节点并设置值为true。 注意： 1. 真机运行不生效，需提交App云端打包后才生效； 2. 此功能仅在Android4.4及以上系统有效。配置系统状态栏样式iOS平台可支持对系统状态栏样式的配置，在应用manifest.json文件的plus-&gt;distribute-&gt;apple下添加UIStatusBarStyle进行控制，默认值为\"UIStatusBarStyleDefault\"。UIStatusBarStyleDefault 默认样式，iOS6及以下系统状态栏为黑底白字，iOS7及以上系统用于定义系统状态栏上文字颜色为黑字（适用于浅色背景）UIStatusBarStyleBlackOpaque 深色背景色样式，iOS6及以下系统状态栏为黑底白字，iOS7及以上系统用于定义系统状态栏上文字颜色为白色（适用于深色背景）UIStatusBarStyleBlackTranslucent iOS6及以下系统在启动界面为灰底白字，iOS7及以上系统与UIStatusBarStyleBlackOpaque效果一样设置系统状态栏背景颜色（iOS7及以上生效）iOS平台可支持对系统状态栏背景颜色的配置，在应用manifest.json文件的plus-&gt;distribute-&gt;apple下添加StatusBarBackground进行控制：值为字符串类型，格式为\"#RRGGBB\"格式，如红色为\"#FF0000\"；默认值为白色。App云端打包设置系统状态栏背景颜色操作方式双击应用的manifest.json文件，切换到“代码视图”，在apple节点下添加StatusBarBackground节点. 但是在设置了之后我们的顶部栏会有与状态栏重叠的部分，所以这里就要向下移动一定距离2.顶部 tab 标签的 style 样式（也就是代码中在 上一个问题的 a 标签之后的 div 标签）这里是为了让我们的样式与网易云音乐的顶部样式一致的做法，当然我这里还没有弄完，还存在边框的问题，但是本博客的重点不是这个，所以也就没太怎么弄了，其中添加的 ID 就是为了接下来的我们的动态加载子页面中需要用到的。接下来就是重点：在 MUI 中有一个创建子页面的方法1234567891011121314151617/*在mobile app开发过程中，经常遇到卡头卡尾的页面，此时若使用局部滚动，在android手机上会出现滚动不流畅的问题； mui的解决思路是：将需要滚动的区域通过单独的webview实现，完全使用原生滚动。具体做法则是：将目标页面分解为主页面和内容页面，主页面显示卡头卡尾区域，比如顶部导航、底部选项卡等；内容页面显示具体需要滚动的内容，然后在主页面中调用mui.init方法初始化内容页面。*/mui.init(&#123; subpages:[&#123; url:your-subpage-url,//子页面HTML地址，支持本地地址和网络地址 id:your-subpage-id,//子页面标志 styles:&#123; top:subpage-top-position,//子页面顶部位置 bottom:subpage-bottom-position,//子页面底部位置 width:subpage-width,//子页面宽度，默认为100% height:subpage-height,//子页面高度，默认为100% ...... &#125;, extras:&#123;&#125;//额外扩展参数 &#125;] &#125;); /*参数说明：styles表示窗口属性，参考5+规范中的WebviewStyle；特别注意，height和width两个属性,即使不设置，也默认按100%计算；因此若设置了top值为非\"0px\"的情况，建议同时设置bottom值，否则5+ runtime根据高度100%计算，可能会造成页面真实底部位置超出屏幕范围的情况；left、right同理。*/ 可以看到我们可以通过上述方法创建子页面实现分页，但是这只是一个页面，那么要怎么实现多页面的切换呢？这里就要引入 H5 webView相关的操作了，关于 H5 webview 的相关 API 可以看这里 H5 webview API，我们这里用到的是 getWebviewById,他会返回一个 WebviewObject窗口对象 我们就在这个对象上做文章。下面来书写 JS 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt; mui.plusReady(function()&#123; console.log(\"当前页面URL：\"+plus.webview.currentWebview().getURL()); //给标签为 mine 的元素（也就是我们的我的 tab ）添加 tap 事件，这里由于 click 的延迟太高，故用 tap 事件。 document.getElementById(\"mine\").addEventListener('tap',function()&#123; //获取到当前的 webview 根据标签也就是下面定义的子页面 id var cur = plus.webview.getWebviewById(\"contentHtml\"); //判断是否是此页面 if(cur.getURL()!=\"htmlFile/mine.html\") &#123; //不是就要切换页面为当前 tab 是指向的页面 console.log(\"显示我的\"); cur.loadURL(\"htmlFile/mine.html\") &#125; &#125;); document.getElementById(\"discory\").addEventListener('tap',function()&#123; var cur = plus.webview.getWebviewById(\"contentHtml\"); if(cur.getURL()!=\"htmlFile/discory.html\") &#123; console.log(\"显示我的\"); cur.loadURL(\"htmlFile/discory.html\") &#125; &#125;); document.getElementById(\"dynamic\").addEventListener('tap',function()&#123; var cur = plus.webview.getWebviewById(\"contentHtml\"); if(cur.getURL()!=\"htmlFile/dynamic.html\") &#123; console.log(\"显示我的\"); cur.loadURL(\"htmlFile/dynamic.html\") &#125; &#125;);&#125;);//MUI 的初始化，添加子页面（默认页面是 “我的” 界面，这里的子页面 id 就要被用于以后 tab 点击事件中获取 webview 的 id，特别）， mui.init(&#123; subpages:[ &#123; url:'htmlFile/mine.html', id:'contentHtml', styles:&#123; top:'55px' &#125; &#125; ]&#125;);&lt;/script&gt; 对应的要注意的地方以及解释上面代码里已经说的很清楚了，至于其他的 3 个页面，我是另外写好的，你们也要写出页面，url 中填写你们要跳转的页面的地址就好了（网络地址或者本地地址），这里我就不说其他页面怎么建立了运行如下，仔细看就能发现一个问题，我们列表的最下面一项没有显示出来，也就是说页面没有完全显示出来， 解决方法：在创建子页面的时候我们设置了top 的话就要也设置 bottom 否者会导致页面显示不完全！（仔细看看前面官方文档就会发现，这就是不认真看文档的锅），下面修改 jS 代码：123456789101112mui.init(&#123; subpages:[ &#123; url:'htmlFile/mine.html', id:'contentHtml', styles:&#123; top:'55px', bottom:'0px' &#125; &#125; ]&#125;); 然后保存，最好重新编译一次（这种更新不知道为什么我的如果不重新编译就不会出现正确的效果），停止调试，再开始调试，结果如下( 多 tab 页面的实时切换就完成了)： 已知问题，侧边栏会被子页面覆盖，目前想法是通过 zindex 调整，但是试过无用。","categories":[{"name":"WEB","slug":"WEB","permalink":"http://WinterSmileSB101.online/categories/WEB/"},{"name":"前端开发","slug":"WEB/前端开发","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/"},{"name":"Hbuilder","slug":"WEB/前端开发/Hbuilder","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/Hbuilder/"},{"name":"MUI","slug":"WEB/前端开发/Hbuilder/MUI","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/Hbuilder/MUI/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://WinterSmileSB101.online/tags/前端开发/"},{"name":"混合 APP","slug":"混合-APP","permalink":"http://WinterSmileSB101.online/tags/混合-APP/"},{"name":"MUI","slug":"MUI","permalink":"http://WinterSmileSB101.online/tags/MUI/"},{"name":"Hbuilder","slug":"Hbuilder","permalink":"http://WinterSmileSB101.online/tags/Hbuilder/"},{"name":"多页面操作","slug":"多页面操作","permalink":"http://WinterSmileSB101.online/tags/多页面操作/"},{"name":"tab 导航","slug":"tab-导航","permalink":"http://WinterSmileSB101.online/tags/tab-导航/"}]},{"title":"Ionic2 的使用之坑","slug":"IOnic-first","date":"2017-03-27T11:21:20.000Z","updated":"2017-03-27T14:20:20.044Z","comments":true,"path":"2017/03/27/IOnic-first/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/27/IOnic-first/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 在这里引用学习 IOnic 的地方，菜鸟驿站,不仅仅有 IOnic 还有很多其他的比如 Node.js、vue、React、Ajax 等都可以在这里学习到，简直就是 WEB 天堂啊 今天是为了记录几个使用 IOnic，准确的说应该是安装 cordova 的时候的一个小坑，安装语句Window 和 Linux 上打开命令行工具执行以下命令：1$ npm install -g cordova ionic Mac 系统上使用以下命令：1sudo npm install -g cordova ionic 但是在你安装完成之后使用 IOnic 的时候，他就会提示你如下问题： 意思是你安装的 cordova 不是高版本的，需要安装高版本的，但是我们安装的时候一起安装了的啊，莫非他安装的不是最新版？不不，安装的是最新版，但是不是稳定版的，所以这里会提示这个错误，解决方式，输入如下代码：1$ npm install -g cordova@6.0.0 问题解决，最终如下： 问题2：：使用1$ ionic start myApp tabs 或者1ionic start app --v2 会出现如下错误123Error with start undefinedError Initializing app: There was an error with the spawned command: npminstallThere was an error with the spawned command: npminstall 解决办法，这个因该是由于那堵那啥的问题1.VPN2.1.npm install -g cnpm2.ionic start myApp –v2 –skip-npm (表示跳过 npm install package)3.进入 myApp 执行 cnpm install –save3.用cnpm 代替npm 成为全局变量1.npm install -g cnpm –registry=https://registry.npm.taobao.org（淘宝镜像下载cnpm）2.npm config set registry=https://registry.npm.taobao.org(修改npm配置换源)3.输入 npm config list 可以查看..npmrc 是否修改正确或者nano ~/.npmrc //打开配置文件registry =https://registry.npm.taobao.org //写入配置文件3.然后正常执行 即可（注意权限问题） 以上答案来自互联网，作者：李强链接：https://www.zhihu.com/question/51241285/answer/148752689来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"WEB","slug":"WEB","permalink":"http://WinterSmileSB101.online/categories/WEB/"},{"name":"前端开发","slug":"WEB/前端开发","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/"},{"name":"IOnic AngularJS","slug":"WEB/前端开发/IOnic-AngularJS","permalink":"http://WinterSmileSB101.online/categories/WEB/前端开发/IOnic-AngularJS/"}],"tags":[{"name":"IOnic","slug":"IOnic","permalink":"http://WinterSmileSB101.online/tags/IOnic/"},{"name":"前端开发","slug":"前端开发","permalink":"http://WinterSmileSB101.online/tags/前端开发/"},{"name":"混合 APP","slug":"混合-APP","permalink":"http://WinterSmileSB101.online/tags/混合-APP/"},{"name":"AngularJS","slug":"AngularJS","permalink":"http://WinterSmileSB101.online/tags/AngularJS/"},{"name":"cordova","slug":"cordova","permalink":"http://WinterSmileSB101.online/tags/cordova/"}]},{"title":"一起学爬虫 Node.js 爬虫篇（三）使用 PhantomJS 爬取动态页面","slug":"use-phantomjs-dynamic","date":"2017-03-24T01:29:38.000Z","updated":"2017-03-24T04:57:00.943Z","comments":true,"path":"2017/03/24/use-phantomjs-dynamic/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/24/use-phantomjs-dynamic/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 今天我们来学习如何使用 PhantomJS 来抓取动态网页，至于 PhantomJS 是啥啊什么的，看这里 我们这里就不再讨论 PhantomJS 的入门基础了。下面正题今天我们来抓取网易新闻 http://news.163.com/1.我们先准备，打开浏览器，输入网址 http://news.163.com/，然后分析我们来抓如下图所示的部分 2.编写代码获取网页，需要使用到 web page 模块 API 如下创建 page1var page=require('webpage').create(); page.content String：获取或设置当前页面的html。 page.plainText String：这是一个只读属性，获取页面去除html标记的文本（考虑$.text()）。 看了上面的 API 我们这里就先获取网页返回 也就是使用12345678910var page = require('webpage').create();phantom.outputEncoding=\"gbk\";//指定编码方式page.open(\"http://news.163.com/\", function(status) &#123;if ( status === \"success\" ) &#123;console.log(page.content);//输出网页&#125; else &#123;console.log(\"网页加载失败\");&#125;phantom.exit(0);//退出系统&#125;); 输出如下： 可以看到网页全文已经输出完毕了（现在的延时都比较严重了，有个几秒延时了，当然我们这里重点不在这个，还没学会走就想跑是不好的），我们就来分析怎么才能获取到我们需要的内容，这里我们使用 DOM 来解析，也可以使用 cheerio 来解析，看看下图 分析可以看出，我们现在解析的 DOM 语句可以是这样1var pattern = 'ul li.newsdata_item div.ndi_main div a'; 现在我们就要来使用 DOM 语句了，这里再引入一个 web page 的 API page.evaluate(fn, [param]) 对于page打开的页面，往往需要与其进行一些交互。 page.evaluate()提供了在page打开页面的上下文（下文直接用page上下文指代）执行function的功能（类比Chrome开发者工具的控制台）。如下例：1234567page.open('http://m.bing.com',function(status)&#123; vartitle=page.evaluate(function(s)&#123; returndocument.querySelector(s).innerText; &#125;,'title'); console.log(title); phantom.exit();&#125;); 在这个例子中， page.evaluate()接受两个参数，第一个是必需的，表示需要在page上下文运行的函数 fn；第二个是可选的，表示需要传给 fn的参数 param。 fn允许有一个返回值return，并且此返回值最终作为 page.evaluate()的返回值。这边对于刚刚命名的 param和return有一些额外的说明和注意事项。对于整个phantom进程而言， page.evaluate()是跑在一个沙盒中， fn无法访问一切phantom域中的变量；同样 page.evaluate()方法外部也不应该尝试访问page上下文中的内容。那么如果两个作用域需要交换一些数据，只能依靠 param和 return。不过限制很大， param和 return必须为能够转化为JSON字符串，换言之，只能是基本数据类型或者简单对象，像DOM 节点、$对象、function、闭包等就无能为力了。这个方法是同步的，如果执行的内容对后续操作不具备前置性，可以尝试异步方法以提高性能：page.evaluateAsync()。看懂了 API 我们接着干活，修改成如下123456789101112131415161718192021var page = require('webpage').create();phantom.outputEncoding=\"gbk\";//指定编码方式page.open(\"http://news.163.com/\", function(status) &#123;if ( status === \"success\" ) &#123;console.log(page.evaluate(function()&#123; var d = ''; //匹配 DOM 查询语句 var pattern = 'ul li.newsdata_item div.ndi_main div a img'; var c = document.querySelectorAll(pattern);//查询 var l = c.length; //遍历输出 for(var i =0;i&lt;l;i++)&#123; d=d+c[i].alt+'\\n'//获取 alt 值 &#125; return d;&#125;));//输出网页标题&#125; else &#123;console.log(\"网页加载失败\");&#125;phantom.exit(0);//退出系统&#125;); 运行结果如下图，大功告成，这里说明一下，我们在的到具体的标签之后，如果我们想获取比如 a 标签的 alt 属性的值 我们可以直接写 获取到的单个值.alt 就像上面的一样如果是获取 title 属性那么直接.title 就可以了，如果是获取标签内的文本，那么久通过.innerText 获取 怎么样是不是很简单呢 我们再修改下代码，让他输出我们需求的其他信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var page = require('webpage').create();phantom.outputEncoding=\"gbk\";//指定编码方式page.open(\"http://news.163.com/\", function(status) &#123;if ( status === \"success\" ) &#123;var res = page.evaluate(function()&#123; var d = ''; //匹配 DOM 查询语句 a 标签 var patternA = 'ul li.newsdata_item div.ndi_main div a img';//匹配 DOM 查询语句 新闻内容 div var patternNews = 'ul li.newsdata_item div.ndi_main div div div.news_title h3 a'; //匹配 DOM 查询语句 新闻标签 div var patternNewsClass = 'ul li.newsdata_item div.ndi_main div div div.news_tag strong a';var patternNewsKeyWords = 'ul li.newsdata_item div.ndi_main div div div.news_tag div a'; var c = document.querySelectorAll(patternA);//查询 var l = c.length; //遍历输出 for(var i =0;i&lt;l;i++)&#123; d = d + \"标题：\"+c[i].alt+'\\n'; d = d + \"图片链接: \"+c[i].src+'\\n'; d = d + '\\n'; &#125; c = document.querySelectorAll(patternNews);//查询 l = c.length; //遍历输出 for(var i =0;i&lt;l;i++)&#123; d +=\"新闻链接：\"+c[i].href+'\\n'; d = d + '\\n'; &#125; c = document.querySelectorAll(patternNewsClass);//查询 l = c.length; //遍历输出 for(var i =0;i&lt;l;i++)&#123; d +=\"新闻类别：\"+c[i].innerText+'\\n'; d = d + '\\n'; &#125; c = document.querySelectorAll(patternNewsKeyWords);//查询 l = c.length; //遍历输出 for(var i =0;i&lt;l;i++)&#123; d +=\"新闻关键词：\"+c[i].innerText+'\\n'; d +=\"关键词链接：\"+c[i].href+'\\n'; d = d + '\\n'; &#125; d = d + '\\n'; return d;&#125;);//输出网页标题console.log(res);&#125; else &#123;console.log(\"网页加载失败\");&#125;phantom.exit(0);//退出系统&#125;); 最后页面如下，强迫症的同学可以修改下代码让他显示更合理,那么就到这里，可以看到 使用 PhantomJS 抓取动态页面可谓是非常方便，不过就是加载速度上可能会慢一些。 补充一个，如果你想把结果保存为文件，又不想写代码 那么就用无所不能的 cmd 吧，通过 &gt; 路径+文档名称 如我们这里 test.txt 在 E 盘根文件夹下，命令如下1phantomjs hello.js &gt;E:\\test.txt 运行，可以看到已经存到文件里了","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Node.js 爬虫","slug":"爬虫/Node-js-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Node-js-爬虫/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"PhantomJS","slug":"PhantomJS","permalink":"http://WinterSmileSB101.online/tags/PhantomJS/"},{"name":"Node.js","slug":"Node-js","permalink":"http://WinterSmileSB101.online/tags/Node-js/"},{"name":"动态网页","slug":"动态网页","permalink":"http://WinterSmileSB101.online/tags/动态网页/"}]},{"title":"Node.js 动态网页爬取 PhantomJS 使用入门","slug":"get-phantomJS-start","date":"2017-03-24T00:43:25.000Z","updated":"2017-03-24T02:22:14.977Z","comments":true,"path":"2017/03/24/get-phantomJS-start/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/24/get-phantomJS-start/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 既然是入门，那我们就从人类的起源。。PhantomJS 来说起吧。1、PhantomJS是什么？PhantomJS是一个基于webkit的javascript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。它不仅是个隐形的浏览器，提供了诸如CSS选择器、支持Web标准、DOM操作、JSON、html5、Canvas、SVG等，同时也提供了处理文件I/O的操作，从而使你可以向操作系统读写文件等。PhantomJS的用处可谓非常广泛，诸如网络监测、网页截屏、无需浏览器的 Web 测试、页面访问自动化等。也就是说我们可以使用 PhantomJS 来模拟浏览器，而且是个无页面浏览器，想像一下我们的网页加载都是通过什么，浏览器，如果我们直接模拟浏览器加载，那么网页里面的什么 js 动态加载，ajax 动态的加载的东西啊全部不是问题，因为我们模拟的是浏览器，不过貌似效率上面略有欠缺，尤其是加载大型页面，对于此种我们可以选择放弃某些东西的加载，比如图片 css 之类，毕竟我们只是模拟请求不是为了界面，这样应该会提升一些速度。下面给出几个地址1.PhatomJS 官网2.PhantomJS API2、PhantomJS下载与安装官方下载地址：http://phantomjs.org/download.html。目前官方支持三种操作系统，包括windows\\Mac OS\\linux这三大主流的环境。你可以根据你的运行环境选择要下载。载完成后解压文件，建议为方便使用，单独放在一个文件夹里，其中路径最好不要有中文，以免出现什么奇怪的东西。到这里，你已经成功下载安装好PhantomJS了。那么，打开刚刚解压的陌路 phantomjs\\bin 文件夹，双击运行phantomjs.exe，出现如下界面，那么你就可以运行JS代码了。不过这样还是比较麻烦，那么我们就来配置系统环境变量 右击我的电脑–&gt;点击管理–&gt;高级系统设置–&gt;环境变量,然后找到系统的 Path WIn10的话直接点击新建然后贴上你的 PhatomJS 解压路径，注意路径要一直到 bin 文件夹，如果是 win7 就直接在现有的变量后面添加路径，注意开头要加 ; 符号。为了测试是否环境变量配置正确，你可以 cmd 输入 phantomjs ，出现如下界面就成功了 下面我们就可以开始上菜了，HelloWorld。在你的工程目录下新建一个 hello.js 文件，输入以下代码，这次我们还是看看网易新闻 http://news.163.com/12345678910var page = require('webpage').create();phantom.outputEncoding=\"gbk\";//指定编码方式page.open(\"http://news.163.com/\", function(status) &#123;if ( status === \"success\" ) &#123;console.log(page.title);//输出网页标题&#125; else &#123;console.log(\"网页加载失败\");&#125;phantom.exit(0);//退出系统&#125;); 然后 cmd 进入工程目录，也就是 hello.js 的目录，如下：输入 phantomjs hello.js 运行 ##### 好了我们已经跑的第一个 ＰｈａｎｔｏｍＪＳ程序了，其他的就是一些属性的介绍，传送门","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Node.js 爬虫","slug":"爬虫/Node-js-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Node-js-爬虫/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"PhantomJS","slug":"PhantomJS","permalink":"http://WinterSmileSB101.online/tags/PhantomJS/"},{"name":"Node.js","slug":"Node-js","permalink":"http://WinterSmileSB101.online/tags/Node-js/"},{"name":"动态网页","slug":"动态网页","permalink":"http://WinterSmileSB101.online/tags/动态网页/"}]},{"title":"一起学爬虫 Node.js 爬虫篇（二）","slug":"node-spider-scend","date":"2017-03-23T09:17:58.000Z","updated":"2017-03-24T02:22:12.713Z","comments":true,"path":"2017/03/23/node-spider-scend/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/23/node-spider-scend/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 上一篇中我们对百度首页进行了标题的爬取，本来打算这次直接对上次没有爬取到的推荐新闻进行爬取，谁知道网页加载出来没网页了，这是天要亡我大宋啊。。那我们直接去抓取网易新闻，进入网易新闻,我们要抓取的位置如下: 首先来上爬取网站的测试1.先按下 F12 点击 Network,就会弹出网络请求界面,从这个界面我们看是否有 Ajax 请求,如果有那么就试着伪造请求来获取数据（这样获取的数据很直接，一般都是 json 格式很清晰），伪造不了就使用 pathomjs 来进行网络请求实现抓取。 这里可以看到我们的网络请求获取的数据并不为空，那么我们直接对网页的网络加载进行分析，红框的位置就是数据的请求 直接拖拽打开请求网址(先点击 header 然后就可以看到网址) 打开页面如下 ,是不是很激动，这不就是数据嘛，还是 json 的，简直比获取网页源码还还解析，直接上代码12345678var request = require(\"request\");var cheerio = require(\"cheerio\");request('http://news.163.com/',function(err,result)&#123; if(err)&#123; console.log(\"错误：\"+err); &#125; console.log(result.body);&#125;) 然后运行测试，可以看到这里我们获取的页面产生了乱码 如何解决乱码？有两种方式1.这里就需要使用到另外的库 superagent 以及 superagent-charset安装方式12npm install superagent --savenpm install superagent-charset 然后改写代码如下1234567const install = require('superagent-charset');const request = require('superagent');superagent = install(request);superagent.get('http://news.163.com/').charset('gb2312').end(function(err,res) &#123; if(err) console.log(err); console.log(res.text);&#125;); 然后运行，如下成功转码 2.就直接对 request 配合 iconv-lite1npm install iconv-lite 然后修改代码，如下1234567891011var request = require('request');var cheerio = require('cheerio');var iconv = require('iconv-lite');request.get(&#123; url : 'http://temp.163.com/special/00804KVA/cm_yaowen.js?callback=data_callback', encoding : null //让body 直接是buffer&#125;, function (err, response, body) &#123; //返回的body 直接就是buffer 了... var buf = iconv.decode(body, 'gb2312'); console.log(buf);&#125;); 然后运行，如下成功转码 终于可以开始进入正题了，我怕拉闸来解析网页，我们来分析分析要取到合适位置需要做些什么,这是个 json 字符串，结构如下所示12345678910data([ &#123; title:'Node.js爬虫爬坑之路', date:'2017-03', athour:'wintersmilesb101', blog:'wintersmilesb101.online' &#125;]) 所以我们要做如下工作，先把外面的 data() 去掉，然后通过 JSON.parse(String) 把 json 字符串转换成 json 对象，然后我们就可以对变量直接进行操作了，是不是很方便代码如下，运行123456789101112131415161718var request = require('request');var iconv = require('iconv-lite');request.get(&#123; url : 'http://temp.163.com/special/00804KVA/cm_yaowen.js?callback=data_callback', encoding : null //让body 直接是buffer&#125;, function (err, response, body) &#123; //返回的body 直接就是buffer 了... var buf = iconv.decode(body, 'gb2312'); //去掉头部的 data_callback( var str = buf.replace('data_callback(',''); //去掉尾部的 ) str = str.replace(')',''); //遍历输出数据，输出标题测试 var str1 = JSON.parse(str); str1.forEach(function(s)&#123; console.log(s.title); &#125;);&#125;); 成功输出了！接着我们来补全我们的输出 修改后代码如下12345678910111213141516171819202122232425262728var request = require('request');var iconv = require('iconv-lite');request.get(&#123; url : 'http://temp.163.com/special/00804KVA/cm_yaowen.js?callback=data_callback', encoding : null //让body 直接是buffer&#125;, function (err, response, body) &#123; //返回的body 直接就是buffer 了... var buf = iconv.decode(body, 'gb2312'); //去掉头部的 data_callback( var str = buf.replace('data_callback(',''); //去掉尾部的 ) str = str.replace(')',''); var str1 = JSON.parse(str); str1.forEach(function(s)&#123; console.log('文章标题：'+s.title); console.log('摘要：'s.digest); console.log('文章链接：'+s.docurl); console.log('内容链接：'+s.commenturl); console.log('tienum：'+s.tienum); console.log('tlastid：'+s.tlastid); console.log('tlink：'+s.tlink); console.log('标签：'+s.label); console.log('时间：'+s.time); console.log('新闻类别：'+s.newstype); console.log('频道名称：'+s.channelname); console.log('图片链接：'+s.imgurl); &#125;);&#125;); 运行，大功告成，下次我们学习通过 pathomjs 来获取动态网页内容再贴上几个地址，试试自己练习抓抓，自己也可以找一些其他网站练习，谢谢收看！1.http://news.163.com/（网易新闻主页，可以练习分析网页的加载）2.http://temp.163.com/special/00804KVA/cm_yaowen.js?callback=data_callback （提取出来的请求，可以练习 Json 的处理以及中文网页转码）3.http://news.163.com/special/yaowen_channel_api/?callback=channel_callback&amp;date=0120（就是前面那个再加上了时间戳，也用来练习 Json 处理以及中文网页转码）","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Node.js 爬虫","slug":"爬虫/Node-js-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Node-js-爬虫/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"Node.js","slug":"Node-js","permalink":"http://WinterSmileSB101.online/tags/Node-js/"},{"name":"动态网页","slug":"动态网页","permalink":"http://WinterSmileSB101.online/tags/动态网页/"},{"name":"Spider","slug":"Spider","permalink":"http://WinterSmileSB101.online/tags/Spider/"},{"name":"Json 字符串","slug":"Json-字符串","permalink":"http://WinterSmileSB101.online/tags/Json-字符串/"},{"name":"网易新闻","slug":"网易新闻","permalink":"http://WinterSmileSB101.online/tags/网易新闻/"}]},{"title":"一起学爬虫 Node.js 爬虫篇（一）","slug":"node-spider-first","date":"2017-03-23T06:16:38.000Z","updated":"2017-03-24T02:22:55.441Z","comments":true,"path":"2017/03/23/node-spider-first/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/23/node-spider-first/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 一看到爬虫或者一百度爬虫，那是铺天盖地的全是 Python 爬虫啊，不得不说爬虫的框架与资料，Python 基本是最多的了，不过物极必反，Python 的爬虫有几点问题：1.Python 对 DOM 支持貌似不是很好，网页的 DOM 处理不太好2.Python 对网页编码的处理。3.最重要的就是 Python 需要多线程。 以上问题我们现在即将使用的 Node.js 全部是优势！同样，Node.js 也有劣势，Node.js 是单线异步，这样很容易导致爬取请求发起顺序和结果返回顺序不一致，因此我们需要添加上请求序列号，处理完的再重新排序来实现结果与请求一致。还有，Node.js 毕竟是前端，数据的处理相较而言要差的多，但是作为网站数据爬取绝对够了。废话不多说，下面进入 Node.js 爬虫,Node.js 爬虫步骤1.创建工程目录这个随便你建立在什么地方，不过最好路径不要有中文，谁知道会不会出什么岔子。比如我们的工程路径为： E:\\adt-bundle-windows-x86_64-20131030\\Nodejs\\nests_Dataget2.cmd 进入工程目录，初始化工程,命令依次如下123E:cd E:\\adt-bundle-windows-x86_64-20131030\\Nodejs\\nests_Datagetnpm init npm init 是在当前目录创建模块（也就是生成 package.json）其文件属性说明如下 name - 包名。 version - 包的版本号。 description - 包的描述。 homepage - 包的官网 url 。 author - 包的作者姓名。 contributors - 包的其他贡献者姓名。 dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。 repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。也就是你 Git 的仓库地址 main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(“express”)。 keywords - 关键字输入了 npm init 之后会依次出现下面的询问 1234567891011121314151617181920212223242526272829$ npm initThis utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults.See `npm help json` for definitive documentation on these fieldsand exactly what they do.Use `npm install &lt;pkg&gt; --save` afterwards to install a package andsave it as a dependency in the package.json file.Press ^C at any time to quit.name: (node_modules) runoob # 模块名version: (1.0.0) #模块版本description: Node.js 测试模块(www.runoob.com) # 描述entry point: (index.js)test command: make testgit repository: https://github.com/runoob/runoob.git # Github 地址keywords: #关键字author: #作者license: (ISC) #许可类型About to write to ……/node_modules/package.json: # 生成地址&#123; \"name\": \"runoob\", \"version\": \"1.0.0\", \"description\": \"Node.js 测试模块(www.runoob.com)\", ……&#125;Is this ok? (yes) yes 上面的信息你可以根据自己的情况填写,填写有错误也不要紧，我们可以通过 package.json 随时修改。3.安装 request 和 cheerio 依赖 request，跟python里request功能一样。它的功能就是建立起对目标网页的链接，并返回相应的数据。是我们做爬虫的重要一步，没有数据我们去哪里爬？ cheerio的功能是用来操作 dom 元素的，他可以把 request 返回来的数据转换成可供 dom 操作的数据，更重要的 cheerio 的 api 跟 jquery 一样，用$来选取对应的dom结点，这样就可以想取啥就取啥，感谢强大的 DOM安装命令如下12npm install request --savenpm install cheerio 界面如下 4.接下来我们终于可以开始操作我们的 js 代码了新建一个 js 文件，如果是主入口文件名称应该注意和 package.json 中 entry point 一致。这里我们新建一个 名为 server.js 的文件建立依赖引用，代码如下12var request = require(\"request\");var cheerio = require(\"cheerio\"); 接下来我们就来爬爬百度首页链接为：https://www.baidu.com/1234567request('https://www.baidu.com/',function(err,result)&#123; if(err)&#123; console.log(\"错误：\"+err); return; &#125; console.log(result.body);&#125;) 在 cmd 中输入 node server.js ，回车，代码没有打错就会出现如下界面 可以看到我们已经获取到了网页的数据，漫漫长路我们已经走出了重要开头一步，只要能拿到完整的 Html 网页源码我们就好办了。现在就是数据处理，前面我们不是还有个库没有用到吗？ 没错就是 cheerio 库的使用现在我们来修改上面的代码，把成功获取到的网页交给 cheerio 处理,至于数据要怎么来通过 DOM 提取，我们这里通过 UC浏览器 访问 https://www.baidu.com/ 按下 F12 进入开发者模式依次对比看看我们要抓取的信息的位置，如这里我们要抓出百度的 title 接下来就是编写抓取的 DOM 语句，不知道怎么使用的这里有 DOM 文档 ，以及 JQuery 文档，我们这里要获取到标题的 DOM 就是 $(‘title’).text(),于是代码改成如下：1234//把 html 装载到 cheerio 中 var $ = cheerio.load(result.body); //通过 DOM 抓取网页数据 console.log($('title').text()); 效果：","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/"},{"name":"Node.js 爬虫","slug":"爬虫/Node-js-爬虫","permalink":"http://WinterSmileSB101.online/categories/爬虫/Node-js-爬虫/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"Node.js","slug":"Node-js","permalink":"http://WinterSmileSB101.online/tags/Node-js/"},{"name":"Spider","slug":"Spider","permalink":"http://WinterSmileSB101.online/tags/Spider/"},{"name":"静态网页","slug":"静态网页","permalink":"http://WinterSmileSB101.online/tags/静态网页/"}]},{"title":"图片资源从云存储器保存以及获取","slug":"图片资源从云存储器保存以及获取","date":"2017-03-22T13:16:01.000Z","updated":"2017-03-22T13:36:34.936Z","comments":true,"path":"2017/03/22/图片资源从云存储器保存以及获取/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/图片资源从云存储器保存以及获取/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 独立博客创建好了，最近又了解到七牛云储存,有免费 10 G 的存储空间，于是心中又起了坏水，为什么不把博客上的图片资源（图片资源是真的浪费空间）保存到七牛云储存上，然后通过外链引用图片资源，这么大的空间用来保存图片，够我们挥霍一段时间了。如果你充值的话，是可以直接绑定域名的，那样更美滋滋，金额也不多就需要账户余额大于 10 元不充值也可以，毕竟免费的 10G 不是盖的下面介绍怎么通过 极简图床 与我们的七牛云空间联系起来并且上传图片1.注册七牛云并登陆，点击下方的按钮添加对象存储 2.根据提示填写空间名称，存储区域，访问控制请选择公开访问 3.创建成功后进入该空间，获取该空间的测试域名，复制后备用 4.点击“个人面板—密钥管理”，获取 AK 和 SK，复制后备用 5.打开极简图床，点击右上角设置按钮，将上面获得的“空间名称”、“AK”、“SK”，“域名”依次填写到下方的输入框中，点击保存。返回首页，再上传的图片就会默认上传至您的七牛云空间了。 另外，极简图床也可以不使用外部云储存，不过限制比较厉害使用公共空间时，如果您未注册登录，每天最多上传 10 张图片，登录后每天可上传 30 张图片，自定义七牛空间后将没有任何限制。提供个小技巧，你可以在比如 CSDN 博客、简书、博客园等博客发布博客，然后再在私人博客发布，其中图片资源就使用那些博客的图片外链，这样也可以减少空间的消耗","categories":[{"name":"博客","slug":"博客","permalink":"http://WinterSmileSB101.online/categories/博客/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/tags/Hexo/"},{"name":"图片资源","slug":"图片资源","permalink":"http://WinterSmileSB101.online/tags/图片资源/"},{"name":"云存储器","slug":"云存储器","permalink":"http://WinterSmileSB101.online/tags/云存储器/"},{"name":"图床","slug":"图床","permalink":"http://WinterSmileSB101.online/tags/图床/"}]},{"title":"用 AndroidSDK 中的 Face Detector 实现人脸识别","slug":"用AndroidSDK中的FaceDetector实现人脸识别","date":"2017-03-22T12:18:06.000Z","updated":"2017-03-22T12:32:25.860Z","comments":true,"path":"2017/03/22/用AndroidSDK中的FaceDetector实现人脸识别/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/用AndroidSDK中的FaceDetector实现人脸识别/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 很多手机图片管理应用都开始集成人脸识别功能。一提到人脸识别，模式识别，滤波，BlahBlah 一堆复杂的技术名字戳入脑海中，立刻觉得这玩意儿没法碰，太玄乎了。其实Android SDK从1.0版本中（API level 1）就已经集成了简单的人脸识别功能，通过调用FaceDetector 我们可以在Android平台上实现Bitmap多人脸识别（一张图中有多个人脸出现的话）。周五啦，我就简简单单写写，希望感兴趣的同学对这个深藏在Android SDK中的功能有所了解。流程是这样的：1. 读取一张图片至Bitmap （从Resource中，或是从手机相册中选取）2. 使用FaceDetector API分析Bitmap，将探测到的人脸数据以FaceDetector.Face存储在一个Face list中；3.将人脸框显示在图片上。Step 1: 读取图片从Drawable中读取图片资源1Bitmap sampleBmp=BitmapFactory.decodeResource(getResources(), R.drawable.sample1); 或者直接从手机的图片库读取（Album/Gallery）12345678910111213141516171819202122232425262728private void readPictureFromAlbum() &#123; Intent intent = new Intent(); intent.setType(\"image/*\"); intent.setAction(Intent.ACTION_GET_CONTENT); startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), ALBUM_REQUEST_CODE); &#125; @Override protected void onActivityResult(int requestCode,int resultCode,Intent data)&#123; super.onActivityResult(requestCode, resultCode, data); if (requestCode == ALBUM_REQUEST_CODE &amp;&amp; resultCode == RESULT_OK &amp;&amp; null != data) &#123; Uri selectedImage = data.getData(); String[] filePathColumn = &#123; MediaStore.Images.Media.DATA &#125;; Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null); cursor.moveToFirst(); int columnIndex = cursor.getColumnIndex(filePathColumn[0]); String picturePath = cursor.getString(columnIndex); cursor.close(); Bitmap galleryBmp=BitmapFactory.decodeFile(picturePath); //placeholderFragment.detectFaces(galleryBmp); &#125; &#125; 当然，也可以直接从摄像头读取（Camera Capture）。但我读摄像头返回图片的代码在模拟器上运行正常，而在三星的手机上Bug多多，后来看了下确实不少人遇到读取三星手机摄像头报错的问题。所以这段代码我就先不贴了。好了，我们拿到了Bitmap，识别起来！Step 2: 通过FaceDetector API进行人脸识别FaceDetecor只能读取RGB 565格式的Bitmap，所以在开始识别前，我们需要将上面得到的Bitmap进行一次格式转换。1Bitmap tmpBmp = inputImage.copy(Bitmap.Config.RGB_565, true); 图片格式没问题了，我们来创建一个FaceDetector的实例。FaceDetector是能从一张图中找出多个人脸的，可以通过设置MAX_FACES来控制搜索人脸的个数（我的程序里把MAX_FACES设成了1，只找出一个可信度最高的人脸）。123FaceDetector faceDet = new FaceDetector(tmpBmp.getWidth(), tmpBmp.getHeight(), MAX_FACES);FaceDetector.Face[] faceList = new FaceDetector.Face[MAX_FACES];faceDet.findFaces(tmpBmp, faceList); 通过调用FaceDetector 的findFaces方法，我们可以找到tmpBmp中的人脸数据，并存储在FaceDetector.Face 数组里（facelist）。其实通过查看FaceDetector API文档我们发现，它查找人脸的原理是：找眼睛。它返回的人脸数据face，通过调用public float eyesDistance ()，public void getMidPoint (PointF point)，我们可以得到探测到的两眼间距，以及两眼中心点位置（MidPoint）。public float confidence () 可以返回该人脸数据的可信度(0~1)，这个值越大，该人脸数据的准确度也就越高。通过读取保存在Face中的人脸数据，我们可以得到一个以两眼间距为边长，中心在两眼中点的一个正方形。12345678910111213141516171819for (int i=0; i &lt; faceList.length; i++) &#123; FaceDetector.Face face = faceList[i]; Log.d(\"FaceDet\", \"Face [\"+face+\"]\"); if (face != null) &#123; Log.d(\"FaceDet\", \"Face [\"+i+\"] - Confidence [\"+face.confidence()+\"]\"); PointF pf = new PointF(); //getMidPoint(PointF point); //Sets the position of the mid-point between the eyes. face.getMidPoint(pf); Log.d(\"FaceDet\", \"\\t Eyes distance [\"+face.eyesDistance()+\"] - Face midpoint [\"+pf.x+\"&amp;\"+pf.y+\"]\"); RectF r = new RectF(); r.left = pf.x - face.eyesDistance() / 2; r.right = pf.x + face.eyesDistance() / 2; r.top = pf.y - face.eyesDistance() / 2; r.bottom = pf.y + face.eyesDistance() / 2; faceRects[i] = r; detectedFaces++; &#125; &#125; 有了这组RectF，把它显示在图片上，我们就大功告成了。Step3:对原图进行缩放，并在图上显示人脸框。自然，这里我们需要使用一个自定义的View。我把它命名为FaceView，每当FaceView人脸检测完成，如果检测到人脸，则invalidate一下（这样才能调用View 的 onDraw方法），然后在onDraw里，将人脸框显示出来。这里涉及到自定义View，以及图片，人脸框的按比例缩放。这里贴一下大概的代码，示例代码你可以在文末的链接里下载。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); Paint imgPaint = new Paint(); if(inputImage!=null) &#123; int imgWidth=inputImage.getWidth(); int imgHeight=inputImage.getHeight(); Rect src = new Rect();// 图片 src.top=0; src.left=0; src.right=src.left+imgWidth; src.bottom=src.top+imgHeight; Rect dst = new Rect();// 屏幕 int viewWidth=this.getWidth(); int width=0; int height=0; if(inputImage.getWidth()&gt;viewWidth) &#123; width=viewWidth; height=(viewWidth*imgHeight)/imgWidth; &#125; else &#123; width=imgWidth; height=imgHeight; &#125; dst.top=0; dst.left=0; dst.right=dst.left+width; dst.bottom=dst.top+height; canvas.drawBitmap(inputImage, src, dst, imgPaint); Log.v(\"FaceView\",\"view width:\"+this.getWidth()); if(detected) &#123; Paint rectPaint = new Paint(); rectPaint.setStrokeWidth(2); rectPaint.setColor(Color.RED); rectPaint.setStyle(Paint.Style.STROKE); //float scaleRatio=((float)width)/(float)imgWidth; for (int i=0; i &lt; detectedFaces; i++) &#123; RectF r = faceRects[i]; Log.v(\"FaceView\",\"r.top=\"+r.top); r.top=(r.top*width)/imgWidth; r.left=(r.left*width)/imgWidth; r.right=(r.right*width)/imgWidth; r.bottom=(r.bottom*width)/imgWidth; if (r != null) canvas.drawRect(r, rectPaint); &#125; detected=false; detectedFaces=0; &#125; &#125; &#125; 注意：FaceDetector搜索人脸的过程是比较耗时的，尤其当图片Size较大（例如640*480）时，耗时个一两秒是很常见的。为防止程序长时间没相应报错，人脸检测部分我使用了AsyncTask运行结果：p.s 感谢下 公下 エリカ 清纯的图片ㅋㅋㅋ注意：FaceDetector做些简单的人脸识别还可以，要是需要专业，快速，甚至和数据库比对匹配的那种高级人脸识别算法，可以试试OpenCV的Android开发包 http://opencv.org/platforms/android.htmlSample代码下载：https://www.dropbox.com/s/3vz252c9olipnjv/FaceDetectionTutorialProject.ziphttp://www.mobiletuts.me 一个及时更新的Android开发教程网站再次说下，由于原图挂了，最近又比较忙，还没能及时补图，还有现在也有很多成熟的脸部检测方案了，比如免费的脸型检测SDK网站Face++,需要进阶功能的童靴可以自行登录face++.com去建立更加专业的脸型检测。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"SDK","slug":"Android/SDK","permalink":"http://WinterSmileSB101.online/categories/Android/SDK/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"SDK","slug":"SDK","permalink":"http://WinterSmileSB101.online/tags/SDK/"},{"name":"人脸识别","slug":"人脸识别","permalink":"http://WinterSmileSB101.online/tags/人脸识别/"},{"name":"Face Detector","slug":"Face-Detector","permalink":"http://WinterSmileSB101.online/tags/Face-Detector/"}]},{"title":"安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现上","slug":"安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现上","date":"2017-03-22T12:17:19.000Z","updated":"2017-03-22T12:23:17.259Z","comments":true,"path":"2017/03/22/安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现上/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现上/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址此博文源码下载地址 起因： 最近在写一个音乐项目，发现网易云音乐的底部播放栏看起来不错，不同的页面切换也能做到无缝连接，于是自己打算仿造一个。折磨： 1.一开始我看到知乎有大神说使用Activity+Fragment实现的，链接，但是我的项目已经使用了多Activity布局，直接推翻不太舒服，也太懒，也麻烦。于是这个方法废除。2.后来又了解到应该可以直接自定义一个BaseActivity，在其中的onPost （）方法里实现布局的添加，方法参数我就不写了，然后重写startActivity（Intent intent）方法，在里面设置intent的 flag 为Intent.FLAG_ACTIVITY_NO_ANIMATION，即为取消切换Activity的时候的动画效果，这样就能实现无缝切换了。这样看来应该可行。我并没有实验过，有兴趣的童鞋可以自己实验一次。3.这一次，也是在知乎看到一个大神给出的思路，这个思路看起来前两个简单，而且更容易维护代码，自定义性也更好，那就是使用悬浮窗！不过使用这个也有问题，就是权限的问题，很多手机都是默认禁止掉了应用程序的悬浮窗权限，但是如果你开发的是系统应用的话，就默认给予了，不过我相信大多数人开发的都不是系统应用，所以这就是个麻烦点。为了解决这个，我们需要把WindowManager.LayoutParams 的变量的type设置为TYPE_TOAST,具体对应实际使用可以看这篇博客，具体我没有试验过，不过通过TYPE_TOAST这种类型设置，无权限显示是实现了，但是现在即使你不在引用程序内，只要程序没有退出，他都会一直显示在屏幕上，这显然不符合我们的要求，对于这个问题，有一种解决办法是对程序进行后台检测，但是这种方法太消耗性能，一，用固定时间刷新会导致用户体验差，如果时间差够短，用户体验没什么，但是性能被大幅度浪费了。所以这种方法不行。结果：难道就没有只在程序内显示的无需权限的悬浮窗了吗？答案大家一起寻找吧。在这里我使用第二种方法，步骤：1.定义BaseActivity，继承自AppCompatActivity直接上代码，注释里我写了关键位置，其他很简单1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package winter.zxb.smilesb101.winterMusic; import android.content.Intent; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v7.app.AppCompatActivity; import android.view.Gravity; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.WindowManager; import android.widget.FrameLayout; /** * 自定义基类，实现无缝切换底部播放栏 * Created by SmileSB101 on 2016/10/19 0019. */ public class BaseActity extends AppCompatActivity&#123; /** * windowManager对象 */ private WindowManager windowManager; /** * 根视野 */ private FrameLayout mContentContainer; /** * 浮动视野 */ private View mFloatView; @Override protected void onCreate(@Nullable Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); ViewGroup mDecorView = (ViewGroup) getWindow().getDecorView(); mContentContainer = (FrameLayout) ((ViewGroup) mDecorView.getChildAt(0)).getChildAt(1); mFloatView = LayoutInflater.from(getBaseContext()).inflate(R.layout.float_music_control_layout, null); &#125; @Override protected void onPostCreate(@Nullable Bundle savedInstanceState)&#123; super.onPostCreate(savedInstanceState); FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT); layoutParams.gravity = Gravity.BOTTOM; mContentContainer.addView(mFloatView,layoutParams); &#125; @Override protected void onStart()&#123; super.onStart(); &#125; /*** * 重点，设置这个可以实现前进Activity时候的无动画切换 * @param intent */ @Override public void startActivity(Intent intent)&#123; intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);//设置切换没有动画，用来实现活动之间的无缝切换 super.startActivity(intent); &#125; /** * 重点，在这里设置按下返回键，或者返回button的时候无动画 */ @Override public void finish()&#123; super.finish(); overridePendingTransition(0, 0);//设置返回没有动画 &#125; &#125; 2.其他需要播放栏的类继承自这个自定义的Activity就可以实现效果了。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"},{"name":"Android 馨乐（音乐APP，UI仿网易云音乐）开发","slug":"Android/Android-实战/Android-馨乐（音乐APP，UI仿网易云音乐）开发","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/Android-馨乐（音乐APP，UI仿网易云音乐）开发/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://WinterSmileSB101.online/tags/网易云音乐/"},{"name":"Service","slug":"Service","permalink":"http://WinterSmileSB101.online/tags/Service/"},{"name":"底部播放栏","slug":"底部播放栏","permalink":"http://WinterSmileSB101.online/tags/底部播放栏/"},{"name":"自定义 BaseActivity","slug":"自定义-BaseActivity","permalink":"http://WinterSmileSB101.online/tags/自定义-BaseActivity/"}]},{"title":"Serivce通知Activity更新UI方法总结","slug":"Serivce通知Activity更新UI方法总结","date":"2017-03-22T09:47:27.000Z","updated":"2017-03-22T12:08:31.043Z","comments":true,"path":"2017/03/22/Serivce通知Activity更新UI方法总结/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Serivce通知Activity更新UI方法总结/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 Activity与Service是Android的两个重要组件，在使用过程中我们遇到最多的是他们之间通讯的问题。1、Activity向Service传递消息的方法：1）利用BroadcastReceiver发送广播，Activity发送广播，Service中定义广播接收者进行接收。 2）利用绑定服务的方式开启服务，暴露服务中的方法，Activity进行调用。 3）利用Intent打开服务(开启服务)的方式，通过Intent传递数据。 2、Service向Activity传递消息的方法：1）利用BroadcastReceiver，在Service中发送广播，Activity中接收。 2）利用Handler在Service中发送消息，Activity中handleMessage进行处理。 下面以音乐播放器案例来，对以上的方式进行示例说明。在这个案例中，Activity界面按钮(播放、暂停、停止)要发送消息给Service(负责音乐播放)，Service要把播放进度通知给Activity进行播放进度的更新。程序的界面很简单(原文图片挂了，所以节哀顺变，各位看官自行脑补吧)：一、BroadcastReceiver实现Activity与Service相互通讯：Activity中：123456789101112131415//点击播放、暂停按钮public void play(View view) &#123;Intent intent = new Intent();intent.putExtra(\"ctrl\", 1);intent.setAction(\"org.itair.service.receiver\");sendBroadcast(intent);&#125;//点击停止按钮public void stop(View view) &#123;Intent intent = new Intent();intent.putExtra(\"ctrl\", 3);intent.setAction(\"org.itair.service.receiver\");sendBroadcast(intent);&#125; Service中动态注册一个广播接收者：123456789101112131415161718192021222324252627282930313233343536373839404142ServiceRecevier serviceRecevier = new ServiceRecevier();IntentFilter intentFilter = new IntentFilter();intentFilter.addAction(\"org.itair.service.receiver\");registerReceiver(serviceRecevier, intentFilter);Service中的BroadcastReceiver，收到后，同时也向Activity发送广播，（同样在Activity中也需要注册广播接收者）public class ServiceRecevier extends BroadcastReceiver &#123;@Overridepublic void onReceive(Context context, Intent intent) &#123;// 接收到Activity播放消息类型后，进行判断，调用服务中播放，暂停，停止的方法int ctrl = intent.getExtras().getInt(\"ctrl\", -1);int type = -1;switch (ctrl) &#123;case 1:type = 1;if (!isPlay) &#123;prepareAndStart(0, current);&#125; else &#123;pause();&#125;break;case 2:pause();break;case 3:stop();type = 0;break;&#125;//接收消息后，同时向Activit发送在播放状态，播放曲目id给Activity//Activity收到消息后，会播放按钮更新为暂停状态Intent sendIntent = new Intent();sendIntent.putExtra(\"type\", type);sendIntent.putExtra(\"status\", isPlay);sendIntent.setAction(\"org.itair.ui.receiver\");sendBroadcast(sendIntent);&#125;&#125; Service中音乐播放时把播放进度用广播发送给Activity:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//Service中播放音乐的方法public void prepareAndStart(int index, int current) &#123;try &#123;AssetFileDescriptor afd = am.openFd(musics[index]);mPlayer.reset();mPlayer.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(), afd.getLength());mPlayer.prepare();mPlayer.seekTo(current);mPlayer.start();isPlay = true;final int total = mPlayer.getDuration();Runnable runnable = new Runnable() &#123;Intent sendIntent = new Intent();@Overridepublic void run() &#123;// TODO Auto-generated method stubwhile (isPlay) &#123;// 发送进度广播给ActivitysendIntent.putExtra(\"type\", 2);sendIntent.putExtra(\"current\",100 *mPlayer.getCurrentPosition() / total);sendIntent.setAction(\"org.itair.ui.receiver\");sendBroadcast(sendIntent);try &#123;Thread.sleep(1000);&#125; catch (InterruptedException e) &#123;// TODO Auto-generated catch blocke.printStackTrace();&#125;&#125;&#125;&#125;;new Thread(runnable).start();mPlayer.setOnCompletionListener(new OnCompletionListener() &#123;@Overridepublic void onCompletion(MediaPlayer mp) &#123;// TODO Auto-generated method stub//播放完毕发送消息给ActivityisPlay = false;Intent sendIntent = new Intent();sendIntent.putExtra(\"type\", 0);sendIntent.putExtra(\"status\", isPlay);sendIntent.setAction(\"org.itair.ui.receiver\");sendBroadcast(sendIntent);&#125;&#125;);&#125; catch (IOException e) &#123;// TODO Auto-generated catch blocke.printStackTrace();&#125;&#125; 相应的，Activity中的广播接收者，接收广播进行处理：1234567891011121314151617181920212223242526272829public class UiRecevier extends BroadcastReceiver &#123;@Overridepublic void onReceive(Context context, Intent intent) &#123;int type = intent.getIntExtra(\"type\", -1);switch (type) &#123;//更新播放按钮case 0:pb.setProgress(0);btn_start.setImageResource(R.drawable.play);break;case 1:boolean isPlay = intent.getExtras().getBoolean(\"status\");tv_singer.setText(titles[0]);if (isPlay) &#123;btn_start.setImageResource(R.drawable.pause);&#125; else &#123;btn_start.setImageResource(R.drawable.play);&#125;break;case 2://更新进度pb.setProgress(intent.getExtras().getInt(\"current\"));break;&#125;&#125;&#125; 二、采用绑定服务开启服务的方法暴露Service中的方法，Activity进行调用，Service利用Handler向Activity发送进度消息。（绑定服务+Handler进行通讯）Activity中绑定服务：12345678910111213141516171819202122232425262728293031conn = new MyConn();Intent intent = new Intent(this, MusicService.class);bindService(intent, conn, BIND_AUTO_CREATE);Service中向Activity中发送播放进度消息（Handler+Message）Runnable runnable = new Runnable() &#123;Intent sendIntent = new Intent();Message message = null;@Overridepublic void run() &#123;// TODO Auto-generated method stubwhile (isPlay) &#123;//Handler message实现向Activity发送播放进度消息message = new Message();message.arg1 = 100 *mPlayer.getCurrentPosition()/ total;MainActivity.handler.sendMessage(message);try &#123;Thread.sleep(1000);&#125; catch (InterruptedException e) &#123;// TODO Auto-generated catch blocke.printStackTrace();&#125;&#125;&#125;&#125;;new Thread(runnable).start(); 注意这个handler是在Activity中声明定义的，且要声明为public static。Activity中，handler接收到消息后进行进度条的更新。12345678910111213141516public static Handler handler;handler = new Handler() &#123;@Overridepublic void handleMessage(Message msg) &#123;// TODO Auto-generated method stubpb.setProgress(msg.arg1);if(msg.arg2==100)&#123;pb.setProgress(0);btn_start.setImageResource(R.drawable.play);isPlay = false;&#125;super.handleMessage(msg);&#125;&#125;; 三、其它方式：Activity向Service发送消息，还可以采用Intent，Service采用开启服务(startService)的方式。Service向Activity发送消息，网上也有说可以采用Intent打开Activity的方法，但用在播放器更新进度时，不太合适。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"}],"tags":[{"name":"Activity","slug":"Activity","permalink":"http://WinterSmileSB101.online/tags/Activity/"},{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"Service","slug":"Service","permalink":"http://WinterSmileSB101.online/tags/Service/"},{"name":"UI","slug":"UI","permalink":"http://WinterSmileSB101.online/tags/UI/"}]},{"title":"安卓 实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现 下","slug":"安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现下","date":"2017-03-22T09:34:04.000Z","updated":"2017-03-22T09:48:21.589Z","comments":true,"path":"2017/03/22/安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现下/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓实现网易云音乐底部播放栏效果之使用自定义BaseActivity实现下/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址此博文源码下载地址 上一篇文章中，我们已经把BaseActivity建立好了，现在我们要考虑的是什么呢。由于音乐播放，所以我们需要用到Service,那么自然就需要用Service对UI界面（也就是我们的播放界面进行更新）,相对的，我们的Activity也会给Service发送诸如播放，停止，暂停，下一首之类的信息。这就涉及到了Service与Activity之间的通信。在网上了解了一番，一般有下面的几种方法：具体可以参考这篇博客Service与Activity之间通讯的几种方式，我觉得写的很好，我下面粗略提及一下Service向Activity发送消息：1.通过Broadcast，在活动中注册广播接收器，在Service中发送广播，Activity中接收。2.通过Handler，在活动中写Handler，在Service中调用活动中的Handler来向Handler传递消息。Activity向Service发送消息：1.通过BindService绑定服务的方式开启服务，接受到服务连接对象，也就是桥，这个桥可以让Service中的方法公开给这个Activity。通过绑定对象就可以直接访问到服务里的方法从而传输数据。2.通过Intent打开服务的方式传送数据。3.通过Broadcast广播传送，在服务中注册广播接收器，在活动中发出消息，在服务中接收。正题：一.这里Service向Activity传递消息使用广播的方式：定义广播Action：1234/** * 音乐服务广播动作字符串 */ public final static String MusicServiceReceiverAction = \"winter.zxb.smilesb101.winterMusic.service.receiver\";//这里的动作可以自定义，只要区别不同的广播以及接收端和发送端相同的Action 1.首先在需要接受消息的Activity中新建广播接收器：12345678910111213141516/** * 广播接收器 * Created by SmileSB101 on 2016/10/19 0019. */ public class UI_Receiver extends BroadcastReceiver&#123; @Override public void onReceive(Context context,Intent intent)&#123; int type = intent.getIntExtra(MusicServices.BROADCAST.TYPE_TYPENAME,-2); int value = 0; //Log.i(\"收到消息\",type+\"\"); switch(type) &#123; //这里进行消息对应处理 &#125; &#125; &#125; 2.在活动的onCreat（）方法中注册广播：123456IntentFilter intentFilter = new IntentFilter();ui_receiver = new UI_Receiver();intentFilter.addAction(MusicServices.MusicServiceReceiverAction); //注册应用内广播接收器，为了不让其他应用接收到广播 localBroadcastManager = LocalBroadcastManager.getInstance(this); localBroadcastManager.registerReceiver(ui_receiver, intentFilter); 3.服务中注册广播，在onCreate()方法中：1234567//初始化广播 musicServicesBroadcastReceiver = new MusicServicesBroadcastReceiver(); IntentFilter intentFilter = new IntentFilter(); intentFilter.addAction(MusicServiceReceiverAction); //本地广播注册 localBroadcastManager = LocalBroadcastManager.getInstance(this); localBroadcastManager.registerReceiver(musicServicesBroadcastReceiver,intentFilter); 4.发送数据的方法：1234Intent intent = new Intent(MusicServiceReceiverAction); int value = 0;//这里需要传入什么就写什么 intent.putExtra(\"key\",value);//这里的key是键值对的键，在后面的取值时需要用到，自定义， localBroadcastManager.sendBroadcast(intent);//发送广播 5.还要注意一点我们需要在onDestory（）方法中取消广播的注册12//取消注册应用内广播接收器 localBroadcastManager.unregisterReceiver(ui_receiver); 这样就完成了Service向Activity数据的传递；二.Activity向Service传递数据，这里使用绑定开启服务的方式1.在Activity中建立桥梁（ServiceConnection），以及Service绑定对象：12345678910111213141516171819/** * 音乐服务Bind对象 */ public static MusicServices.MusicIBind musicIBind; /** * 服务连接对象 */ public ServiceConnection mServiceConnection = new ServiceConnection() &#123; @Override public void onServiceConnected(ComponentName name,IBinder service) &#123; //绑定成功后，取得MusicSercice提供的接口 musicIBind = (MusicServices.MusicIBind) service; &#125; @Override public void onServiceDisconnected(ComponentName name) &#123; &#125; &#125;; 2.在Activity需要调用的地方直接使用绑定对象即可：比如在服务中有playMusic（）方法，那么调用方式就是musicIBind.playMusic()即可。3.还有一点就是要在onDestory()方法中取消服务的绑定：12//取消服务绑定 unbindService(mServiceConnection); 这样就实现了活动与服务的数据交流。是不是很简单。如有问题，欢迎指正。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"},{"name":"Android 馨乐（音乐APP，UI仿网易云音乐）开发","slug":"Android/Android-实战/Android-馨乐（音乐APP，UI仿网易云音乐）开发","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/Android-馨乐（音乐APP，UI仿网易云音乐）开发/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://WinterSmileSB101.online/tags/网易云音乐/"},{"name":"Service","slug":"Service","permalink":"http://WinterSmileSB101.online/tags/Service/"},{"name":"底部播放栏","slug":"底部播放栏","permalink":"http://WinterSmileSB101.online/tags/底部播放栏/"},{"name":"自定义 BaseActivity","slug":"自定义-BaseActivity","permalink":"http://WinterSmileSB101.online/tags/自定义-BaseActivity/"}]},{"title":"安卓实现网易云音乐底部播放栏效果之使用UI绑定到Service上实现","slug":"安卓实现网易云音乐底部播放栏效果之使用UI绑定到Service上实现","date":"2017-03-22T09:12:58.000Z","updated":"2017-03-22T12:18:31.310Z","comments":true,"path":"2017/03/22/安卓实现网易云音乐底部播放栏效果之使用UI绑定到Service上实现/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓实现网易云音乐底部播放栏效果之使用UI绑定到Service上实现/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址此博文源码下载地址 先说原理：音乐播放需要使用到 Service，而播放栏也是属于音乐播放的，那么为什么我们不把这两者合在一起呢？把UI和音乐 Service 合在一起，用 Service 来控制 UI 界面不是更简单。在进入 Activity 的时候判定是否播放列表不为空或者是否正在播放音乐来动态添加UI界面。简单的这样就实现了播放栏的常驻（虽然只是看起来，但是挺简单的，完成后效果也不错）。实现：1.建立 MusicService 类，继承自 Service 基类，并且实现基本的音乐播放逻辑，这里我实现了添加播放列表以及播放的方法。我预想的网易云音乐的播放面板存在逻辑为，只要播放列表不为空以及列表内存在可播放音乐，就存在这个音乐播放控制面板。这里为了简单，我们就先只检查播放列表是否为空，不为空就实例化出来播放控制面板。为空的话就去掉。这里我 Activity 发消息给 Service 是通过绑定开启服务的方式，具体实现不再赘述，直接说添加播放列表方法：在 Service 中定义添加播放列表方法，如果是只添加一首，那么就播放这一首，添加多首就不改变当前的播放状态：123456789101112131415/** * 添加音乐到播放列表,添加一首 */ private void addPlayListInner(Mp3Info mp3s)&#123; if(!PlayList.contains(mp3s)) &#123; //不存在这首歌曲，直接存入 //播放这首歌返回 Help.INSERT_VALUES_TO_SQLITE(PlayListContentProvider.CONTENT_SONGS_URI,mp3s);//存入数据库保存 PlayList.add(mp3s); CurrentPlayPosition = PlayList.size()-1;//赋值当前播放位置为现在的位置 &#125; //播放当前音乐 playInner(CurrentPlayPosition); &#125; 下面再来看播放方法（只是一个基础例子，需要完善的还有很多）：12345678910111213141516171819202122232425262728293031/** * 实现方法 * * @param position 播放位置 * * @return */ private boolean playInner(int position)&#123; try &#123; playPreInner(position); mediaPlayer.start(); isPlaying = true; CreateFloatView(); setPlayBarValue(PlayList.get(CurrentPlayPosition),mediaPlayer);//设置播放栏 //使用定时器提交播放进度 Timer timer = new Timer(); TimerTask task = new TimerTask()&#123; @Override public void run()&#123; musicProcessBar.setProgress(mediaPlayer.getCurrentPosition()); &#125; &#125;; timer.schedule(task,0,1000); &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; return true; &#125; 可以看到，上面播放音乐的方法中我们调用了一个方法，是CreateFloatView（）–这是用来创建播放控制面板的，实现如下：布局文件：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;!--浮动音乐控制布局--&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_gravity=\"bottom\" android:id=\"@+id/float_Music_Container\" android:orientation=\"vertical\" android:background=\"@color/colorHalfTransparentWrite\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_gravity=\"bottom\" android:background=\"@color/colorHalfTransparentWrite\"&gt; &lt;!--音乐图片--&gt; &lt;ImageView android:id=\"@+id/float_MusicImage\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:layout_centerVertical=\"true\"/&gt; &lt;LinearLayout android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" android:layout_toEndOf=\"@+id/float_MusicImage\" android:layout_marginLeft=\"5dp\"&gt; &lt;TextView android:id=\"@+id/float_Music_Name\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:textSize=\"20dp\" android:textColor=\"#000000\"/&gt; &lt;TextView android:id=\"@+id/float_Music_Artist\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:textColor=\"@color/colorPrimarySliver\" android:textSize=\"14dp\" android:layout_marginTop=\"3dp\"/&gt; &lt;/LinearLayout&gt; &lt;!--右边的控制按钮--&gt; &lt;RelativeLayout android:layout_width=\"180dp\" android:layout_height=\"50dp\" android:layout_centerVertical=\"true\" android:layout_alignParentEnd=\"true\"&gt; &lt;!--播放列表按钮--&gt; &lt;ImageView android:id=\"@+id/float_Play_List\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentStart=\"true\" android:layout_centerVertical=\"true\" android:src=\"@drawable/playbar_btn_playlist\"/&gt; &lt;!--播放或者暂停按钮--&gt; &lt;ImageView android:id=\"@+id/float_Play_Btn\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_centerInParent=\"true\" android:src=\"@drawable/playbar_play_btn\"/&gt; &lt;!--下一曲音乐--&gt; &lt;ImageView android:id=\"@+id/float_Next_Music\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentEnd=\"true\" android:layout_centerVertical=\"true\" android:src=\"@drawable/playbar_play_next_btn\"/&gt; &lt;/RelativeLayout&gt; &lt;/RelativeLayout&gt; &lt;!--音乐进度--&gt; &lt;ProgressBar android:id=\"@+id/float_Music_ProgressBar\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:progress=\"0\" android:visibility=\"visible\" style=\"@style/ProgressBar_Mini\"/&gt; &lt;/LinearLayout&gt; 实现方法：123456789101112131415161718192021222324252627282930/** * 建立底部浮动栏的方法 */ public void CreateFloatView()&#123; if(PlayList.size() &gt; 0) &#123; mFloatView = LayoutInflater.from(getBaseContext()).inflate(R.layout.float_music_control_layout,null); ViewGroup mDecorView = (ViewGroup)StaticValue.NowActivity.getWindow().getDecorView(); mContentContainer = (FrameLayout)((ViewGroup)mDecorView.getChildAt(0)).getChildAt(1); FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT); musicProcessBar = (ProgressBar)mFloatView.findViewById(R.id.float_Music_ProgressBar); musicImageView = (ImageView)mFloatView.findViewById(R.id.float_MusicImage); musicNameTextView = (TextView)mFloatView.findViewById(R.id.float_Music_Name); musicArtistTextView = (TextView)mFloatView.findViewById(R.id.float_Music_Artist); musicPlayBtn = (ImageView)mFloatView.findViewById(R.id.float_Play_Btn); musicNextBtn = (ImageView)mFloatView.findViewById(R.id.float_Next_Music); musicPlayListBtn = (ImageView)mFloatView.findViewById(R.id.float_Play_List); mFloatView.findViewById(R.id.float_Music_Container).setOnClickListener(this); musicPlayBtn.setOnClickListener(this); musicPlayListBtn.setOnClickListener(this); musicNextBtn.setOnClickListener(this); //获取当前正在播放的音乐 layoutParams.gravity = Gravity.BOTTOM;//设置对齐位置 mContentContainer.addView(mFloatView,layoutParams); if(! mediaPlayer.isPlaying()) &#123; //没有正在播放的，准备当前位置的音乐，设置值 playPreInner(- 1); &#125; setPlayBarValue(PlayList.get(CurrentPlayPosition),mediaPlayer);//设置播放控制面板的值 &#125; &#125; 可以看到，这里又调用了一个setPlayBarVlaue（mp3info,MediaPlayer）方法，下面我们来看看实现：123456789101112131415/** * 设置播放栏的值 * @param NowMp3 正在播放的mp3对象 * @param mediaPlayer1 当前的mediaPlayer对象 */ private void setPlayBarValue(Mp3Info NowMp3,MediaPlayer mediaPlayer1) &#123; musicProcessBar.setMax(mediaPlayer1.getDuration());//设置播放进度进度条最大值， musicProcessBar.setProgress(mediaPlayer1.getCurrentPosition());//设置播放进度条当前进度值 musicNameTextView.setText(NowMp3.getDisplayName());//设置音乐名称 musicImageView.setImageResource(R.drawable.ic_menu_gallery);//设置音乐专辑图片 musicArtistTextView.setText(NowMp3.getArtist());//设置歌手名称 //设置为暂停的图片 musicPlayBtn.setImageResource(R.mipmap.playbar_btn_pause); &#125; 我们接着在服务的onCreate方法中调用CreateFloatView（）方法以便打开应用的时候检测是否添加播放栏，还有重点：：：：在onResume（）方法中也调用CreateFloatView（）方法，这样才能让已经被挂起的Activity重新进入前台时能够检查是否添加播放栏！在onResume（）方法中也调用CreateFloatView（）方法，这样才能让已经被挂起的Activity重新进入前台时能够检查是否添加播放栏！在onResume（）方法中也调用CreateFloatView（）方法，这样才能让已经被挂起的Activity重新进入前台时能够检查是否添加播放栏！事重三！下面看看效果：由于这种效果使用静态图片不好观看，动态图还没弄好软件，我看再搞搞，先忍受这个东西吧：程序进入： 点击音乐栏目： 点击本地音乐： 点击扫描： 扫描完成： 回到音乐界面： 点击一首歌曲播放，播放面板就显示出来了！(在此感谢能够看到这里的各位看官)： 现在我们返回主界面看看是否有播放面板：播放面板已经有了，说明我们的逻辑是对的，看起来效果也还不错。感谢您能够看到这里，敬礼！需要源码的我已经上传到了我的CSDN 下载地址","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"},{"name":"Android 馨乐（音乐APP，UI仿网易云音乐）开发","slug":"Android/Android-实战/Android-馨乐（音乐APP，UI仿网易云音乐）开发","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/Android-馨乐（音乐APP，UI仿网易云音乐）开发/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://WinterSmileSB101.online/tags/网易云音乐/"},{"name":"Service","slug":"Service","permalink":"http://WinterSmileSB101.online/tags/Service/"},{"name":"UI","slug":"UI","permalink":"http://WinterSmileSB101.online/tags/UI/"},{"name":"底部播放栏","slug":"底部播放栏","permalink":"http://WinterSmileSB101.online/tags/底部播放栏/"}]},{"title":"Android中利用Random生成随机数","slug":"Android中利用Random生成随机数","date":"2017-03-22T09:10:22.000Z","updated":"2017-03-22T09:13:36.320Z","comments":true,"path":"2017/03/22/Android中利用Random生成随机数/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Android中利用Random生成随机数/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 MainActivity如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package cc.test; import java.util.HashSet; import java.util.Random; import android.app.Activity; import android.os.Bundle; /** * * Demo描述: * Java中利用Random生成随机数 * * 参考资料: * 1 http://blog.csdn.net/herrapfel/article/details/1885016 * 2 http://blog.csdn.net/yuxuepiaoguo/article/details/4195198 * 3 http://blog.csdn.net/zhongyili_sohu/article/details/7906125 * 4 http://www.csdn.net/article/2012-03-22/313407 * Thank you very much */ public class TestRandomActivity extends Activity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.main); testRandom1(); testRandom2(); testRandom3(); &#125; //生成随机数 private void testRandom1()&#123; Random random=new Random(); for (int i = 0; i &lt;5; i++) &#123; System.out.println(\"random.nextInt()=\"+random.nextInt()); &#125; System.out.println(\"/////以上为testRandom1()的测试///////\"); &#125; //在一定范围内生成随机数. //比如此处要求在[0 - n)内生成随机数. //注意:包含0不包含n private void testRandom2()&#123; Random random=new Random(); for (int i = 0; i &lt;10; i++) &#123; System.out.println(\"random.nextInt()=\"+random.nextInt(20)); &#125; System.out.println(\"/////以上为testRandom2()的测试///////\"); &#125; //在一定范围内生成不重复的随机数 //在testRandom2中生成的随机数可能会重复. //在此处避免该问题 private void testRandom3()&#123; HashSet&lt;integer&gt; integerHashSet=new HashSet&lt;integer&gt;(); Random random=new Random(); for (int i = 0; i &lt;10; i++) &#123; int randomInt=random.nextInt(20); System.out.println(\"生成的randomInt=\"+randomInt); if (!integerHashSet.contains(randomInt)) &#123; integerHashSet.add(randomInt); System.out.println(\"添加进HashSet的randomInt=\"+randomInt); &#125;else &#123; System.out.println(\"该数字已经被添加,不能重复添加\"); &#125; &#125; System.out.println(\"/////以上为testRandom3()的测试///////\"); &#125; &#125; main.xml如下:1234&lt;!--?xml version=\"1.0\" encoding=\"utf-8\"?--&gt; &lt;linearlayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\" android:orientation=\"vertical\"&gt; &lt;textview android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"Java中利用Random生成随机数\" android:layout_gravity=\"center\" android:layout_margintop=\"100dip\"&gt; &lt;/textview&gt;&lt;/linearlayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"Random","slug":"Random","permalink":"http://WinterSmileSB101.online/tags/Random/"}]},{"title":"Android实践-自定义dialog从屏幕底部弹出并且充满屏幕宽度","slug":"Android实践-自定义dialog从屏幕底部弹出并且充满屏幕宽度","date":"2017-03-22T08:56:01.000Z","updated":"2017-03-22T09:03:06.297Z","comments":true,"path":"2017/03/22/Android实践-自定义dialog从屏幕底部弹出并且充满屏幕宽度/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Android实践-自定义dialog从屏幕底部弹出并且充满屏幕宽度/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 通常我们使用dialog的时候会遇到一些问题，比如我想用自己定义的布局来替代系统那个黑乎乎的布局时我要怎么做？我想要指定dialog从底部弹出而不是在屏幕中央弹出要怎么做？我设置了dialog布局的宽度为填充父窗体然而实际效果却不是充满全屏的，这时我该怎么做？我们先来看一个例子： 首先我们先来定义一个dialog的布局12345678910111213141516171819202122232425262728&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"horizontal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;Button android:id=\"@+id/bt_weixin\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:text=\"微信\" android:layout_weight=\"1\" android:background=\"@color/material_blue_grey_800\"/&gt; &lt;Button android:id=\"@+id/bt_weibo\" android:layout_width=\"0dp\" android:layout_weight=\"1\" android:layout_height=\"wrap_content\" android:background=\"#ef3254\" android:text=\"微博\"/&gt; &lt;Button android:id=\"@+id/bt_pengyouquan\" android:layout_width=\"0dp\" android:layout_weight=\"1\" android:layout_height=\"wrap_content\" android:background=\"#ef6d03\" android:text=\"朋友圈\"/&gt;&lt;/LinearLayout&gt; activity_main.xml非常简单，只有一个button12345678910&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;Button android:id=\"@+id/share\" android:text=\"分享\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /&gt;&lt;/RelativeLayout&gt; 接着我们要在res/values/styles.xml下定义dialog的样式以及dialog弹出时的动画12345678910111213141516&lt;!-- 弹出框动画 由下至上 --&gt; &lt;style name=\"dialogStyle\" parent=\"@android:style/Animation.Dialog\"&gt; &lt;item name=\"@android:windowEnterAnimation\"&gt;@anim/dialog_enter&lt;/item&gt; &lt;!-- 进入时的动画 --&gt; &lt;item name=\"@android:windowExitAnimation\"&gt;@anim/dialog_exit&lt;/item&gt; &lt;!-- 退出时的动画 --&gt; &lt;/style&gt; &lt;!-- 对话框样式 --&gt; &lt;style name=\"Theme.Light.Dialog\" parent=\"android:style/Theme.Dialog\"&gt; &lt;item name=\"android:windowBackground\"&gt;@android:color/transparent&lt;/item&gt; &lt;item name=\"android:windowNoTitle\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowIsFloating\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowContentOverlay\"&gt;@null&lt;/item&gt; &lt;item name=\"android:scrollHorizontally\"&gt;true&lt;/item&gt; &lt;/style&gt; 接着我们在res下新建一个anim文件夹，在res/values/anim下新建两个xml文件 dialog_enter.xml和dialog_exit.xml如下12345&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;translate android:fromYDelta=\"100%\" android:duration=\"600\"&gt;&lt;/translate&gt;&lt;/set&gt; 12345&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;translate android:toYDelta=\"100%\" android:duration=\"600\"&gt;&lt;/translate&gt;&lt;/set&gt; 最后是MainActivity.Java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class MainActivity extends Activity &#123; private Button btShare; private Context mContext; private Button btWeixin; private Button btWeibo; private Button btPengyouquan; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mContext = MainActivity.this; btShare = (Button) findViewById(R.id.share); btShare.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; final Dialog dialog = new Dialog(mContext, R.style.Theme_Light_Dialog); View dialogView = LayoutInflater.from(mContext).inflate(R.layout.my_dialog,null); //获得dialog的window窗口 Window window = dialog.getWindow(); //设置dialog在屏幕底部 window.setGravity(Gravity.BOTTOM); //设置dialog弹出时的动画效果，从屏幕底部向上弹出 window.setWindowAnimations(R.style.dialogStyle); window.getDecorView().setPadding(0, 0, 0, 0); //获得window窗口的属性 android.view.WindowManager.LayoutParams lp = window.getAttributes(); //设置窗口宽度为充满全屏 lp.width = WindowManager.LayoutParams.MATCH_PARENT; //设置窗口高度为包裹内容 lp.height = WindowManager.LayoutParams.WRAP_CONTENT; //将设置好的属性set回去 window.setAttributes(lp); //将自定义布局加载到dialog上 dialog.setContentView(dialogView); btWeixin = (Button) dialogView.findViewById(R.id.bt_weixin); btWeibo = (Button) dialogView.findViewById(R.id.bt_weibo); btPengyouquan = (Button) dialogView.findViewById(R.id.bt_pengyouquan); dialog.show(); btWeixin.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(mContext,\"分享到微信\",Toast.LENGTH_SHORT).show(); &#125; &#125;); btWeibo.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(mContext,\"分享到微博\",Toast.LENGTH_SHORT).show(); &#125; &#125;); btPengyouquan.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(mContext,\"分享到朋友圈\",Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; &#125;); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"自定义 Dialog","slug":"自定义-Dialog","permalink":"http://WinterSmileSB101.online/tags/自定义-Dialog/"}]},{"title":"安卓网易云音乐能用的API","slug":"安卓网易云音乐能用的API","date":"2017-03-22T08:49:51.000Z","updated":"2017-03-22T09:03:42.484Z","comments":true,"path":"2017/03/22/安卓网易云音乐能用的API/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓网易云音乐能用的API/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。源码地址（源码相对于没有那么全，但是道理是一样的） 最近在做一个仿网易云音乐的APP，需要通过网络获取歌曲以及歌词，于是做了这些API整合，这里面的都是我测试过能够获取到信息的API，写这篇博客为了备份与分享。先说API来源，来自这篇博客：网易云音乐常用API我们使用Volley来解析处理网络请求，由于返回的是Json，所以我们使用Gson来解析返回数据。实现Volley下载以及使用地址：Volley使用指南以及下载Gson.jar下载地址：Gson.jar使用方法：AS中拷贝类库文件到libs文件夹下，然后右键类库文件选择Add as Library。下面附上工具类代码：1.获取RequestQueue实例：123456789101112131415161718192021222324252627282930313233package winter.zxb.smilesb101.testdemo; import android.content.Context; import com.android.volley.Request; import com.android.volley.RequestQueue; import com.android.volley.Response; import com.android.volley.toolbox.JsonObjectRequest; import com.android.volley.toolbox.Volley; import org.json.JSONObject; /** * 网络通信工具类 * Created by SmileSB101 on 2016/11/1 0001. */ public class InternetUtil&#123; /** * 网络请求队列 */ private static RequestQueue mRequestqueue; public static RequestQueue getmRequestqueue(Context context) &#123; if(mRequestqueue == null) &#123; mRequestqueue = Volley.newRequestQueue(context); return mRequestqueue; &#125; else&#123; return mRequestqueue; &#125; &#125; &#125; 2.网络请求处理类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202package winter.zxb.smilesb101.testdemo; import android.content.Context; import android.util.Log; import android.util.StateSet; import com.android.volley.RequestQueue; import com.android.volley.Response; import com.android.volley.VolleyError; import com.android.volley.toolbox.StringRequest; import org.json.JSONException; import org.json.JSONObject; /** * 音乐网络类 * Created by SmileSB101 on 2016/11/1 0001. */ public class MusicNetWork&#123; /** * 网易音乐搜索API * http://s.music.163.com/search/get/ * 获取方式：GET * 参数： * src: lofter //可为空 * type: 1 * filterDj: true|false //可为空 * s: //关键词 * limit: 10 //限制返回结果数 * offset: 0 //偏移 * callback: //为空时返回json，反之返回jsonp callback * @param s * @param context * @return * 注意废数字才用‘’符号，要不不能用，否则出错！！ */ public static void SearchMusic(Context context,String s,int limit,int type,int offset)&#123; String url = UrlConstants.CLOUD_MUSIC_API_SEARCH + \"type=\"+type+\"&amp;s='\" + s + \"'&amp;limit=\"+limit+\"&amp;offset=\"+offset; RequestQueue requestQueue = InternetUtil.getmRequestqueue(context); StringRequest straingRequest = new StringRequest(url,new Response.Listener&lt;String&gt;()&#123; @Override public void onResponse(String s)&#123; try &#123; JSONObject json = new JSONObject(s); Log.i(\"onResponse: \",json.toString()); &#125; catch(JSONException e) &#123; e.printStackTrace(); &#125; &#125; &#125;,new Response.ErrorListener()&#123; @Override public void onErrorResponse(VolleyError volleyError)&#123; Log.i(\"onResponse: \",volleyError.toString()); &#125; &#125;); requestQueue.add(straingRequest); &#125; /** * 网易云音乐歌曲信息API * @param context * @param id 歌曲id * @param ids 用[]包裹起来的歌曲id 写法%5B %5D * @return */ public static void Cloud_Music_MusicInfoAPI(Context context,String id,String ids) &#123; String url = UrlConstants.CLOUD_MUSIC_API_MUSICINGO + \"id=\"+id+\"&amp;ids=%5B\"+ids+\"%5D\"; RequestQueue requestQueue = InternetUtil.getmRequestqueue(context); StringRequest straingRequest = new StringRequest(url,new Response.Listener&lt;String&gt;()&#123; @Override public void onResponse(String s)&#123; try &#123; JSONObject json = new JSONObject(s); Log.i(\"onResponse: \",json.toString()); &#125; catch(JSONException e) &#123; e.printStackTrace(); &#125; &#125; &#125;,new Response.ErrorListener()&#123; @Override public void onErrorResponse(VolleyError volleyError)&#123; Log.i(\"onResponse: \",volleyError.toString()); &#125; &#125;); requestQueue.add(straingRequest); &#125; /** * 获取歌曲歌词的API *URL： GET http://music.163.com/api/song/lyric 必要参数： id：歌曲ID lv：值为-1，我猜测应该是判断是否搜索lyric格式 kv：值为-1，这个值貌似并不影响结果，意义不明 tv：值为-1，是否搜索tlyric格式 * @param context * @param os * @param id */ public static void Cloud_Muisc_getLrcAPI(Context context,String os,String id) &#123; String url = UrlConstants.CLOUD_MUSIC_API_MUSICLRC + \"os=\"+os+\"&amp;id=\"+id+\"&amp;lv=-1&amp;kv=-1&amp;tv=-1\"; RequestQueue requestQueue = InternetUtil.getmRequestqueue(context); StringRequest straingRequest = new StringRequest(url,new Response.Listener&lt;String&gt;()&#123; @Override public void onResponse(String s)&#123; try &#123; JSONObject json = new JSONObject(s); Log.i(\"onResponse: \",json.toString()); &#125; catch(JSONException e) &#123; e.printStackTrace(); &#125; &#125; &#125;,new Response.ErrorListener()&#123; @Override public void onErrorResponse(VolleyError volleyError)&#123; Log.i(\"onResponse: \",volleyError.toString()); &#125; &#125;); requestQueue.add(straingRequest); &#125; /** * 获取歌单的API * @param context * @param id 歌单ID */ public static void Cloud_Muisc_MusicListSearch(Context context,String id) &#123; String url = UrlConstants.CLOUD_MUSIC_API_MUSICLIST + \"id=\"+id+\"&amp;updateTime=-1\"; RequestQueue requestQueue = InternetUtil.getmRequestqueue(context); StringRequest straingRequest = new StringRequest(url,new Response.Listener&lt;String&gt;()&#123; @Override public void onResponse(String s)&#123; try &#123; JSONObject json = new JSONObject(s); Log.i(\"onResponse: \",json.toString()); &#125; catch(JSONException e) &#123; e.printStackTrace(); &#125; &#125; &#125;,new Response.ErrorListener()&#123; @Override public void onErrorResponse(VolleyError volleyError)&#123; Log.i(\"onResponse: \",volleyError.toString()); &#125; &#125;); requestQueue.add(straingRequest); &#125; public static JSONObject json = null; public static JSONObject getInfoFromUrl_Volley(String url,Context context) &#123; json = null; RequestQueue requestQueue = InternetUtil.getmRequestqueue(context); StringRequest straingRequest = new StringRequest(url,new Response.Listener&lt;String&gt;()&#123; @Override public void onResponse(String s)&#123; try &#123; json = new JSONObject(s); Log.i(\"onResponse: \",json.toString()); &#125; catch(JSONException e) &#123; e.printStackTrace(); &#125; &#125; &#125;,new Response.ErrorListener()&#123; @Override public void onErrorResponse(VolleyError volleyError)&#123; Log.i(\"onResponse: \",volleyError.toString()); &#125; &#125;); requestQueue.add(straingRequest); return json; &#125; public class UrlConstants &#123; /** * 云音乐搜索API网址 */ public static final String CLOUD_MUSIC_API_SEARCH = \"http://s.music.163.com/search/get/?\"; /** * 歌曲信息API网址 */ public static final String CLOUD_MUSIC_API_MUSICINGO = \"http://music.163.com/api/song/detail/?\"; /** * 获取歌曲的歌词 */ public static final String CLOUD_MUSIC_API_MUSICLRC = \"http://music.163.com/api/song/lyric?\"; /** * 获取歌单 */ public static final String CLOUD_MUSIC_API_MUSICLIST = \"http://music.163.com/api/playlist/detail?\"; &#125; &#125; 调用类：123456789101112131415161718192021222324252627282930313233package winter.zxb.smilesb101.testdemo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123; private Button NetWorkTest; @Override protected void onCreate(Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); NetWorkTest = (Button)findViewById(R.id.NetWorkTest); NetWorkTest.setOnClickListener(this); &#125; @Override public void onClick(View v)&#123; switch(v.getId()) &#123; case R.id.NetWorkTest://网络测试 Log.i(\"进入\",\"onClick: \"); //MusicNetWork.SearchMusic(this,\"光荣\",10,1,0); //MusicNetWork.Cloud_Music_MusicInfoAPI(this,\"26562231\",\"26562231\"); //MusicNetWork.Cloud_Muisc_getLrcAPI(this,\"pc\",\"26562231\"); MusicNetWork.Cloud_Muisc_MusicListSearch(this,\"37880978\"); break; &#125; &#125; &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"网易云音乐","slug":"网易云音乐","permalink":"http://WinterSmileSB101.online/tags/网易云音乐/"},{"name":"API","slug":"API","permalink":"http://WinterSmileSB101.online/tags/API/"}]},{"title":"安卓中字符串分割（Split）的坑","slug":"安卓中字符串分割（Split）的坑","date":"2017-03-22T08:47:12.000Z","updated":"2017-03-22T09:03:59.364Z","comments":true,"path":"2017/03/22/安卓中字符串分割（Split）的坑/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓中字符串分割（Split）的坑/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 今天在做一款音乐APP的时候需要解析JSON数据，解析到最后有个数组由||分割开来，于是想到使用字符串的spilt()方法来做，说做就做：s.spilt(“||”);运行，居然没用，没有任何分割的字符串出现。折腾了许久，通过查询资料，终于找到问题，原来是在安卓下使用spilt()方法的时候需要加[]符号。比如，分割字符串还是我这里的||，我们正确的打开方式应该是：s.spilt(“[||]”);运行一下，完美。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"字符串","slug":"字符串","permalink":"http://WinterSmileSB101.online/tags/字符串/"},{"name":"Split","slug":"Split","permalink":"http://WinterSmileSB101.online/tags/Split/"},{"name":"分割","slug":"分割","permalink":"http://WinterSmileSB101.online/tags/分割/"}]},{"title":"安卓中字符串对比（相等）的坑","slug":"安卓中字符串对比（相等）的坑","date":"2017-03-22T08:43:59.000Z","updated":"2017-03-22T08:45:30.707Z","comments":true,"path":"2017/03/22/安卓中字符串对比（相等）的坑/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓中字符串对比（相等）的坑/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 今天在写一个音乐APP的时候，涉及到对比传入的歌手与搜索到的歌手是否匹配的问题，一开始使用的是if(a==b)…执行，没有反应。后来想到这和Java里是不是一样，==符号是用来判断引用相等，而不是字符串内容想等，于是就想到使用equals（）方法来判断想等，以前JAVA也遇到过这个坑，不过久了倒是忘了。修改代码：if(a.equals(b))…执行 成功判断了。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"字符串","slug":"字符串","permalink":"http://WinterSmileSB101.online/tags/字符串/"},{"name":"对比","slug":"对比","permalink":"http://WinterSmileSB101.online/tags/对比/"}]},{"title":"安卓（Android）ViewPager+TabLayout实现图片轮播效果","slug":"安卓（Android）ViewPager-TabLayout实现图片轮播效果","date":"2017-03-22T08:26:15.000Z","updated":"2017-03-22T13:14:07.353Z","comments":true,"path":"2017/03/22/安卓（Android）ViewPager-TabLayout实现图片轮播效果/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/安卓（Android）ViewPager-TabLayout实现图片轮播效果/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。最终代码传送门 文章较长，请耐心食用起因： 最近在做一个新闻APP，看到现在的新闻客户端顶端都有个热点新闻轮播。思路：viewpager可以用来显示图片，并且可以提供滑动，15年（不知记错没）新出的TabLayout可以绑定ViewPager的Adapter来实现ViewPager与Tablayout的联动效果，比如qq的下面菜单栏，微信的菜单栏，都可以这样实现。而且我们可以通过两种方式来实现TabLayout的图片标题：1.SpannableString 来实现图文混排，混排方法（传送门）。2.使用自定义布局，布局中添加你想要显示的内容，然后调用tablayout中tab的setCustomView(View view)或者setCustomView(int R_id)方法来设置显示。下面正题：这里我使用第二种方法来实现，至于为什么用第二种（好吧其实是我使用第一种的时候遇到了一个不显示的bug，当然第二种也遇到了，后面会提及，后来就没改回第一种了，原理一样）源码在最后面有下载。一。首先我们来准备图片：没有选中的位置的提示图片： 选中了之后的位置的提示图片： 图片都可以使用ps制作，很简单。二。然后我们来写轮播界面的布局（老规矩，先代码后解释）：12345678910111213141516171819202122232425262728&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;!--轮播viewpager布局--&gt; &lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"200dp\"&gt; &lt;android.support.design.widget.TabLayout app:tabIndicatorColor=\"@color/colorTransparent\" android:id=\"@+id/luobo_tablayout\" android:layout_width=\"100dp\" android:layout_height=\"10dp\" app:tabMinWidth=\"10dp\" app:tabMaxWidth=\"30dp\" app:tabGravity=\"center\" app:tabMode=\"fixed\" android:layout_alignParentEnd=\"true\" android:layout_alignParentBottom=\"true\" android:translationZ=\"2dp\" android:layout_marginBottom=\"5dp\"/&gt; &lt;android.support.v4.view.ViewPager android:id=\"@+id/luobo_viewpager\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:translationZ=\"0dp\" &gt; &lt;/android.support.v4.view.ViewPager&gt; &lt;/RelativeLayout&gt; 这里解释几个点：（1）translationZ属性:为了让Tablayout显示在Viewpager的上方，不设置z值大于ViewPager的话，就显示不出来了。（2）tabMode属性：为了不让tablayout滑动（在内容超出控件宽度的时候里面内容滑动从而造成显示上的逻辑错误）。（3）tabMinWidth属性：tabMaxWidth属性：设置tab的最小值和最大值，来控制每个tab的宽度（先立个Flag）。三。现在我们来为ViewPager的内容写布局文件，这里我们的内容有新闻图片（覆盖全页面），新闻标题（位于左下角），布局文件如下：12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"200dp\"&gt; &lt;ImageView android:id=\"@+id/imageLayout_Image\" android:layout_width=\"match_parent\" android:layout_height=\"200dp\" android:background=\"@mipmap/winter_news_place_hloder_pic\" android:src=\"@color/colorTransparent\"/&gt; &lt;TextView android:id=\"@+id/imageLayout_Title\" android:textColor=\"@color/colorWrite\" android:layout_width=\"200dp\" android:marqueeRepeatLimit=\"marquee_forever\" android:maxLines=\"1\" android:layout_height=\"20dp\" android:layout_alignParentBottom=\"true\" android:textAlignment=\"viewStart\" android:layout_marginLeft=\"15dp\"/&gt; &lt;/RelativeLayout&gt; 这里设置了图片为默认的占位图片。可根据喜好设置。四。既然我们要自定义 tablayout 的布局，那么我们现在就来写这个布局文件布局很简单，就一个 ImageView，为了拉伸图片到全部页面，我们这里设置他的 background 属性而不是 src 属性：1234567891011&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;ImageView android:id=\"@+id/Imageview\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@mipmap/luobo_unseleted\"/&gt; &lt;/LinearLayout&gt; 五。布局我们已经弄好了，接下来就是逻辑代码了，我这里使用继承自Fragment是为了方便插入任何其他布局里，我这里插入的是首页。这里插播一下布局中插入碎片（Fragment）的方法，老规矩：12345&lt;fragment android:layout_width=\"match_parent\" android:layout_height=\"200dp\" android:id=\"@+id/luoboViewPaget\" android:name=\"lunbo.viewPagerLuobo\"/&gt; 注意上面的name属性是必要的，用来指向Fragment的定义，其他的属性和一般的一样设置就可以了。现在可以写轮播的Fragment的代码了（很简单的逻辑，我就不解释了，重要的地方有注释）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179package lunbo; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.drawable.BitmapDrawable; import android.graphics.drawable.Drawable; import android.icu.text.LocaleDisplayNames; import android.os.Bundle; import android.os.Handler; import android.os.Message; import android.support.annotation.Nullable; import android.support.design.widget.TabLayout; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentPagerAdapter; import android.support.v4.content.ContextCompat; import android.support.v4.view.ViewPager; import android.support.v7.app.WindowDecorActionBar; import android.text.Spannable; import android.text.SpannableString; import android.text.style.ImageSpan; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import com.android.volley.RequestQueue; import com.android.volley.Response; import com.android.volley.VolleyError; import com.android.volley.toolbox.StringRequest; import java.util.ArrayList; import NewsInfo.JUHE_NewsInfo; import Static.StaticValue; import Util.FileOP.FileStore; import Util.NetWork; import winter.zxb.smilesb101.winternews.R; /** * 项目名称：WinterNews * 类描述：图片轮播类 * 创建人：SmileSB101 * 创建时间：2016/11/9 0009 07:36 * 修改人：Administrator * 修改时间：2016/11/9 0009 07:36 * 修改备注： */ public class viewPagerLuobo extends Fragment&#123; private TabLayout mTablayout; private ViewPager mViewPager; private int selectNum; private int pageNum; private View view; private ArrayList&lt;JUHE_NewsInfo&gt; juhe_newsInfos = new ArrayList&lt;&gt;(); private viewPagerAdapter mViewPageAdapter; private static final int GetNewsDown = 0; private static final int GetNewsError = -1; private Handler handler = new Handler()&#123; @Override public void handleMessage(Message msg)&#123; super.handleMessage(msg); switch(msg.what) &#123; case GetNewsDown: Log.i(\"设置轮播图片显示\",\"handleMessage: \"); showTopNews(); break; case GetNewsError: break; &#125; &#125; &#125;; @Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState)&#123; view = inflater.inflate(R.layout.lunbo_viewpager,container,false); selectNum = 0; pageNum = 3; getTopNews(); return view; &#125; private void getTopNews() &#123; RequestQueue mrequeue = NetWork.getmRequestqueue(StaticValue.MainActivity); String utl = \"http://v.juhe.cn/toutiao/index?top&amp;key=2d89bbcc668f4ef02cade2b00d7d9265\"; StringRequest stringRequest = new StringRequest(utl,new Response.Listener&lt;String&gt;()&#123; @Override public void onResponse(String s)&#123; Log.i(\"获取到头条\",\"onResponse: \"); juhe_newsInfos = FileStore.getJUHENews_List(s); handler.sendEmptyMessage(GetNewsDown); &#125; &#125;,new Response.ErrorListener()&#123; @Override public void onErrorResponse(VolleyError volleyError)&#123; handler.sendEmptyMessage(GetNewsError); &#125; &#125;); mrequeue.add(stringRequest); &#125; private void showTopNews() &#123; mViewPager = (ViewPager)view.findViewById(R.id.luobo_viewpager); mViewPageAdapter = new viewPagerAdapter(getFragmentManager()); mViewPager.setAdapter(mViewPageAdapter); setmTablayout(); &#125; private void setmTablayout() &#123; mTablayout = (TabLayout)view.findViewById(R.id.luobo_tablayout); mTablayout.setupWithViewPager(mViewPager); //添加tab，这里添加一开始显示的图片，重要代码 for(int i = 0;i&lt;mViewPageAdapter.getCount();i++) &#123; TabLayout.Tab tab = mTablayout.getTabAt(i); Log.i(\"添加图片\",\"setmTablayout: 1\"); View v = LayoutInflater.from(StaticValue.MainActivity).inflate(R.layout.luobo_tablayout,null); ImageView tabImage = (ImageView)v.findViewById(R.id.Imageview); tabImage.setBackgroundResource(R.mipmap.luobo_unseleted); tab.setCustomView(v); &#125; //添加图片变换，在这里进行选项变化时图片的设置，重要代码 mTablayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener()&#123; @Override public void onTabSelected(TabLayout.Tab tab)&#123; Log.i(\"图片添加\",\"onTabSelected: \"); View v = tab.getCustomView(); ImageView tabImage = (ImageView)v.findViewById(R.id.Imageview); tabImage.setBackgroundResource(R.mipmap.luobo_seleted); //tab.setCustomView(v); &#125; @Override public void onTabUnselected(TabLayout.Tab tab)&#123; View v = tab.getCustomView(); ImageView tabImage = (ImageView)v.findViewById(R.id.Imageview); tabImage.setBackgroundResource(R.mipmap.luobo_unseleted); //tab.setCustomView(v); &#125; @Override public void onTabReselected(TabLayout.Tab tab)&#123; &#125; &#125;); //后台开启计时器线程，每3秒设置一次选项变化，实现轮播的逻辑，重要代码。 handler.postDelayed(new Runnable()&#123; @Override public void run()&#123; selectNum = selectNum%pageNum; Log.i(\"选项卡数量\",\"run: \"+selectNum); mViewPager.setCurrentItem(selectNum); selectNum++; handler.postDelayed(this,3000); &#125; &#125;,0); &#125; class viewPagerAdapter extends FragmentPagerAdapter&#123; public viewPagerAdapter(FragmentManager fm)&#123; super(fm); &#125; @Override public int getCount()&#123; return pageNum; &#125; @Override public Fragment getItem(int position)&#123; return ImageFragment.newInstence(juhe_newsInfos.get(position)); &#125; @Override public CharSequence getPageTitle(int position)&#123; return \"\"; &#125; &#125; &#125; 获取新闻数据接口是来自聚合网，下面贴出轮播Viewpager中的内容Fragment：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package lunbo; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import com.bumptech.glide.Glide; import com.bumptech.glide.load.resource.drawable.GlideDrawable; import com.bumptech.glide.request.animation.GlideAnimation; import com.bumptech.glide.request.target.SimpleTarget; import NewsInfo.JUHE_NewsInfo; import winter.zxb.smilesb101.winternews.R; /** * 项目名称：WinterNews * 类描述：轮播ViewPager中显示的内容的Fragment * 创建人：SmileSB101 * 创建时间：2016/11/9 0009 13:24 * 修改人：Administrator * 修改时间：2016/11/9 0009 13:24 * 修改备注： */ public class ImageFragment extends Fragment&#123; private ImageView mImageView; private JUHE_NewsInfo juhe_newsInfo; private TextView title; Fragment context; public void setJuhe_newsInfo(JUHE_NewsInfo juhe_newsInfo) &#123; this.juhe_newsInfo = juhe_newsInfo; &#125; public ImageFragment()&#123; &#125; public static ImageFragment newInstence(JUHE_NewsInfo juhe_newsInfo) &#123; ImageFragment imageFragment = new ImageFragment(); imageFragment.setJuhe_newsInfo(juhe_newsInfo); return imageFragment; &#125; @Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState)&#123; View rootView = null; context = this; rootView = inflater.inflate(R.layout.image_layout,container,false); title = (TextView)rootView.findViewById(R.id.imageLayout_Title); mImageView = (ImageView)rootView.findViewById(R.id.imageLayout_Image); if(juhe_newsInfo!=null) &#123; Glide.with(context) .load(juhe_newsInfo.getThumbnail_pic_s()) .placeholder(R.mipmap.winter_news_place_hloder_pic) .error(R.mipmap.winter_news_error_pic) .into(new SimpleTarget&lt;GlideDrawable&gt;()&#123; @Override public void onResourceReady(GlideDrawable resource,GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation)&#123; //在这里设置图片背景（当GLide获取完成图片之后执行） mImageView.setBackground(resource); &#125; &#125;); title.setText(juhe_newsInfo.getTitle()); &#125; else &#123; Glide.with(context) .load(R.mipmap.winter_news_place_hloder_pic) .error(R.mipmap.winter_news_error_pic) .into(new SimpleTarget&lt;GlideDrawable&gt;()&#123; @Override public void onResourceReady(GlideDrawable resource,GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation)&#123; //在这里设置图片背景（当GLide获取完成图片之后执行） mImageView.setBackground(resource); &#125; &#125;); &#125; return rootView; &#125; &#125; 图片加载我使用的是Glide库，详细的使用方法（点击开启传送门）。下面说一下我遇到的bug，在包含tablayout的布局中，没有设置tab的最大宽度值，导致数量多了之后看不到背景图片（这么简单的问题，蜗居然改本来就是能用的代码改了大半天！！后来突然想到改少tab数量会不会有效才发现问题所在，在这里做个记录，以防再次入坑。）下面是截图（可以看到效果已经实现了，但是tab间距太远,骚新闻什么的不要理他） 于是我们调整一下tablayout的padding值以及tabMaxWidth的值：改变之后的tablayout如下：12345678910111213141516&lt;android.support.design.widget.TabLayout app:tabIndicatorColor=\"@color/colorTransparent\" android:id=\"@+id/luobo_tablayout\" android:layout_width=\"100dp\" android:layout_height=\"10dp\" app:tabMinWidth=\"10dp\" app:tabMaxWidth=\"10dp\" app:tabPadding=\"0dp\" app:tabPaddingStart=\"0dp\" app:tabPaddingEnd=\"0dp\" app:tabGravity=\"center\" app:tabMode=\"fixed\" android:layout_alignParentEnd=\"true\" android:layout_alignParentBottom=\"true\" android:translationZ=\"2dp\" android:layout_marginBottom=\"5dp\"/&gt; 这里控件的宽度可以自己根据实际需求更改注意必须三个padding和MaxWidth同时设置才能有如下效果，缺一不可！！注意必须三个padding和MaxWidth同时设置才能有如下效果，缺一不可！！注意必须三个padding和MaxWidth同时设置才能有如下效果，缺一不可！！最后截图，原谅我没有截成gif。实在不会用咔咔截屏。。。。如有问题，欢迎指正。现在来看看最终效果：","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 自定义View","slug":"Android/Android-自定义View","permalink":"http://WinterSmileSB101.online/categories/Android/Android-自定义View/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"自定义 View","slug":"自定义-View","permalink":"http://WinterSmileSB101.online/tags/自定义-View/"},{"name":"轮播效果","slug":"轮播效果","permalink":"http://WinterSmileSB101.online/tags/轮播效果/"},{"name":"ViewPager","slug":"ViewPager","permalink":"http://WinterSmileSB101.online/tags/ViewPager/"},{"name":"TabLayout","slug":"TabLayout","permalink":"http://WinterSmileSB101.online/tags/TabLayout/"}]},{"title":"Android 自己动手实现守望先锋动画","slug":"自己动手实现守望先锋动画","date":"2017-03-22T08:14:40.000Z","updated":"2017-03-22T13:13:55.660Z","comments":true,"path":"2017/03/22/自己动手实现守望先锋动画/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/自己动手实现守望先锋动画/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 起因：因为逛CSDN的时候无意间看到这篇博文（传送门），想给自己的项目加上这个加载效果，但是原谅我放荡不羁用不来（不知道为什么是用那个报一堆不知名的错误），于是我决定自己动手，丰衣足食。先上效果： 截图不是gif，请见谅。下面来实现：（绘制一个正六边形我就不再多说）先来绘制出所有的六边形：按照上图所示：六边形在没有x和y的偏移量的情况下，假设我们从左边的第一个定点开始绘制的话，那么六边形的高等于：Math.sqrt(3)*六边形边长。第一个出现位置的起始点坐标是：（六边形的高/2，六边形边长/2）。第二个出现位置的起始点坐标是：（（六边形的高/2）*3，六边形的边长/2）.第三个出现位置的起始点坐标是：（六边形的高*2，（六边形的边长/2）*3）.第四个出现位置的起始点坐标是：（（六边形的高/2）*3，六边形边长*3）.第五个出现位置的起始点坐标是：（六边形的高/2，六边形边长*3）.第六个出现位置的起始点坐标是：（0，（六边形的边长/2）*3）.第七个出现位置的起始点坐标是：（六边形的高，（六边形的边长/2）*3）.其他点的计算就不一一列举了，都是很简单的数学计算。先讲动画：这里有一个动画，一种是显示的，一种隐藏的，但是隐藏的可以用显示的动画reverse（）来实现逆向动画。下面是动画代码：123456789101112mShowAni = ValueAnimator.ofFloat(0,1); mShowAni.setDuration(200); mShowAni.setInterpolator(new DecelerateInterpolator()); mShowAni.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()&#123; @Override public void onAnimationUpdate(ValueAnimator animation)&#123; float value = (float)animation.getAnimatedValue(); mScale = 0.5f+value/2; mPaint.setAlpha((int)(value*255)); invalidate();//更新 &#125; &#125;); 添加动画监听：123456789101112131415161718192021222324252627282930313233343536373839mShowAni.addListener(new Animator.AnimatorListener()&#123; @Override public void onAnimationStart(Animator animation)&#123; &#125; @Override public void onAnimationEnd(Animator animation)&#123; mShowAni.removeAllListeners(); mShowAni = null; initAni(); if(drawNum!=8) &#123; backDrawNum = 8;//赋值回退动画的位置 drawNum++;//正向动画的位置自增1 &#125; if(drawNum==8 &amp;&amp; backDrawNum!=0) &#123; //开始播放逆向动画 backDrawNum--; mShowAni.reverse(); &#125; else if(drawNum==8 &amp;&amp; backDrawNum==0) &#123; //逆向动画播放完毕，播放正向动画 drawNum = 1; &#125; invalidate(); &#125; @Override public void onAnimationCancel(Animator animation)&#123; &#125; @Override public void onAnimationRepeat(Animator animation)&#123; &#125; &#125;); 现在可以来看看绘画代码了（代码很简单，必要的地方我已经加上了注释）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105public void DrawSix(Canvas canvas,Paint paint,int mLength,float Xoffset,float Yoffset,float scale) &#123; Path mPath = new Path(); float height = (float)(Math.sqrt(3)*mLength); mPath.moveTo(Xoffset,Yoffset+mLength/2);//初始点 mPath.lineTo(Xoffset+height/2,Yoffset); mPath.lineTo(Xoffset+height,Yoffset+mLength/2); mPath.lineTo(Xoffset+height,Yoffset+(mLength/2)*3); mPath.lineTo(Xoffset+height/2,Yoffset+mLength*2); mPath.lineTo(Xoffset,Yoffset+(mLength/2)*3); mPath.lineTo(Xoffset,Yoffset+mLength/2); mPath.close();//闭合路径 //Log.i(\"动画里\",\"mScale:\"+mScale); if(scale!=-1) &#123;//防止动画重复播放 if(mShowAni != null &amp;&amp; ! mShowAni.isRunning()) &#123; mShowAni.start(); &#125; canvas.save(); canvas.scale(scale,scale,Xoffset + height / 2,Yoffset + mLength); canvas.drawPath(mPath,paint); canvas.restore(); &#125; else &#123; //==-1的时候不播放动画，不处理会导致画面闪动 canvas.save(); canvas.scale(1,1,Xoffset + height / 2,Yoffset + mLength); canvas.drawPath(mPath,paint); canvas.restore(); &#125; &#125; /** * 画守望六边形 * @param canvas * @param paint * @param mLength 半径 * @param Xoffset 偏移量 * @param Yoffset Y偏移量 * @param drawNum 绘画的位置 */ public void DrawOWSix(Canvas canvas,Paint paint,int mLength,float Xoffset,float Yoffset,int drawNum,int backNum) &#123; float height = (float)(Math.sqrt(3)*mLength); float XoffsetZero = Xoffset; float XoffsetOne = Xoffset+height/2; float YoffsetOne = Yoffset; float XoffsetTwo = Xoffset+(height/2)*3; float XoffsetThree = Xoffset+height*2; float YoffsetTwo = Yoffset+(mLength/2)*3; float YoffsetThree = Xoffset+mLength*3; float XoffsetCenter = Xoffset+height; Paint defaultPaint = paint;//用来绘制已经播放完成动画的六边形 paint.setAlpha(255); if(drawNum==8) &#123; drawNum = backNum; &#125; //画六边形，里面的-1赋值是用来让动画不再播放的 switch(drawNum) &#123; case 1: DrawSix(canvas,paint,mLength,XoffsetOne,YoffsetOne,mScale); break; case 2: DrawSix(canvas,defaultPaint,mLength,XoffsetOne,YoffsetOne,-1); DrawSix(canvas,paint,mLength,XoffsetTwo + 3,YoffsetOne,mScale); break; case 3: DrawSix(canvas,defaultPaint,mLength,XoffsetOne,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 3,YoffsetOne,-1); DrawSix(canvas,paint,mLength,XoffsetThree + 6,YoffsetTwo + 3,mScale); break; case 4: DrawSix(canvas,defaultPaint,mLength,XoffsetOne,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 3,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetThree + 6,YoffsetTwo + 3,-1); DrawSix(canvas,paint,mLength,XoffsetTwo + 6,YoffsetThree + 6,mScale); break; case 5: DrawSix(canvas,defaultPaint,mLength,XoffsetOne,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 3,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetThree + 6,YoffsetTwo + 3,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 6,YoffsetThree + 6,-1); DrawSix(canvas,paint,mLength,XoffsetOne + 3,YoffsetThree + 6,mScale); break; case 6: DrawSix(canvas,defaultPaint,mLength,XoffsetOne,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 3,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetThree + 6,YoffsetTwo + 3,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 6,YoffsetThree + 6,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetOne + 3,YoffsetThree + 6,-1); DrawSix(canvas,paint,mLength,XoffsetZero,YoffsetTwo + 3,mScale); break; case 7: DrawSix(canvas,defaultPaint,mLength,XoffsetOne,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 3,YoffsetOne,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetThree + 6,YoffsetTwo + 3,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetTwo + 6,YoffsetThree + 6,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetOne + 3,YoffsetThree + 6,-1); DrawSix(canvas,defaultPaint,mLength,XoffsetZero,YoffsetTwo + 3,-1); DrawSix(canvas,paint,mLength,XoffsetCenter + 3,YoffsetTwo + 3,mScale); break; default: break; &#125; &#125; 接下来就要实现ondraw（）方法了：123456@Override protected void onDraw(Canvas canvas)&#123; super.onDraw(canvas); this.canvas = canvas; DrawOWSix(this.canvas,mPaint,mLength,XOffset,YOffset,drawNum,backDrawNum); &#125; 实现构造方法（在这里对画笔，绘画大小，动画等进行初始化）：1234567891011121314151617181920212223242526272829public DrawStar(Context context,AttributeSet attrs)&#123; super(context,attrs); final TypedArray array = context.getTheme().obtainStyledAttributes(attrs,R.styleable.OverWatchLoadingView, 0, 0); mColor = array.getColor(R.styleable.OverWatchLoadingView_view_color, Color.parseColor(\"#FFCC00\")); array.recycle(); mPaint = new Paint(); mPaint.setAntiAlias(true); mPaint.setAlpha(0); mPaint.setColor(mColor); View = this; mScale = 0; initAni(); &#125; public DrawStar(Context context,AttributeSet attrs,int defStyleAttr,Paint mPaint)&#123; super(context,attrs,defStyleAttr); this.mPaint = mPaint; View = this; mScale = 0; initAni(); &#125; public DrawStar(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes,Paint mPaint)&#123; super(context,attrs,defStyleAttr,defStyleRes); this.mPaint = mPaint; View = this; mScale = 0; initAni(); &#125; 当然，我们需要外部可以控制这些动画的播放，加上几个方法应该就可以了（并没有测试）。123456789101112public void pauseLoading() &#123; mShowAni.pause(); &#125; public void continueLoading() &#123; mShowAni.start(); &#125; public void cancelLoading() &#123; mShowAni.cancel(); &#125; 源码传送门（传送门）","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 自定义View","slug":"Android/Android-自定义View","permalink":"http://WinterSmileSB101.online/categories/Android/Android-自定义View/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"自定义 View","slug":"自定义-View","permalink":"http://WinterSmileSB101.online/tags/自定义-View/"},{"name":"守望先锋","slug":"守望先锋","permalink":"http://WinterSmileSB101.online/tags/守望先锋/"},{"name":"OverWatch","slug":"OverWatch","permalink":"http://WinterSmileSB101.online/tags/OverWatch/"}]},{"title":"新闻接口（2016-11-15更新）","slug":"新闻接口（2016-11-15更新）","date":"2017-03-22T08:09:03.000Z","updated":"2017-03-29T02:28:37.000Z","comments":true,"path":"2017/03/22/新闻接口（2016-11-15更新）/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/新闻接口（2016-11-15更新）/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 最近做一款新闻app于是用到了一些新闻接口1.聚合数据：https://www.juhe.cn/--基本推送的是一些骚新闻，假的不行。。。2.易源数据：http://apistore.baidu.com/apiworks/servicedetail/688.html--这个没有看过，不过里面分类比较多，频道也比较多，返回内容比较多，更新也比较快，从开发者做一个新闻app来说，完全够用了。3.天行数据：http://www.tianapi.com/--个人觉得这个比较没用，完全开发自娱自乐还行，100000次调用限制在哪里摆着呢，不过也不知道内容怎么样，可以尝试，如果内容很好，也可以用来做上线app","categories":[{"name":"开源","slug":"开源","permalink":"http://WinterSmileSB101.online/categories/开源/"},{"name":"接口（开放 Api ）","slug":"开源/接口（开放-Api-）","permalink":"http://WinterSmileSB101.online/categories/开源/接口（开放-Api-）/"}],"tags":[{"name":"接口","slug":"接口","permalink":"http://WinterSmileSB101.online/tags/接口/"},{"name":"新闻","slug":"新闻","permalink":"http://WinterSmileSB101.online/tags/新闻/"},{"name":"免费","slug":"免费","permalink":"http://WinterSmileSB101.online/tags/免费/"}]},{"title":"Jsp显示集合元素方式","slug":"Jsp显示集合元素方式","date":"2017-03-22T08:00:38.000Z","updated":"2017-03-22T08:07:34.444Z","comments":true,"path":"2017/03/22/Jsp显示集合元素方式/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Jsp显示集合元素方式/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 最近遇到一个显示集合的问题，在这里记录一下：1234567&lt;% List&lt;String&gt; str_list = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; str_list.size(); i++)&#123;//对上一个&lt;%%&gt;进行封闭，以方便下面的显示 %&gt; &lt;p&gt;&lt;%=str_list.get(i) %&gt;&lt;/p&gt; &lt;% &#125; %&gt; 比如我们在servlet中传递了一个customerS的ArrayList过来，想要遍历显示的话：123456789101112131415161718&lt;% ArrayList&lt;Customer&gt; al = (ArrayList&lt;Customer&gt;)request.getAttribute(\"customerS\"); System.out.println(\"al大小：\"+al.size()); for(Customer c:al) &#123; //在这里设置c的值 pageContext.setAttribute(\"c\",c); //这里对&lt;%进行关闭，用于插入表格显示数据 %&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;顾客号：&lt;/td&gt;&lt;td&gt;$&#123;c.cust_id&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;顾客名称：&lt;/td&gt;&lt;td&gt;$&#123;c.cname&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;顾客邮编：&lt;/td&gt;&lt;td&gt;$&#123;c.email&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;顾客余额：&lt;/td&gt;&lt;td&gt;$&#123;c.balance&#125;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;% &#125; %&gt; 注意：前面需要加上相关包的引用（引用方式传送门）。","categories":[{"name":"WEB","slug":"WEB","permalink":"http://WinterSmileSB101.online/categories/WEB/"},{"name":"JSP","slug":"WEB/JSP","permalink":"http://WinterSmileSB101.online/categories/WEB/JSP/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://WinterSmileSB101.online/tags/Web/"},{"name":"JSP","slug":"JSP","permalink":"http://WinterSmileSB101.online/tags/JSP/"},{"name":"显示集合元素","slug":"显示集合元素","permalink":"http://WinterSmileSB101.online/tags/显示集合元素/"},{"name":"遍历","slug":"遍历","permalink":"http://WinterSmileSB101.online/tags/遍历/"}]},{"title":"JSP中使用 <% %> 的时候进行引用jar包的方法","slug":"JSP进行引用jar包的方法","date":"2017-03-22T07:55:50.000Z","updated":"2017-03-22T07:58:22.139Z","comments":true,"path":"2017/03/22/JSP进行引用jar包的方法/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/JSP进行引用jar包的方法/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 仅仅作为一个记录，方便许久不用的快速查询引用方法：1&lt;%@page import=\"填写与在Java中一样的引用地址\"%&gt; 比如在java中引用java.util.ArrayList的方式是123import java.util.ArrayList;则在这里我们的引用方式是：&lt;%@page import = \"java.util.ArrayList\" %&gt;","categories":[{"name":"WEB","slug":"WEB","permalink":"http://WinterSmileSB101.online/categories/WEB/"},{"name":"JSP","slug":"WEB/JSP","permalink":"http://WinterSmileSB101.online/categories/WEB/JSP/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://WinterSmileSB101.online/tags/Web/"},{"name":"JSP","slug":"JSP","permalink":"http://WinterSmileSB101.online/tags/JSP/"},{"name":"引入Jar包","slug":"引入Jar包","permalink":"http://WinterSmileSB101.online/tags/引入Jar包/"}]},{"title":"使用LayoutInflater装载布局或者setContentView装载布局的时候出现OOM（内存溢出）的解决办法","slug":"使用LayoutInflater装载布局或者setContentView装载布局的时候出现OOM（内存溢出）的解决办法","date":"2017-03-22T07:49:35.000Z","updated":"2017-03-22T07:53:51.904Z","comments":true,"path":"2017/03/22/使用LayoutInflater装载布局或者setContentView装载布局的时候出现OOM（内存溢出）的解决办法/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/使用LayoutInflater装载布局或者setContentView装载布局的时候出现OOM（内存溢出）的解决办法/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 起因：今天写一个视频图片信息展示页面的时候，在recyclerView中添加条目中，使用1View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.file_item,parent,false); 但是一运行就提示如下错误 接下来的错误信息我就不提供了，没什么实际作用，从前面的指向来看，就是： 1View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.file_item,parent,false); 这句语句所带来的问题，但是这句语句是正确的，所以唯一能有问题的就是布局文件。*经过测试，锁定了问题的症结：布局中使用的图片分辨率太大了！由于是在网上找的图标素材，故每个都是超过15001500以上的分辨率，而我这里同时使用了4个这样的控件来提供用户操作。这就是导致OOM的问题所在。解决方法：既然找到了问题所在，那么就可以想办法解决，这里我提供两种思路：1.使用低分辨率的图片（建议使用）。2.使用Glide或者其他开源图片加载库使用代码控制图片的载入（但是这样会加重代码量，而且用户体验也不一定好，不建议使用）。我这里使用的就是第一种思路，第二种没有测试过，应该是可行的，但是在用户体验和代码量上，应该会有问题。那么问题又来了，怎么降低图片分辨率？**缩小图片大小方法","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实践","slug":"Android/Android-实践","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实践/"}],"tags":[{"name":"内存溢出","slug":"内存溢出","permalink":"http://WinterSmileSB101.online/tags/内存溢出/"},{"name":"OOM","slug":"OOM","permalink":"http://WinterSmileSB101.online/tags/OOM/"},{"name":"LayoutInflater","slug":"LayoutInflater","permalink":"http://WinterSmileSB101.online/tags/LayoutInflater/"},{"name":"setContentView","slug":"setContentView","permalink":"http://WinterSmileSB101.online/tags/setContentView/"}]},{"title":"解决在自定义AlertDialog中EditText无法弹出软键盘的问题","slug":"解决在自定义AlertDialog中EditText无法弹出软键盘的问题","date":"2017-03-22T07:45:49.000Z","updated":"2017-03-22T07:48:18.586Z","comments":true,"path":"2017/03/22/解决在自定义AlertDialog中EditText无法弹出软键盘的问题/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/解决在自定义AlertDialog中EditText无法弹出软键盘的问题/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 原因：今天做一个文件管理器的时候，在文件重命名上遇到了一个问题（准确的说是两个另外一个与本文无关，就不多提）—在弹出的AlertDialog中的EditText居然无法弹出软键盘，我这里需要输入你这是逗我？多番查询之后知道了原因：在setContentView（）方法之前就调用了show（）方法。所以没能够识别（或者是没有这么彻底，具体原因我也不解）。解决办法：在show之前，使用 LayoutInflat 来新建一个布局，然后通过setView（）方法，先把布局设置进去。后面的就不变。问题就此解决。12345678910111213alertDialog = new android.app.AlertDialog.Builder(context).create(); alertDialog.setCancelable(true); LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); LinearLayout layout = (LinearLayout)inflater.inflate(contentViewID, null); alertDialog.setView(layout); window = alertDialog.getWindow(); window.setContentView(contentViewID); alertDialog.show(); nameTextView = (EditText)window.findViewById(R.id.dialog_name); nameTextView.setText(name); this.name = name; surebtn = (Button)window.findViewById(R.id.dialog_sureBtn); canclebtn = (Button)window.findViewById(R.id.dialog_cancleBtn); 这里的LinearLayout是因为自定义的AlertDialog布局的根布局就是LinearLayout，所以，根布局是什么这里就应该用什么。下面效果图：","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实践","slug":"Android/Android-实践","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实践/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"AlertDialog","slug":"AlertDialog","permalink":"http://WinterSmileSB101.online/tags/AlertDialog/"},{"name":"EditText","slug":"EditText","permalink":"http://WinterSmileSB101.online/tags/EditText/"},{"name":"无法弹出软键盘","slug":"无法弹出软键盘","permalink":"http://WinterSmileSB101.online/tags/无法弹出软键盘/"}]},{"title":"Android利用Gson生成或解析json","slug":"Android利用Gson生成或解析json","date":"2017-03-22T07:33:27.000Z","updated":"2017-03-22T07:42:36.592Z","comments":true,"path":"2017/03/22/Android利用Gson生成或解析json/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Android利用Gson生成或解析json/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 一、单个对象生成json,生成以下类，该怎么生成呢？123456&#123; \"createDate\": \"2015-02-01 10:39:50\", \"id\": \"1\", \"name\": \"传说之美\", \"password\": \"123456\"&#125; 先定义一个account类,属性有id、name、password、createDate。1234567891011121314151617181920212223242526272829303132333435363738394041424344public class Account &#123; private String id; private String password; private String name; private String createDate; public Account() &#123; super(); &#125; public Account(String id, String password, String name, String createDate) &#123; super(); this.id = id; this.password = password; this.name = name; this.createDate = createDate; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getCreateDate() &#123; return createDate; &#125; public void setCreateDate(String createDate) &#123; this.createDate = createDate; &#125; @Override public String toString() &#123; return \"Account [id=\" + id + \", password=\" + password + \", name=\" + name + \", createDate=\" + createDate + \"]\\n\\n\"; &#125;&#125; 定义好这个类，就可以利用Gson生成json字符串了。12345678// 生成account对象SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");Account account = new Account(\"1\", \"123456\", \"传说之美\", sdf.format(new Date()));// 利用gson对象生成json字符串Gson gson = new Gson();String jsonString = gson.toJson(account); Log.i(\"\", jsonString); 二、解析json字符串为单个对象,在上面已生成了jsonString，那如何将其解析为单个对象，很简单。123// 利用gson解析json字符串为单个对象Account account1 = gson.fromJson(jsonString, Account.class);Log.i(\"\", account1.toString()); 三、生成单个对象的json数组,什么是json数组，类似下面的1234567891011121314[ &#123; \"id\": \"2\", \"createDate\": \"2015-02-01 11:21:27\", \"password\": \"123456\", \"name\": \"传说\" &#125;, &#123; \"id\": \"2\", \"createDate\": \"2015-02-01 11:21:27\", \"password\": \"123456\", \"name\": \"之美\" &#125;] 生成json数组代码如下12345678910111213141516171819Account account2 = new Account(\"2\", \"123456\", \"传说\", sdf.format(new Date()));Account account3 = new Account(\"2\", \"123456\", \"之美\", sdf.format(new Date()));List&lt;Account&gt; accountList = new ArrayList&lt;Account&gt;();accountList.add(account2);accountList.add(account3);JSONArray accountArray = new JSONArray();for (int i = 0; i &lt; accountList.size(); i++) &#123; String accountStr = gson.toJson(accountList.get(i)); JSONObject accountObject; try &#123; accountObject = new JSONObject(accountStr); accountArray.put(i, accountObject); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125;&#125;Log.i(\"\", accountArray.toString()); 四、由多个单个对象的json数组解析为对个单个对象,多个单个对象组成的json数组解析如下123456789101112131415// 解析json数组List&lt;Account&gt; accountList2 = new ArrayList&lt;Account&gt;();for(int i=0;i&lt;accountArray.length(); i++)&#123; JSONObject jsonObject = null; try &#123; jsonObject = accountArray.getJSONObject(i); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; if(jsonObject != null)&#123; Account tempAccount = gson.fromJson(jsonObject.toString(), Account.class); accountList2.add(tempAccount); &#125;&#125;Log.i(\"accountList2\", accountList2.toString()); 或者用更快捷的转化方法12345678910Account[] accountArrays = new Gson().fromJson(accountArray.toString(), Account[].class);for(int i=0;i&lt;accountArrays.length;i++)&#123; Log.i(\"accountArrays\",accountArrays[i].toString());&#125;// 转化为ListList&lt;Account&gt; foosList = Arrays.asList(accountArrays);// 更快捷地解析成ListType listType = new TypeToken&lt;ArrayList&lt;Account&gt;&gt;()&#123;&#125;.getType();ArrayList&lt;Account&gt; accsList = new Gson().fromJson(accountArray.toString(), listType);Log.i(\"accsList\",accsList.toString()); 五、生成一个对象嵌套对象的json,嵌套的json类似如下12345678910&#123; \"member\": &#123; \"id\": \"4\", \"name\": \"我是传说\" &#125;, \"id\": \"4\", \"createDate\": \"2015-02-02 12:03:32\", \"password\": \"888888\", \"name\": \"传说之美\"&#125; 生成这个json有2种方法。1、再添加一个member类，像添加account类一样添加即可。12345678910111213141516171819202122232425262728public class Member &#123; private String id; private String name; public Member() &#123; super(); &#125; public Member(String id, String name) &#123; super(); this.id = id; this.name = name; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return \"Member [id=\" + id + \", name=\" + name + \"]\\n\\n\"; &#125;&#125; 生成代码如下1234567891011121314// 生成对象嵌套对象的jsonAccount account4 = new Account(\"4\", \"888888\", \"传说之美\", sdf.format(new Date()));Member member = new Member(\"4\", \"我是传说\");String accountStr = gson.toJson(account4);String memberStr = gson.toJson(member);JSONObject object = null;try &#123; JSONObject memberObject = new JSONObject(memberStr); object = new JSONObject(accountStr); object.put(\"member\", memberObject); &#125; catch (JSONException e) &#123; e.printStackTrace();&#125;Log.i(\"\", object.toString()); 六、解析对象嵌套对象的json12345678910111213141516Account account5 = gson.fromJson(object.toString(), Account.class);Log.i(\"解析对象嵌套对象的json\", account5.toString());// 这里用isNull来判断是否存在这个object，存在就拿出member的JSONObjectJSONObject memberObject = null;if(!object.isNull(\"member\"))&#123; try &#123; memberObject = object.getJSONObject(\"member\"); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125;&#125;Member member5 = null;if(null != memberObject)&#123; member5 = gson.fromJson(memberObject.toString(), Member.class); Log.i(\"解析对象嵌套对象的json\", member5.toString());&#125; 7、另外一种解析对象嵌套对象的json,定义一个类1234567891011121314151617181920public class AccountObject &#123; private String id; private String password; private String name; private String createDate; private MemberObject memberObject = new MemberObject(); public class MemberObject &#123; private String id; private String name; @Override public String toString() &#123; return \"MemberObject [id=\" + id + \", name=\" + name+ \"]\\n\\n\"; &#125; &#125; @Override public String toString() &#123; return \"AccountObject [id=\" + id + \", password=\" + password + \", name=\" + name + \", createDate=\" + createDate + \",\"+ memberObject.toString() + \"]\\n\\n\"; &#125;&#125; 生成json并解析123456789try &#123; JSONObject mObject = new JSONObject(memberStr); object = new JSONObject(accountStr); object.put(\"memberObject\", mObject); &#125; catch (JSONException e) &#123; e.printStackTrace();&#125;AccountObject accountObject = gson.fromJson(object.toString(), AccountObject.class);Log.i(\"accountObject\", accountObject.toString());","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"Gson","slug":"Gson","permalink":"http://WinterSmileSB101.online/tags/Gson/"},{"name":"Json","slug":"Json","permalink":"http://WinterSmileSB101.online/tags/Json/"}]},{"title":"17开年第一篇Activity之间传递 List<T> 以及 T 对象类型数据的方法","slug":"17开年第一篇活动传递对象","date":"2017-03-22T07:25:09.000Z","updated":"2017-03-22T07:31:03.889Z","comments":true,"path":"2017/03/22/17开年第一篇活动传递对象/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/17开年第一篇活动传递对象/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 现在转眼都十三了，大家都工作了，自己确还没有在家里闲得慌于是就做个App，谁知道就遇到了Activity间传递实例以及List数据的问题。网上同类型的文章很多，我写只是为了做个笔记预防忘记（其他的我觉得进入不了状态，还是自己的思维好理解一些）。废话不多说下面正题。要实现上面的需求有几种方式：1.定义全局静态变量，由一个静态变量集合类管理，至于安全方面，可以把控访问方式，比如验证访问，不过相对来说感觉比较麻烦。2. Application中设置一个属性，公开读取。3.使用Serializable序列化我们需要传递的数据，再通过Intent的putExtra(name,value);方法添加到Intent中，再接收活动中使用Intent的getSerializableExtra(name);方法获取到相对应数据。下面我们就试试第三种：直接上代码（需要传递的数据的类定义需要修改，让他有Serializable接口，才能实现数据的序列化）package winter.zxb.smilesb101.easysyrinx.Data.SyrinxInfo; import java.io.Serializable; import java.util.ArrayList; /** * 项目名称：EasySyrinx * 类描述：希芸物品信息类，接口后面的是关键我们需要这个接口才能让数据序列化 * 创建人：SmileSB101 * 创建时间：2017/2/1 0001 22:29 * 修改人：Administrator * 修改时间：2017/2/1 0001 22:29 * 修改备注： */ public class SyrinxItem implements Serializable&#123; /** * 用于进行键值对封装时作为键 */ public final static String NAME_STRING = \"name\"; public final static String CODE_STRING = \"code\"; public final static String KIND_STRING = \"kind\"; public final static String SERIES_STRING = \"series\"; public final static String IN_PRICE_STRING = \"in_price\"; public final static String OUT_PRICE_STRING = \"out_price\"; public final static String INTRODUCE_STRING = \"introduce\"; public final static String TAGLIST_STRING = \"tagList\"; public final static String FREEPOST_STRING = \"freePost\"; private String name; private String code; private String kind; private String format; private String series; private float in_price; private float out_price; private String introduce; private ArrayList&lt;String&gt; tagList; private boolean freePost; public SyrinxItem()&#123; this.tagList = new ArrayList&lt;&gt;(); this.in_price = 0; this.out_price = 0; freePost = false; &#125; /** * 全参数构造方法 * @param code 商品编号 * @param name 商品名称 * @param kind 商品种类 * @param format 商品规格 * @param series 商品系列 * @param in_price 商品 * @param out_price 卖价 * @param introduce 介绍 * @param tagList 标签列表 * @param freePost 包邮 */ public SyrinxItem(String code,String name,String kind,String format,String series,float in_price,float out_price,String introduce,ArrayList&lt;String&gt; tagList,boolean freePost)&#123; this.code = code; this.name = name; this.kind = kind; this.format = format; this.series = series; this.in_price = in_price; this.out_price = out_price; this.introduce = introduce; this.tagList = tagList; this.freePost = freePost; &#125; public String getFormat()&#123; return format; &#125; public void setFormat(String format)&#123; this.format = format; &#125; /** * 获取是否包邮 * @return */ public String isFreePost()&#123; return freePost?\"包邮\":\"不包邮\"; &#125; /** * 设置是否包邮 * @param freePost */ public void setFreePost(boolean freePost)&#123; this.freePost = freePost; &#125; /** * 获取系列名称 * @return */ public String getSeries()&#123; return series; &#125; /** * 设置系列名称 * @param series */ public void setSeries(String series)&#123; this.series = series; &#125; /** * 获取类型（商品颜色或者分类等） * @return */ public String getKind()&#123; return kind; &#125; /** * 设置类型（商品颜色或者分类等） * @param kind */ public void setKind(String kind)&#123; this.kind = kind; &#125; /** * 获取卖出价格 * @return */ public float getOut_price()&#123; return out_price; &#125; /** * 设置卖出价格 * @param out_price */ public void setOut_price(float out_price)&#123; this.out_price = out_price; &#125; /** * 获取物品名称 * @return 物品名称 */ public String getName()&#123; return name; &#125; /** * 设置物品名称 * @param name 物品民称 */ public void setName(String name)&#123; this.name = name; &#125; /** * 获取商品编号 * @return 商品编号 */ public String getCode()&#123; return code; &#125; /** * 设置商品编号 * @param code */ public void setCode(String code)&#123; this.code = code; &#125; /** * 获取商品进价 * @return */ public float getIn_price()&#123; return in_price; &#125; /** * 设置商品进价 * @param in_price */ public void setIn_price(float in_price)&#123; this.in_price = in_price; &#125; /** * 获取商品介绍 * @return */ public String getIntroduce()&#123; return introduce; &#125; /** * 设置商品介绍 * @param introduce */ public void setIntroduce(String introduce)&#123; this.introduce = introduce; &#125; /** * 获取商品标签（特性） * @return */ public ArrayList&lt;String&gt; getTagList()&#123; return tagList; &#125; /** * 设置商品特性 * @param tagList */ public void setTagList(ArrayList&lt;String&gt; tagList)&#123; this.tagList = tagList; &#125; /** * 设置商品特性 * @param tag */ public void setTagList(String tag) &#123; this.tagList.add(tag); &#125; /** * 获取此实例的json字符串 * @return */ public String ToJsonString() &#123; return \"Syrinx [\"+NAME_STRING+\"=\"+getName()+\",\" +CODE_STRING+\"=\"+getCode()+\",\" +KIND_STRING+\"=\"+getKind()+\",\" +SERIES_STRING+\"=\"+getSeries()+\",\" +IN_PRICE_STRING+\"=\"+getIn_price()+\",\" +OUT_PRICE_STRING+\"=\"+getOut_price()+\",\" +INTRODUCE_STRING+\"=\"+getIntroduce()+\",\" +TAGLIST_STRING+\"=\"+getTagList()+\",\" +freePost+\"=\"+isFreePost()+\"]\"; &#125; &#125; 上一个活动中,在这里list是ArrayList();当然里面存储了数据。series是另外一个序列化的单个对象。1234Intent intent = new Intent(activity,SyrinxItemRecycleViewActivity.class); intent.putExtra(SyrinxItemRecycleViewActivity.SYRINXLIST_VALUE,list); intent.putExtra(SyrinxItemRecycleViewActivity.SYRINXSERIES_VALUE,series); activity.startActivity(intent); 接收的活动中,使用getIntet();获取到Intent，然后通过Intent中的getSerializableExtra(name);方法来获取到数据，注意强制类型转换。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package winter.zxb.smilesb101.easysyrinx.UI.Activity; import android.content.Context; import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.util.Log; import android.view.View; import java.util.ArrayList; import winter.zxb.smilesb101.easysyrinx.Data.SyrinxInfo.SyrinxItem; import winter.zxb.smilesb101.easysyrinx.Data.SyrinxInfo.SyrinxItemRecycleViewAdapter; import winter.zxb.smilesb101.easysyrinx.Data.SyrinxInfo.SyrinxSeries; import winter.zxb.smilesb101.easysyrinx.R; /** * 希芸产品信息的展示活动 */ public class SyrinxItemRecycleViewActivity extends AppCompatActivity&#123; public final static String SYRINXLIST_VALUE = \"SYRINXLIST\"; public final static String SYRINXSERIES_VALUE = \"SYRINXSERIES\"; private final static String TAG = \"SyrinxItemActivity\"; private View rootView; private RecyclerView recyclerView; private Context context; private SyrinxItemRecycleViewAdapter itemRecycleViewAdapter; private SyrinxSeries syrinxSeries; private ArrayList&lt;SyrinxItem&gt; syrinxItems; @Override protected void onCreate(Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); setContentView(R.layout.syrinxitem_recycleview_layout); Intent intent = getIntent(); syrinxItems = (ArrayList&lt;SyrinxItem&gt;)intent.getSerializableExtra(SYRINXLIST_VALUE); syrinxSeries = (SyrinxSeries)intent.getSerializableExtra(SYRINXSERIES_VALUE); recyclerView = (RecyclerView)findViewById(R.id.syrinxitem_layout_recycleView); LinearLayoutManager layoutmanager = new LinearLayoutManager(this); recyclerView.setLayoutManager(layoutmanager); itemRecycleViewAdapter = new SyrinxItemRecycleViewAdapter(syrinxItems,this); recyclerView.setAdapter(itemRecycleViewAdapter); Log.i(TAG,\"onCreate: huodongchuangjian\"); &#125; &#125; 下面上效果图,主活动中：（点击任意一个item进入下个活动） 接收活动中：可以看到成功的接收到了来自上一个活动的List以及单个对象的数据 总结：我们想要传递List或者某个实例对象数据很简单，只需要那个需要传递的实例定义时有接口Serializable，以及取数据的时候使用getSerializableExtra(name);方法就可以了。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实践","slug":"Android/Android-实践","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实践/"}],"tags":[{"name":"Activity","slug":"Activity","permalink":"http://WinterSmileSB101.online/tags/Activity/"},{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"活动传递对象","slug":"活动传递对象","permalink":"http://WinterSmileSB101.online/tags/活动传递对象/"},{"name":"活动传递 List","slug":"活动传递-List","permalink":"http://WinterSmileSB101.online/tags/活动传递-List/"}]},{"title":"Android 拿来就用的圆形图片控件","slug":"拿来就用的圆形图片控件","date":"2017-03-22T07:20:37.000Z","updated":"2017-03-22T07:23:51.536Z","comments":true,"path":"2017/03/22/拿来就用的圆形图片控件/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/拿来就用的圆形图片控件/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 代码如下package winter.zxb.smilesb101.easysyrinx.UI.SelfView; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Bitmap; import android.graphics.BitmapShader; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Matrix; import android.graphics.Paint; import android.graphics.RectF; import android.graphics.Shader; import android.graphics.drawable.BitmapDrawable; import android.graphics.drawable.ColorDrawable; import android.graphics.drawable.Drawable; import android.util.AttributeSet; import android.widget.ImageView; import winter.zxb.smilesb101.easysyrinx.R; /** * Created by Administrator on 2016/6/30. */ public class RoundImageView extends ImageView&#123; private static final ScaleType SCALE_TYPE = ScaleType.CENTER_CROP; private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888; private static final int COLORDRAWABLE_DIMENSION = 1; private static final int DEFAULT_BORDER_WIDTH = 0; private static final int DEFAULT_BORDER_COLOR = Color.BLACK; private final RectF mDrawableRect = new RectF(); private final RectF mBorderRect = new RectF(); private final Matrix mShaderMatrix = new Matrix(); private final Paint mBitmapPaint = new Paint(); private final Paint mBorderPaint = new Paint(); private int mBorderColor = DEFAULT_BORDER_COLOR; private int mBorderWidth = DEFAULT_BORDER_WIDTH; private Bitmap mBitmap; private BitmapShader mBitmapShader; private int mBitmapWidth; private int mBitmapHeight; private float mDrawableRadius; private float mBorderRadius; private boolean mReady; private boolean mSetupPending; public RoundImageView(Context context)&#123; super(context); &#125; public RoundImageView(Context context,AttributeSet attrs)&#123; this(context,attrs,0); &#125; public RoundImageView(Context context,AttributeSet attrs,int defStyle)&#123; super(context,attrs,defStyle); super.setScaleType(SCALE_TYPE); TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleImageView, defStyle, 0); mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_border_width, DEFAULT_BORDER_WIDTH); mBorderColor = a.getColor(R.styleable.CircleImageView_border_color, DEFAULT_BORDER_COLOR); a.recycle(); mReady = true; if (mSetupPending) &#123; setup(); mSetupPending = false; &#125; &#125; @Override public ScaleType getScaleType() &#123; return SCALE_TYPE; &#125; @Override public void setScaleType(ScaleType scaleType) &#123; if (scaleType != SCALE_TYPE) &#123; throw new IllegalArgumentException(String.format(\"ScaleType %s not supported.\", scaleType)); &#125; &#125; @Override protected void onDraw(Canvas canvas) &#123; if (getDrawable() == null) &#123; return; &#125; canvas.drawCircle(getWidth() / 2, getHeight() / 2, mDrawableRadius, mBitmapPaint); canvas.drawCircle(getWidth() / 2, getHeight() / 2, mBorderRadius, mBorderPaint); &#125; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); setup(); &#125; public int getBorderColor() &#123; return mBorderColor; &#125; public void setBorderColor(int borderColor) &#123; if (borderColor == mBorderColor) &#123; return; &#125; mBorderColor = borderColor; mBorderPaint.setColor(mBorderColor); invalidate(); &#125; public int getBorderWidth() &#123; return mBorderWidth; &#125; public void setBorderWidth(int borderWidth) &#123; if (borderWidth == mBorderWidth) &#123; return; &#125; mBorderWidth = borderWidth; setup(); &#125; @Override public void setImageBitmap(Bitmap bm) &#123; super.setImageBitmap(bm); mBitmap = bm; setup(); &#125; @Override public void setImageDrawable(Drawable drawable) &#123; super.setImageDrawable(drawable); mBitmap = getBitmapFromDrawable(drawable); setup(); &#125; @Override public void setImageResource(int resId) &#123; super.setImageResource(resId); mBitmap = getBitmapFromDrawable(getDrawable()); setup(); &#125; private Bitmap getBitmapFromDrawable(Drawable drawable) &#123; if (drawable == null) &#123; return null; &#125; if (drawable instanceof BitmapDrawable) &#123; return ((BitmapDrawable) drawable).getBitmap(); &#125; try &#123; Bitmap bitmap; if (drawable instanceof ColorDrawable) &#123; bitmap = Bitmap.createBitmap(COLORDRAWABLE_DIMENSION, COLORDRAWABLE_DIMENSION, BITMAP_CONFIG); &#125; else &#123; bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), BITMAP_CONFIG); &#125; Canvas canvas = new Canvas(bitmap); drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight()); drawable.draw(canvas); return bitmap; &#125; catch (OutOfMemoryError e) &#123; return null; &#125; &#125; private void setup() &#123; if (!mReady) &#123; mSetupPending = true; return; &#125; if (mBitmap == null) &#123; return; &#125; mBitmapShader = new BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP); mBitmapPaint.setAntiAlias(true); mBitmapPaint.setShader(mBitmapShader); mBorderPaint.setStyle(Paint.Style.STROKE); mBorderPaint.setAntiAlias(true); mBorderPaint.setColor(mBorderColor); mBorderPaint.setStrokeWidth(mBorderWidth); mBitmapHeight = mBitmap.getHeight(); mBitmapWidth = mBitmap.getWidth(); mBorderRect.set(0, 0, getWidth(), getHeight()); mBorderRadius = Math.min((mBorderRect.height() - mBorderWidth) / 2, (mBorderRect.width() - mBorderWidth) / 2); mDrawableRect.set(mBorderWidth, mBorderWidth, mBorderRect.width() - mBorderWidth, mBorderRect.height() - mBorderWidth); mDrawableRadius = Math.min(mDrawableRect.height() / 2, mDrawableRect.width() / 2); updateShaderMatrix(); invalidate(); &#125; private void updateShaderMatrix() &#123; float scale; float dx = 0; float dy = 0; mShaderMatrix.set(null); if (mBitmapWidth * mDrawableRect.height() &gt; mDrawableRect.width() * mBitmapHeight) &#123; scale = mDrawableRect.height() / (float) mBitmapHeight; dx = (mDrawableRect.width() - mBitmapWidth * scale) * 0.5f; &#125; else &#123; scale = mDrawableRect.width() / (float) mBitmapWidth; dy = (mDrawableRect.height() - mBitmapHeight * scale) * 0.5f; &#125; mShaderMatrix.setScale(scale, scale); mShaderMatrix.postTranslate((int) (dx + 0.5f) + mBorderWidth, (int) (dy + 0.5f) + mBorderWidth); mBitmapShader.setLocalMatrix(mShaderMatrix); &#125; &#125; 那么，别急，现在直接使用是会报错的，我们需要在values文件夹里新建attrs.xml，并且增加以下代码12345678910&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;resources&gt; &lt;declare-styleable name=\"CircleImageView\"&gt; &lt;attr name=\"border_width\" format=\"dimension\"/&gt; &lt;attr name=\"border_color\" format=\"color\"/&gt; &lt;/declare-styleable&gt; &lt;/resources&gt; 就大功告成。使用方法是直接像是用ImageView一样使用就可以了","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"圆形图片控件","slug":"圆形图片控件","permalink":"http://WinterSmileSB101.online/tags/圆形图片控件/"}]},{"title":"如何监听CollapsingToolbarLayout的展开与折叠","slug":"如何监听CollapsingToolbarLayout的展开与折叠","date":"2017-03-22T07:15:47.000Z","updated":"2017-03-22T08:07:23.198Z","comments":true,"path":"2017/03/22/如何监听CollapsingToolbarLayout的展开与折叠/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/如何监听CollapsingToolbarLayout的展开与折叠/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 使用官方提供的 AppBarLayout.OnOffsetChangedListener就能实现了，不过要封装一下才好用。自定义一个继承了 AppBarLayout.OnOffsetChangedListener的类，这里命名为AppBarStateChangeListener：1234567891011121314151617181920212223242526272829303132public abstract class AppBarStateChangeListener implements AppBarLayout.OnOffsetChangedListener &#123; public enum State &#123; EXPANDED, COLLAPSED, IDLE &#125; private State mCurrentState = State.IDLE; @Override public final void onOffsetChanged(AppBarLayout appBarLayout, int i) &#123; if (i == 0) &#123; if (mCurrentState != State.EXPANDED) &#123; onStateChanged(appBarLayout, State.EXPANDED); &#125; mCurrentState = State.EXPANDED; &#125; else if (Math.abs(i) &gt;= appBarLayout.getTotalScrollRange()) &#123; if (mCurrentState != State.COLLAPSED) &#123; onStateChanged(appBarLayout, State.COLLAPSED); &#125; mCurrentState = State.COLLAPSED; &#125; else &#123; if (mCurrentState != State.IDLE) &#123; onStateChanged(appBarLayout, State.IDLE); &#125; mCurrentState = State.IDLE; &#125; &#125; public abstract void onStateChanged(AppBarLayout appBarLayout, State state); &#125; 然后这样使用它12345678910111213141516171819mAppBarLayout.addOnOffsetChangedListener(new AppBarStateChangeListener() &#123; @Override public void onStateChanged(AppBarLayout appBarLayout, State state) &#123; Log.d(\"STATE\", state.name()); if( state == State.EXPANDED ) &#123; //展开状态 &#125;else if(state == State.COLLAPSED)&#123; //折叠状态 &#125;else &#123; //中间状态 &#125; &#125; &#125;); 可能这并不是什么新鲜知识，但是我是第一次有这样的需求。很久以前开源了XRecyclerView，网友使用过程中提了很多issues，第一次体会到挖坑容易填坑难。上周开始我决定把这些issues一个个的解决，提高稳定性，并增加一些功能。此次就是为了解决issues/85 。XRecyclerView修复差不多之后，我做一个文档，放在网站首页。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"OnOffsetChangedListener","slug":"OnOffsetChangedListener","permalink":"http://WinterSmileSB101.online/tags/OnOffsetChangedListener/"},{"name":"CollapsingToolbarLayout","slug":"CollapsingToolbarLayout","permalink":"http://WinterSmileSB101.online/tags/CollapsingToolbarLayout/"},{"name":"展开与折叠","slug":"展开与折叠","permalink":"http://WinterSmileSB101.online/tags/展开与折叠/"},{"name":"AppBarLayout","slug":"AppBarLayout","permalink":"http://WinterSmileSB101.online/tags/AppBarLayout/"}]},{"title":"Python 类型比较的3种方式","slug":"python类型比较的3种方式","date":"2017-03-22T07:08:51.000Z","updated":"2017-04-09T03:47:08.000Z","comments":true,"path":"2017/03/22/python类型比较的3种方式/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/python类型比较的3种方式/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章。 python类型比较的3种方式通过types模块的类成员来判断，其实所有Python中的类型都是这个types模块中类型的实例。1234import types type(x) is types.IntType # 判断是否int 类型 type(x) is types.StringType #是否string类型 type(x) is types.InstanceType #是否是自定义的实例对象， isinstance函数不支持比较这个 通过已知类型比较，因为python中所有相同类型的对象他们所引用的类型都是同一个，所以可以通过如下的方式对比：12345type(x) == types(1) # 判断是否int 类型 type(x) == type('a') #是否string类型type(x) is types(1) # 判断是否int 类型 type(x) is type('a') #是否string类型 使用内建isinstance函数：Python可以得到一个对象的类型 ，利用type函数：123&gt;&gt;&gt;lst = [1, 2, 3]&gt;&gt;&gt;type(lst)&lt;type 'list'&gt; 同样可以利用isinstance函数，来判断一个对象是否是一个已知的类型。其第一个参数为对象，第二个为类型名或类型名的一个列表。其返回值为布尔型。若对象的类型与参数二的类型相同则返回True。若参数二为一个元组， 则若对象类型与元组中类型名之一相同即返回True。12&gt;&gt;&gt;isinstance(lst, list)True 12&gt;&gt;&gt;isinstance(lst, (int, str, list))True 参考资料： python核心编程","categories":[{"name":"Python","slug":"Python","permalink":"http://WinterSmileSB101.online/categories/Python/"}],"tags":[{"name":"Python 类型比较","slug":"Python-类型比较","permalink":"http://WinterSmileSB101.online/tags/Python-类型比较/"}]},{"title":"AppBarLayout.OnOffsetChangedListener的使用-监听AppBarLauout的滑动","slug":"AppBarLayout-OnOffsetChangedListener的使用-监听AppBarLauout的滑动","date":"2017-03-22T07:08:51.000Z","updated":"2017-03-22T07:15:04.307Z","comments":true,"path":"2017/03/22/AppBarLayout-OnOffsetChangedListener的使用-监听AppBarLauout的滑动/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/AppBarLayout-OnOffsetChangedListener的使用-监听AppBarLauout的滑动/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主转载文章，原文地址。 先看看官网对于AppBarLayout.OnOffsetChangedListener的解释：Interface definition for a callback to be invoked when an AppBarLayout’s vertical offset changes.当AppBarLayout垂直方向上的偏移量发生改变时，为触发一个回调方法定义的接口。触发的回调方法是：onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset)再来看看对于onOffsetChanged的解释：Called when the AppBarLayout’s layout offset has been changed. This allows child views to implement custom behavior based on the offset (for instance pinning a view at a certain y value).在AppBarLayout的布局偏移量发生改变时被调用。这个方法允许子view根据偏移量实现自定义的行为（比如在特定Y值的时候固定住一个View）。解释的非常清楚了，不过我们需要点例子才好理解。就以stackoverflow上的一个问题为例吧。http://stackoverflow.com/questions/30779667/android-collapsingtoolbarlayout-and-swiperefreshlayout/30785823#30785823问题描述当我把CollapsingToolbarLayout，CollapsingToolbarLayout以及SwipeRefreshLayout用在一起的时候：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/drawer_layout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\"&gt;&lt;android.support.design.widget.CoordinatorLayout android:id=\"@+id/coordinator_layout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\"&gt;&lt;android.support.design.widget.AppBarLayout android:id=\"@+id/appbar\" android:layout_width=\"match_parent\" android:layout_height=\"@dimen/collapse_toolbar_height\" android:fitsSystemWindows=\"true\" android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id=\"@+id/collapsing_toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:contentScrim=\"?attr/colorPrimary\" android:fitsSystemWindows=\"true\" app:expandedTitleMarginStart=\"48dp\" app:expandedTitleMarginEnd=\"64dp\" app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt; &lt;ImageView android:id=\"@+id/toolbar_image\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"centerCrop\" android:fitsSystemWindows=\"true\" app:layout_collapseMode=\"parallax\" /&gt; &lt;include layout=\"@layout/activity_main_toolbar\"/&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;&lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.SwipeRefreshLayout android:id=\"@+id/swipe_container\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt; &lt;cz.yetanotherview.webcamviewer.app.helper.EmptyRecyclerView android:id=\"@+id/mainList\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scrollbars=\"vertical\" /&gt; &lt;/android.support.v4.widget.SwipeRefreshLayout&gt; &lt;android.support.design.widget.FloatingActionButton android:id=\"@+id/floating_action_button\" android:layout_height=\"wrap_content\" android:layout_width=\"wrap_content\" app:layout_anchor=\"@id/appbar\" app:layout_anchorGravity=\"bottom|right|end\" android:layout_margin=\"16dp\" app:fabSize=\"mini\" android:src=\"@drawable/ic_action_edit\" android:onClick=\"assignSelectedWebCamsToCategory\"/&gt; &lt;com.github.clans.fab.FloatingActionMenu android:id=\"@+id/floating_action_menu\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:layout_gravity=\"bottom|end\" android:paddingRight=\"10dp\" android:paddingBottom=\"8dp\" android:paddingLeft=\"10dp\" fab:menu_shadowColor=\"#37000000\" fab:menu_colorNormal=\"#DA4336\" fab:menu_colorPressed=\"#E75043\" fab:menu_colorRipple=\"#99FFFFFF\" fab:menu_icon=\"@drawable/fab_add\" fab:menu_buttonSpacing=\"10dp\" fab:menu_labels_textColor=\"@color/very_dark_grey\" fab:menu_labels_textSize=\"14sp\" fab:menu_labels_colorNormal=\"@color/white\" fab:menu_labels_colorPressed=\"@color/next_grey\" fab:menu_labels_colorRipple=\"#99FFFFFF\" fab:menu_labels_margin=\"8dp\" fab:menu_backgroundColor=\"@color/black_transparent\"&gt; &lt;com.github.clans.fab.FloatingActionButton android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:src=\"@drawable/ic_action_content_import\" fab:fab_size=\"mini\" fab:fab_label=\"@string/pref_import_from_server\" fab:fab_colorNormal=\"@color/white\" app:fab_colorPressed=\"@color/next_grey\" app:fab_colorRipple=\"#99FFFFFF\" android:onClick=\"showSelectionDialog\"/&gt; &lt;com.github.clans.fab.FloatingActionButton android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:src=\"@drawable/ic_action_content_manually\" fab:fab_size=\"mini\" fab:fab_label=\"@string/create_manually\" fab:fab_colorNormal=\"@color/white\" app:fab_colorPressed=\"@color/next_grey\" app:fab_colorRipple=\"#99FFFFFF\" android:onClick=\"showAddDialog\"/&gt; &lt;com.github.clans.fab.FloatingActionButton android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:src=\"@drawable/ic_action_content_suggestion\" fab:fab_size=\"mini\" fab:fab_label=\"@string/submit_suggestion\" fab:fab_colorNormal=\"@color/white\" app:fab_colorPressed=\"@color/next_grey\" app:fab_colorRipple=\"#99FFFFFF\" android:onClick=\"showSuggestionDialog\"/&gt; &lt;/com.github.clans.fab.FloatingActionMenu&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt;&lt;include layout=\"@layout/activity_main_drawer\"/&gt;&lt;/android.support.v4.widget.DrawerLayout&gt; java代码：12swipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_container); swipeRefreshLayout.setOnRefreshListener(this); 如何才能让滑动刷新只发生在collapsing toolbar完全展开并且 scrollview (或者recyclerview)在顶部 的时候呢？类似于g＋和Inbox中的效果。错误的效果: 正确的效果： 回答：可以尝试为AppBarLayout添加 offset change listener同时根据情况启用或者关闭滑动刷新，需要增加的代码在这里：https://gist.github.com/blackcj/001a90c7775765ad5212关键改动：12345678910111213141516171819202122232425262728293031323334353637public class MainActivity extends AppCompatActivity implements AppBarLayout.OnOffsetChangedListener &#123; ... private AppBarLayout appBarLayout; private SwipeRefreshLayout mSwipeRefreshLayout; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ... mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.contentView); appBarLayout = (AppBarLayout) findViewById(R.id.appBarLayout); &#125; @Override public void onOffsetChanged(AppBarLayout appBarLayout, int i) &#123; if (i == 0) &#123; mSwipeRefreshLayout.setEnabled(true); &#125; else &#123; mSwipeRefreshLayout.setEnabled(false); &#125; &#125; @Override protected void onResume() &#123; super.onResume(); appBarLayout.addOnOffsetChangedListener(this); &#125; @Override protected void onPause() &#123; super.onPause(); appBarLayout.removeOnOffsetChangedListener(this); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"AppBarLayout 滑动","slug":"AppBarLayout-滑动","permalink":"http://WinterSmileSB101.online/tags/AppBarLayout-滑动/"},{"name":"OnOffsetChangedListener","slug":"OnOffsetChangedListener","permalink":"http://WinterSmileSB101.online/tags/OnOffsetChangedListener/"}]},{"title":"让Fragment的layout也能够实现沉浸（透明）状态栏","slug":"让Fragment的layout也能够实现沉浸（透明）状态栏","date":"2017-03-22T07:00:28.000Z","updated":"2017-03-22T07:07:21.193Z","comments":true,"path":"2017/03/22/让Fragment的layout也能够实现沉浸（透明）状态栏/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/让Fragment的layout也能够实现沉浸（透明）状态栏/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 起因：想做一个自用的记账App，由于本人没有UI天赋，审美也是呵呵。所以就借鉴了很多挖财记账的UI，但是在记账的部分想要实现沉浸式就出现问题了。问题描述：一共两个页面间的协调，第一个页面做了侧滑抽屉，在布局里放了ViewPager 第二个页面通过Fragment来装载布局。问题解决：是由于第一个页面的主布局有Android：fitSystemWindows属性。所以导致子布局不能实现完美沉浸（状态栏会保持第一个页面主布局的样式）。附上页面布局，第一个页面：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\"&gt; &lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\"&gt; &lt;android.support.v4.view.ViewPager android:id=\"@+id/container\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"/&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:background=\"#00FFFFFF\" android:fitsSystemWindows=\"true\" android:gravity=\"top\"&gt; &lt;android.support.v7.widget.Toolbar android:id=\"@+id/toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" android:fitsSystemWindows=\"true\" app:popupTheme=\"@style/AppTheme.PopupOverlay\" android:theme=\"@style/AppTheme.AppBarOverlay\"&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;net.lucode.hackware.magicindicator.MagicIndicator android:id=\"@+id/magic_indicator\" android:layout_width=\"wrap_content\" android:layout_height=\"40dp\" android:layout_centerHorizontal=\"true\" android:layout_marginTop=\"8dp\" android:fitsSystemWindows=\"true\" android:background=\"#00FFFFFF\"&gt; &lt;/net.lucode.hackware.magicindicator.MagicIndicator&gt; &lt;/RelativeLayout&gt; &lt;/RelativeLayout&gt; &lt;android.support.design.widget.FloatingActionButton android:id=\"@+id/fab\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"end|bottom\" android:layout_margin=\"@dimen/fab_margin\" app:srcCompat=\"@android:drawable/ic_dialog_email\"/&gt; &lt;android.support.design.widget.NavigationView android:id=\"@+id/nav_view\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\" app:headerLayout=\"@layout/nav_header_main\" app:menu=\"@menu/activity_main_drawer\"/&gt; &lt;/android.support.v4.widget.DrawerLayout&gt; 第二个页面：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\"&gt; &lt;RelativeLayout android:id=\"@+id/fragment_calculation_main_topLayout\" android:layout_width=\"match_parent\" android:layout_height=\"260dp\" android:fitsSystemWindows=\"true\"&gt; &lt;ImageView android:id=\"@+id/fragment_calculation_main_bg\" android:layout_width=\"match_parent\" android:layout_height=\"250dp\" android:fitsSystemWindows=\"true\" android:scaleType=\"centerCrop\"/&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:layout_centerInParent=\"true\"&gt; &lt;LinearLayout android:layout_width=\"0dp\" android:layout_height=\"match_parent\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:layout_gravity=\"center\"&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:textColor=\"#FFFFFF\" android:text=\"￥\"/&gt; &lt;TextView android:id=\"@+id/fragment_calculation_month_IN\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:textColor=\"#FFFFFF\" android:text=\"0.00\"/&gt; &lt;/LinearLayout&gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:textColor=\"#FFFFFF\" android:text=\"本月收入\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=\"0dp\" android:layout_height=\"match_parent\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\"&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:textColor=\"#FFFFFF\" android:text=\"￥\"/&gt; &lt;TextView android:id=\"@+id/fragment_calculation_month_OUT\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:textColor=\"#FFFFFF\" android:text=\"0.00\"/&gt; &lt;/LinearLayout&gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:textColor=\"#FFFFFF\" android:text=\"本月支出\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=\"0dp\" android:layout_height=\"match_parent\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\"&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:textColor=\"#FFFFFF\" android:text=\"￥\"/&gt; &lt;TextView android:id=\"@+id/fragment_calculation_month_cal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:textColor=\"#FFFFFF\" android:text=\"0.00\"/&gt; &lt;/LinearLayout&gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:textColor=\"#FFFFFF\" android:text=\"本月差额\"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;Button android:id=\"@+id/fragment_calculation_main_addButton\" android:layout_width=\"320dp\" android:layout_height=\"50dp\" android:paddingLeft=\"10dp\" android:paddingRight=\"10dp\" android:layout_centerHorizontal=\"true\" android:layout_alignParentBottom=\"true\" android:background=\"#FF9900\" android:text=\"记一笔\"/&gt; &lt;/RelativeLayout&gt; &lt;LinearLayout android:layout_below=\"@+id/fragment_calculation_main_topLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:paddingRight=\"20dp\" android:paddingLeft=\"20dp\" android:orientation=\"vertical\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"60dp\"&gt; &lt;ImageView android:id=\"@+id/fragment_calculation_main_image\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:layout_centerVertical=\"true\"/&gt; &lt;TextView android:layout_toRightOf=\"@id/fragment_calculation_main_image\" android:layout_width=\"wrap_content\" android:layout_height=\"20dp\" android:text=\"今日支出\" android:layout_gravity=\"center\" android:layout_centerVertical=\"true\" android:paddingLeft=\"10dp\"/&gt; &lt;TextView android:id=\"@+id/fragment_calculation_main_today_Out\" android:layout_width=\"50dp\" android:layout_height=\"20dp\" android:layout_centerVertical=\"true\" android:layout_alignParentEnd=\"true\" android:text=\"未消费\"/&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"1dp\" android:background=\"#C0C0C0\"&gt;&lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"60dp\"&gt; &lt;ImageView android:id=\"@id/fragment_calculation_main_image\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:layout_centerVertical=\"true\"/&gt; &lt;TextView android:layout_toRightOf=\"@id/fragment_calculation_main_image\" android:layout_width=\"wrap_content\" android:layout_height=\"20dp\" android:text=\"今日收入\" android:layout_gravity=\"center\" android:layout_centerVertical=\"true\" android:paddingLeft=\"10dp\"/&gt; &lt;TextView android:id=\"@+id/fragment_calculation_main_today_in\" android:layout_width=\"50dp\" android:layout_height=\"20dp\" android:layout_centerVertical=\"true\" android:layout_alignParentEnd=\"true\" android:text=\"未盈利\"/&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"1dp\" android:background=\"#C0C0C0\"&gt;&lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; 问题图（状态栏为上一个页面的主题样式） 于是去掉主页面根布局的android:fitSystemWindows属性，发现变这样了： 可以看到，状态栏任然不是Fragment的图片沉浸，是主页面的RelativeLayout的样式了。我们再去掉RelativeLayout的android:fitSystemWindows属性。再次编译 成功！总结：要实现Fragment的沉浸很简单，在主Activity中设置Activity的沉浸代码与工作，然后重点是子布局的所有根布局都不能有android:fitSystemWindows属性，注意是所有包含子布局的布局都不能有，比如我这里的RelativeLayout和DrawerLayout两者只要有一个有就不会有正常的沉浸效果，最终的状态栏效果是按照最顶端拥有android:fitSystemWindows属性的布局的样式所决定！","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"透明状态栏","slug":"透明状态栏","permalink":"http://WinterSmileSB101.online/tags/透明状态栏/"},{"name":"Fragment layout","slug":"Fragment-layout","permalink":"http://WinterSmileSB101.online/tags/Fragment-layout/"}]},{"title":"Android 笨办法实现editText动态输入框","slug":"Android笨办法实现editText动态输入框","date":"2017-03-22T06:52:49.000Z","updated":"2017-03-22T06:58:48.254Z","comments":true,"path":"2017/03/22/Android笨办法实现editText动态输入框/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Android笨办法实现editText动态输入框/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 自己在做app数字输入的时候，看到挖财记账的记一笔中的输入效果，感觉很是舒服，于是决定自己撸一个先看看挖财的效果： 有两种方式可以实现(我能想到的)：1.自定义View来实现此控件，也就是重写下editText的代码，重写覆盖他的检测逻辑，来实现实时更新text。2.通过添加新的textView，给editText添加textWeather监听输入，然后判断再根据实际需求来更新textView。当然我这里为了快速出效果直接操作第二种，布局123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:paddingLeft=\"15dp\"&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"100dp\"&gt; &lt;android.support.design.widget.TextInputEditText android:id=\"@+id/fragment_account_book_num\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:textColor=\"@color/colorAccent\" android:background=\"@null\" android:inputType=\"numberDecimal\" android:hint=\"输入金额\" android:cursorVisible=\"false\" android:text=\"\"/&gt; &lt;TextView android:id=\"@+id/test_text\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:text=\"0.00\" android:textColor=\"@color/colorAccent\" android:layout_alignParentBottom=\"true\"/&gt; &lt;/RelativeLayout&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;/LinearLayout&gt; 核心代码：（这里我的需求是这样，小数点前不管，小数点后两位）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950rootView = inflater.inflate(R.layout.fragment_account_book,container,false); inputEditText = (TextInputEditText)rootView.findViewById(R.id.fragment_account_book_num); final TextView test_text = (TextView)rootView.findViewById(R.id.test_text); //添加文字改变监听 inputEditText.addTextChangedListener(new TextWatcher()&#123; @Override public void beforeTextChanged(CharSequence s,int start,int count,int after)&#123; &#125; @Override public void onTextChanged(CharSequence s,int start,int before,int count)&#123; String str = s.toString(); Log.i(TAG,\"onTextChanged: text变化: \"+str); if(str.contains(\".\")) &#123; Log.i(TAG,\"onTextChanged: 到了位置。\"); String lastS = str.substring(str.indexOf(\".\")+1,str.length()); str = str.substring(0,str.indexOf(\".\")); switch(lastS.length()) &#123; case 0: test_text.setText(str+\".00\"); break; case 1: test_text.setText(str+\".\"+lastS+\"0\"); break; case 2: test_text.setText(str+\".\"+lastS); break; default://超过两位，不变化，而且值保留两位，不再多保存，防止一直删除确看起来删除不了的bug str = str + \".\" + lastS.substring(0,2); inputEditText.setText(str); inputEditText.setSelection(str.length());//设置光标位置到最后，避免输入从头开始的bug break; &#125; &#125; else if(!str.trim().equals(\"\"))&#123; test_text.setText(str+\".00\"); &#125; else &#123; test_text.setText(\"0.00\"); &#125; &#125; @Override public void afterTextChanged(Editable s)&#123; &#125; &#125;); 代码是不是很简单，下面讲注意的几点：1.editText所有效果都要没有或者说是和背景融为一体2.textView放到原来editText显示的。下面来看看效果： 效果基本都达到了，剩下的就是调整editText不显示，textView显示，以及textView的位置了，就不再说了。附上调整后的布局：1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:paddingLeft=\"15dp\"&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"50dp\"&gt; &lt;android.support.design.widget.TextInputEditText android:id=\"@+id/fragment_account_book_num\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:textColor=\"@color/colorAccent\" android:textSize=\"0dp\" android:background=\"@null\" android:inputType=\"numberDecimal\" android:cursorVisible=\"false\" android:text=\"\"/&gt; &lt;TextView android:id=\"@+id/test_text\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:text=\"0.00\" android:textColor=\"@color/colorAccent\" android:textAlignment=\"gravity\" android:gravity=\"center_vertical\" android:textSize=\"18dp\"/&gt; &lt;/RelativeLayout&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;/LinearLayout&gt; 以及最终效果","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 自定义View","slug":"Android/Android-自定义View","permalink":"http://WinterSmileSB101.online/categories/Android/Android-自定义View/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"editText","slug":"editText","permalink":"http://WinterSmileSB101.online/tags/editText/"},{"name":"动态输入框","slug":"动态输入框","permalink":"http://WinterSmileSB101.online/tags/动态输入框/"}]},{"title":"鸿洋大神博文Android 自定义View (一)中自定义属性所遇到的坑","slug":"鸿洋大神博文的坑","date":"2017-03-22T06:35:19.000Z","updated":"2017-03-22T06:50:51.033Z","comments":true,"path":"2017/03/22/鸿洋大神博文的坑/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/鸿洋大神博文的坑/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 原因是由于接触安卓也这么久了，但是自定义view这方面一直没怎么了解， 尤其是对于自定义属性的使用。由于最近app上需要用到自定义View，于是决定把自定义View的坑填上（毕竟安卓中自定义View是重点也是难点），可是没想到第一步就遇到了问题。写这博文主要是为了记录错误，也可以为同样遇到这问题的童鞋提供一个解决办法。首先给出鸿洋大神此博文传送门。你们可以先过去看看。由于要用到部分大神的文字才方便解释（不知算不算那啥，有问题联系我，立马删除）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151、自定义View的属性，首先在res/values/ 下建立一个attrs.xml ， 在里面定义我们的属性和声明我们的整个样式。 [html] view plain copy 在CODE上查看代码片派生到我的代码片 &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;resources&gt; &lt;attr name=\"titleText\" format=\"string\" /&gt; &lt;attr name=\"titleTextColor\" format=\"color\" /&gt; &lt;attr name=\"titleTextSize\" format=\"dimension\" /&gt; &lt;declare-styleable name=\"CustomTitleView\"&gt; &lt;attr name=\"titleText\" /&gt; &lt;attr name=\"titleTextColor\" /&gt; &lt;attr name=\"titleTextSize\" /&gt; &lt;/declare-styleable&gt; &lt;/resources&gt; 我们定义了字体，字体颜色，字体大小3个属性，format是值该属性的取值类型: 一共有：string,color,demension,integer,enum,reference,float,boolean,fraction,flag;不清楚的可以google一把。 然后在布局中声明我们的自定义View [objc] view plain copy 在CODE上查看代码片派生到我的代码片 &lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" xmlns:custom=\"http://schemas.android.com/apk/res/com.example.customview01\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;com.example.customview01.view.CustomTitleView android:layout_width=\"200dp\" android:layout_height=\"100dp\" custom:titleText=\"3712\" custom:titleTextColor=\"#ff0000\" custom:titleTextSize=\"40sp\" /&gt; &lt;/RelativeLayout&gt; 一定要引入 xmlns:custom=\"http://schemas.android.com/apk/res/com.example.customview01\"我们的命名空间，后面的包路径指的是项目的package 2、在View的构造方法中，获得我们的自定义的样式 [java] view plain copy 在CODE上查看代码片派生到我的代码片 /** * 文本 */ private String mTitleText; /** * 文本的颜色 */ private int mTitleTextColor; /** * 文本的大小 */ private int mTitleTextSize; /** * 绘制时控制文本绘制的范围 */ private Rect mBound; private Paint mPaint; public CustomTitleView(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public CustomTitleView(Context context) &#123; this(context, null); &#125; /** * 获得我自定义的样式属性 * * @param context * @param attrs * @param defStyle */ public CustomTitleView(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); /** * 获得我们所定义的自定义样式属性 */ TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyle, 0); int n = a.getIndexCount(); for (int i = 0; i &lt; n; i++) &#123; int attr = a.getIndex(i); switch (attr) &#123; case R.styleable.CustomTitleView_titleText: mTitleText = a.getString(attr); break; case R.styleable.CustomTitleView_titleTextColor: // 默认颜色设置为黑色 mTitleTextColor = a.getColor(attr, Color.BLACK); break; case R.styleable.CustomTitleView_titleTextSize: // 默认设置为16sp，TypeValue也可以把sp转化为px mTitleTextSize = a.getDimensionPixelSize(attr, (int) TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics())); break; &#125; &#125; a.recycle(); /** * 获得绘制文本的宽和高 */ mPaint = new Paint(); mPaint.setTextSize(mTitleTextSize); // mPaint.setColor(mTitleTextColor); mBound = new Rect(); mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBound); &#125; 我们可以看到，步骤我们做的都是一样的。但是在获取自定义属性值得时候就不一样了。上文是这样的：123456789101112131415161718192021222324252627/** * 获得我们所定义的自定义样式属性 */ TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyle, 0); int n = a.getIndexCount(); for (int i = 0; i &lt; n; i++) &#123; int attr = a.getIndex(i); switch (attr) &#123; case R.styleable.CustomTitleView_titleText: mTitleText = a.getString(attr); break; case R.styleable.CustomTitleView_titleTextColor: // 默认颜色设置为黑色 mTitleTextColor = a.getColor(attr, Color.BLACK); break; case R.styleable.CustomTitleView_titleTextSize: // 默认设置为16sp，TypeValue也可以把sp转化为px mTitleTextSize = a.getDimensionPixelSize(attr, (int) TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics())); break; &#125; &#125; a.recycle(); 也就是先获取了自定义属性的目录索引值，然后通过switch进行与我们的attrs.xml相匹配，最后进行取值。这样咋看没有什么问题，在这篇博文也没什么问题，但是如果我们想偷点懒，不在xml中写出任何我们的自定义属性，这时会发生什么？你肯定会说当然是取代码中你写的默认值啊，非也，非也。照这种写法是不能取到任何默认值！为什么？看看叛徒的那个句子（明显长的不一样，那么胖还说不是叛徒），理解到了吗？1context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyle, 0); 是通过查询我们使用自定义View的时候里面所写出的值，准确的说是保存所有我们写出的值，比如上文中的：12345android:layout_width=\"200dp\" android:layout_height=\"100dp\" custom:titleText=\"3712\" custom:titleTextColor=\"#ff0000\" custom:titleTextSize=\"40sp\" 它就会找到，Android:layout_width,android:layout_height,custom:titleText,custom:titleTextColor,custom:titleTextSize。这几组值.但是如果我们自定义的属性不写上去呢？只是想控制个控件的大小（事实证明很多情况下你的确不太会去改变控件的其他属性，除非你需要），就会变成只找到android:layout_width,android:layout_height。这时候如果你再通过Switch（）去匹配的话，除了android:layout_width,android:layout_height两个分支，其他的都不会被执行，既然没有执行，那么默认值如何取得出？找到了问题所在，我们就要解决了，解决也很简单，去掉获取目录，不使用switch()语句，每个属性都这样获取：123TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyle, 0);// 默认颜色设置为黑色 mTitleTextColor = a.getColor(attr, Color.BLACK); 这样就能保证每个想要设置默认值的能正确的被设置默认值了。有问题欢迎指正，如引用的部分文字有侵权，请告知我，我会立即处理、","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 自定义View","slug":"Android/Android-自定义View","permalink":"http://WinterSmileSB101.online/categories/Android/Android-自定义View/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"自定义View","slug":"自定义View","permalink":"http://WinterSmileSB101.online/tags/自定义View/"},{"name":"鸿洋","slug":"鸿洋","permalink":"http://WinterSmileSB101.online/tags/鸿洋/"}]},{"title":"Android 根据设置的日期获取星期几","slug":"根据设置的日期获取星期几","date":"2017-03-22T06:31:13.000Z","updated":"2017-03-29T02:30:25.000Z","comments":true,"path":"2017/03/22/根据设置的日期获取星期几/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/根据设置的日期获取星期几/","excerpt":"","text":"版权声明：本文为转载，出处未知，知道出处可以联系我。 有个注意的点：就是包的引入，你的对应版本是24和以上就引入Android.icu.util包版本是24以下就引入Java.util包123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 判断当前日期是星期几 * * @param pTime 设置的需要判断的时间 //格式如2012-09-08 * * @return dayForWeek 判断结果 * @Exception 发生异常 */// String pTime = \"2012-03-12\"; private String getWeek(String pTime) &#123; String Week = \"\"; SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\"); Calendar c = Calendar.getInstance(); try &#123; c.setTime(format.parse(pTime)); &#125; catch (ParseException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; if (c.get(Calendar.DAY_OF_WEEK) == 1) &#123; Week += \"天\"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 2) &#123; Week += \"一\"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 3) &#123; Week += \"二\"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 4) &#123; Week += \"三\"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 5) &#123; Week += \"四\"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 6) &#123; Week += \"五\"; &#125; if (c.get(Calendar.DAY_OF_WEEK) == 7) &#123; Week += \"六\"; &#125; return Week; &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"获取星期","slug":"获取星期","permalink":"http://WinterSmileSB101.online/tags/获取星期/"}]},{"title":"Okhttp获取中文网页乱码的解决方式","slug":"Okhttp获取中文网页乱码的解决方式","date":"2017-03-22T06:20:15.000Z","updated":"2017-03-22T07:01:22.198Z","comments":true,"path":"2017/03/22/Okhttp获取中文网页乱码的解决方式/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Okhttp获取中文网页乱码的解决方式/","excerpt":"","text":"版权声明：本文为转载，出处未知，知道出处可以联系我。 OkHttp post请求编码问题 解决放法在回调方法onResponse方法中12byte[] b = response.body().bytes(); //获取数据的bytesString info = new String(b, \"GB2312\"); //然后将其转为gb2312","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"Okhttp","slug":"Okhttp","permalink":"http://WinterSmileSB101.online/tags/Okhttp/"},{"name":"中文网页乱码","slug":"中文网页乱码","permalink":"http://WinterSmileSB101.online/tags/中文网页乱码/"}]},{"title":"爬坑之路一_初步认识Android爬虫","slug":"爬坑之路一-初步认识Android爬虫","date":"2017-03-22T06:15:09.000Z","updated":"2017-03-22T06:28:06.289Z","comments":true,"path":"2017/03/22/爬坑之路一-初步认识Android爬虫/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/爬坑之路一-初步认识Android爬虫/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 心血来潮想做个漫画App，看到掘金的各种Python爬虫等，看了原理，觉得Adnroid上应该也很简单啊，现在网络访问开源库那么多，期中Okhttp就挺好用，不过Okhttp访问返回的源码中中文会出现乱码，Okhttp获取页面中文乱码问题解决方法或者直接用原生的来访问，获取到网页源码，然后直接通过pattern来匹配正则表达式不就能够很方便的爬出很多页面的东西吗？可是。。。我太天真了，一开始直接使用pattern来匹配就遇到了字符大小超过限制的问题，那应该怎么办？后来又了解到了Jsoup，Jsoup中文ApiJsoup是一个Java的html解析器，可以使用可以通过DOM，CSS以及类似jQuery的方法来查询取出数据。现在应该可以了吧，字符大小是解决了。新的问题出现了，我根本取不到那个img标签。几番调试，我发现了，那通过Jsoup访问的返回网页没有了img标签！！！只剩下一个加载中.gif和加载错误的图片。word天，搞什么，这网页居然没有加载完！于是又查询资料，发现Jsoup不支持js操作，也就是说我们通过Jsoup除非抓取网页的静态内容，动态的没法抓取！那就很尴尬了啊。目前我想到的解决方法：1.通过WebView 来构建模拟访问，然后在网页加载完成之后也就是重写WebViewClient中的onPageFinished(WebView view,String url){}方法来通过DOM条件来获取到加载之后的网页的数据。2.也是通过WebView来构建模拟访问，然后管理下载（图片等）3.还是WebView来构建模拟访问，再与JS交互来取得自己想要的数据。另外，通过WebView构建模拟访问加载页面完毕之后可以做很多事情，毕竟我们可以拿到真正的网页源码了，那么我们要怎么获取网页源码呢？WebViewh获取网页源码方式","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 爬虫","slug":"Android/Android-爬虫","permalink":"http://WinterSmileSB101.online/categories/Android/Android-爬虫/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://WinterSmileSB101.online/tags/爬虫/"},{"name":"Android 爬虫","slug":"Android-爬虫","permalink":"http://WinterSmileSB101.online/tags/Android-爬虫/"},{"name":"WebView","slug":"WebView","permalink":"http://WinterSmileSB101.online/tags/WebView/"}]},{"title":"CoordinatorLayout与NestedScrollView嵌套RecyclerView使用中的坑","slug":"CoordinatorLayout与NestedScrollView嵌套RecyclerView使用中的坑","date":"2017-03-22T06:08:32.000Z","updated":"2017-03-22T06:12:22.231Z","comments":true,"path":"2017/03/22/CoordinatorLayout与NestedScrollView嵌套RecyclerView使用中的坑/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/CoordinatorLayout与NestedScrollView嵌套RecyclerView使用中的坑/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 做一个详情页面的时候，遇到了上述使用方式的坑，上滑的时候RecyclerView上滑了，但是并没有与头部也就是AppBarLayout产生联动，头部没有上拉了。这个问题的解决方法是调用RecyclerView中的setNestedScrollingEnabled(false);让RecyclerView顺滑滑动。即可解决NestedScrollView与RecyclerView嵌套使用的问题。这应该是最简单的方式解决这个嵌套冲突。谨以此作为笔记或者帮助其他和我一样遇到这种坑的童鞋。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"CoordinatorLayout","slug":"CoordinatorLayout","permalink":"http://WinterSmileSB101.online/tags/CoordinatorLayout/"},{"name":"NestedScrollView","slug":"NestedScrollView","permalink":"http://WinterSmileSB101.online/tags/NestedScrollView/"},{"name":"RecyclerView 滑动冲突","slug":"RecyclerView-滑动冲突","permalink":"http://WinterSmileSB101.online/tags/RecyclerView-滑动冲突/"},{"name":"Andriod","slug":"Andriod","permalink":"http://WinterSmileSB101.online/tags/Andriod/"},{"name":"Android 遇到的坑","slug":"Android-遇到的坑","permalink":"http://WinterSmileSB101.online/tags/Android-遇到的坑/"}]},{"title":"Android 控件的相对动画实现小说阅读的上下菜单的隐藏与显示","slug":"控件的相对动画实现小说阅读的上下菜单的隐藏与显示","date":"2017-03-22T06:00:48.000Z","updated":"2017-03-22T06:11:12.455Z","comments":true,"path":"2017/03/22/控件的相对动画实现小说阅读的上下菜单的隐藏与显示/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/控件的相对动画实现小说阅读的上下菜单的隐藏与显示/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 直接上代码：1.这个是相对于自身往上平移自身高度的动画123TranslateAnimation translateAnimation =new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f); 2.这个是相对于自身往下平移自身高度的动画1234TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f); 其实就是对于下面这个方法的使用12public TranslateAnimation(int fromXType, float fromXValue, int toXType, float toXValue, int fromYType, float fromYValue, int toYType, float toYValue) **不过在动画的执行的地方有不同，不是通过Start()方法执行动画，而是通过设置View 的Visibility来控制动画的播放。比如这里有一个需要隐藏的View 变量名为topLayout，那么这里实现动画的方式就为**12toplayout.setAnimation(translateAnimation);toplayout.setVisibility(View.INVISIBLE); 这里就可以实现动画的播放，这里设置的是INVISIBLE，是因为我们的控件本来是可见的（VISIBLE），所以动画的控制是通过View的可见性来控制的，也就是说，这里也可以设置为View.GONE，也是可以触发动画。当处于INVISIBLE或者GONE的时候，设置为VISIBLE就可以播放动画了。下面上效果：","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Andriod","slug":"Andriod","permalink":"http://WinterSmileSB101.online/tags/Andriod/"},{"name":"相对动画","slug":"相对动画","permalink":"http://WinterSmileSB101.online/tags/相对动画/"},{"name":"控件","slug":"控件","permalink":"http://WinterSmileSB101.online/tags/控件/"}]},{"title":"通过OnScrollListener来监听RecyclerView的位置，以更新RV","slug":"通过OnScrollListener来监听RecyclerView的位置","date":"2017-03-22T05:55:02.000Z","updated":"2017-03-22T06:11:10.263Z","comments":true,"path":"2017/03/22/通过OnScrollListener来监听RecyclerView的位置/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/通过OnScrollListener来监听RecyclerView的位置/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 最近做一个漫画app，在阅读漫画界面需要通过获取recyclerView的位置来实时更新界面上的图片进度（比如1/9），查阅资料得知了可以通过LayoutManager来获取recyclerView的item位置信息。那么由于这里我的是一幅图是整个屏幕大小，所以通过代码：123LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); 其中，adapterNowPos 就是当前的图片位置，allItems 则是recyclerView中的所有条目数量。接下来需要搞定的就是动态通知了，于是我们给recyclerView添加一个滑动监听器，完整的代码如下：123456789101112recyclerView.setOnScrollListener(new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); String s = adapterNowPos+1+\"/\"+allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); &#125; &#125;); 这样就完成了实时更新。下面上图：","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"}],"tags":[{"name":"Andriod","slug":"Andriod","permalink":"http://WinterSmileSB101.online/tags/Andriod/"},{"name":"RecyclerView","slug":"RecyclerView","permalink":"http://WinterSmileSB101.online/tags/RecyclerView/"},{"name":"OnScrollListener","slug":"OnScrollListener","permalink":"http://WinterSmileSB101.online/tags/OnScrollListener/"}]},{"title":"漫吧漫画阅读界面的搭建（一）基础布局搭建（完整代码）","slug":"漫吧漫画阅读界面的搭建（一）基础布局搭建（完整代码）","date":"2017-03-22T05:45:17.000Z","updated":"2017-03-22T06:11:14.866Z","comments":true,"path":"2017/03/22/漫吧漫画阅读界面的搭建（一）基础布局搭建（完整代码）/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/漫吧漫画阅读界面的搭建（一）基础布局搭建（完整代码）/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址 第一篇链接 漫吧漫画阅读界面的搭建（一）基础布局搭建（上）第二篇链接 漫吧漫画阅读界面的搭建（一）基础布局搭建（下） 这一篇是完整代码的展示，博文是前两篇方便起见，代码都为一个文件布局代码：主布局：lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/colorSliteGray\" tools:context=\"winter.zxb.smilesb101.cartoon8.WatchComicActivity\"&gt; &lt;!-- The primary full-screen view. This can be replaced with whatever view is needed to present your content, e.g. VideoView, SurfaceView, TextureView, etc. --&gt; &lt;android.support.v7.widget.RecyclerView android:id=\"@+id/fullscreen_content\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:gravity=\"center\"/&gt; &lt;!--底部小的状态栏--&gt; &lt;LinearLayout android:id=\"@+id/small_status\" android:layout_width=\"wrap_content\" android:layout_height=\"30dp\" android:layout_alignParentEnd=\"true\" android:layout_alignParentBottom=\"true\" android:background=\"@drawable/round_rect_pressed\" android:orientation=\"horizontal\"&gt; &lt;TextView android:id=\"@+id/comic_name_bottom\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:textColor=\"@color/colorSliteGray\" android:gravity=\"center\" android:layout_marginLeft=\"2dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:id=\"@+id/comic_pic_state\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:layout_marginLeft=\"10dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:id=\"@+id/time\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:layout_marginLeft=\"10dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/battery\" android:layout_marginLeft=\"10dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:id=\"@+id/battery\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:maxLines=\"1\" android:textColor=\"@color/colorSliteGray\" android:layout_marginRight=\"20dp\" android:textSize=\"12sp\"/&gt; &lt;/LinearLayout&gt; &lt;!--菜单按钮区域(实际作用区域)--&gt; &lt;LinearLayout android:id=\"@+id/menu_ctrl\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" android:visibility=\"visible\"&gt; &lt;!--上一话--&gt; &lt;TextView android:id=\"@+id/preHUAText\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\"&gt; &lt;/TextView&gt; &lt;!--显示或者隐藏状态栏的触发器--&gt; &lt;TextView android:id=\"@+id/toogle\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:layout_centerInParent=\"true\"&gt;&lt;/TextView&gt; &lt;!--下一话--&gt; &lt;TextView android:id=\"@+id/nextHUAText\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\"&gt; &lt;/TextView&gt; &lt;/LinearLayout&gt; &lt;!--菜单按钮效果效果区域--&gt; &lt;LinearLayout android:id=\"@+id/menu_content\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" android:visibility=\"gone\"&gt; &lt;!--上一话--&gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:text=\"@string/preHUA\" android:textColor=\"@color/colorWrite\" android:background=\"#50000000\" android:gravity=\"center\" android:textSize=\"30sp\"&gt; &lt;/TextView&gt; &lt;!--显示或者隐藏状态栏的触发器--&gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:layout_centerInParent=\"true\" android:background=\"#50000000\" android:textSize=\"30sp\" android:text=\"@string/menu\" android:textColor=\"@color/colorWrite\" android:gravity=\"center\" android:layout_marginTop=\"10dp\" android:layout_marginBottom=\"10dp\"&gt;&lt;/TextView&gt; &lt;!--下一话--&gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:text=\"@string/nextHUA\" android:textColor=\"@color/colorWrite\" android:background=\"#50000000\" android:gravity=\"center\" android:textSize=\"30sp\"&gt; &lt;/TextView&gt; &lt;/LinearLayout&gt; &lt;!--顶部栏--&gt; &lt;LinearLayout android:id=\"@+id/top_layout\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:orientation=\"horizontal\" android:background=\"#80000000\" android:visibility=\"gone\"&gt; &lt;LinearLayout android:layout_width=\"0dp\" android:layout_height=\"match_parent\" android:layout_weight=\"1\" android:orientation=\"horizontal\"&gt; &lt;Button android:id=\"@+id/back_btn\" android:layout_width=\"10dp\" android:layout_height=\"20dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"15dp\" android:background=\"@mipmap/arrow_left_better\"/&gt; &lt;TextView android:id=\"@+id/comic_name\" android:layout_width=\"wrap_content\" android:layout_height=\"30dp\" android:layout_gravity=\"center_vertical\" android:gravity=\"center\" android:layout_marginLeft=\"10dp\" android:textColor=\"@color/colorWrite\"/&gt; &lt;TextView android:id=\"@+id/comic_pic_state_top\" android:layout_width=\"wrap_content\" android:layout_height=\"30dp\" android:layout_marginLeft=\"10dp\" android:textColor=\"@color/colorWrite\" android:layout_gravity=\"center_vertical\" android:gravity=\"center\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:orientation=\"horizontal\" android:layout_marginLeft=\"10dp\"&gt; &lt;Button android:id=\"@+id/show_menuBtn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/info_72px\" android:layout_marginRight=\"10dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;Button android:id=\"@+id/feed_backBtn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/edit_71\" android:layout_marginRight=\"10dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;Button android:id=\"@+id/downloadpic_Btn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/download_46\" android:layout_marginRight=\"10dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;Button android:id=\"@+id/sharePicBtn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/external_link_75\" android:layout_marginRight=\"20dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;!--SeekBar的操作提示栏,默认不可见，按下SeekBar可见，抬起不可见--&gt; &lt;RelativeLayout android:id=\"@+id/bottom_seekBar_help\" android:layout_width=\"match_parent\" android:layout_height=\"30dp\" android:layout_above=\"@+id/bottom_layout\" android:layout_marginBottom=\"10dp\" android:background=\"#80000000\" android:visibility=\"gone\"&gt; &lt;LinearLayout android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:orientation=\"horizontal\" android:layout_centerInParent=\"true\"&gt; &lt;TextView android:id=\"@+id/seekBar_help_now\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorAqua\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:layout_gravity=\"center\" android:text=\" / \" android:textColor=\"@color/colorSliteGray\"/&gt; &lt;TextView android:id=\"@+id/seekBar_help_num\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:layout_gravity=\"center\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\"/&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; &lt;!--底部栏--&gt; &lt;LinearLayout android:id=\"@+id/bottom_layout\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" android:layout_alignParentBottom=\"true\" android:background=\"#80000000\" android:visibility=\"gone\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:orientation=\"horizontal\" android:layout_marginBottom=\"10dp\" android:layout_marginLeft=\"15dp\" android:layout_marginRight=\"15dp\" android:layout_marginTop=\"10dp\"&gt; &lt;TextView android:id=\"@+id/preHUA\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:text=\"@string/preHUA\" android:textColor=\"@color/colorSliteGray\" android:gravity=\"center\"/&gt; &lt;SeekBar android:id=\"@+id/bottom_seekBar\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:layout_marginRight=\"10dp\" android:layout_weight=\"1\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:id=\"@+id/nextHUA\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:text=\"@string/nextHUA\" android:textColor=\"@color/colorSliteGray\" android:gravity=\"center\"/&gt; &lt;/LinearLayout&gt; &lt;!--底部菜单栏--&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"10dp\" android:layout_marginBottom=\"10dp\" android:orientation=\"horizontal\" android:layout_marginLeft=\"20dp\" android:layout_marginRight=\"20dp\"&gt; &lt;LinearLayout android:id=\"@+id/indexBtn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/menu_expanded_109\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/index\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/download_comic_Btn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/downloadbtn\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/download\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/light_btn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/light_bulb_46\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/light\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/phone_switch\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/phonestatus_switch\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/landscape\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/options_btn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/options_72\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/options\"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; RecyclerView item布局：123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_weight=\"1\" android:layout_height=\"0dp\"&gt; &lt;!--做出占位的字，图片加载出来后会被图片覆盖--&gt; &lt;TextView android:id=\"@+id/textView\" android:background=\"@color/colorSliteGray\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:textColor=\"@color/colorDimGray\" android:text=\"1\" android:textSize=\"80sp\" android:gravity=\"center\"/&gt; &lt;ImageView android:id=\"@+id/imageView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"fitXY\" android:layout_gravity=\"center\"/&gt; &lt;/RelativeLayout&gt; &lt;!--分隔线，让布局看起来更清晰，可以去掉--&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"3dp\" android:background=\"@color/colorSliteGray\" android:layout_alignParentBottom=\"true\"&gt;&lt;/LinearLayout&gt; &lt;/LinearLayout&gt; Java代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532package winter.zxb.smilesb101.cartoon8; import android.annotation.SuppressLint; import android.app.Activity; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.content.IntentFilter; import android.media.Image; import android.os.AsyncTask; import android.os.BatteryManager; import android.os.Message; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentPagerAdapter; import android.support.v7.app.ActionBar; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.os.Handler; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.util.Log; import android.view.LayoutInflater; import android.view.MotionEvent; import android.view.View; import android.view.ViewGroup; import android.view.WindowManager; import android.view.animation.Animation; import android.view.animation.TranslateAnimation; import android.widget.Button; import android.widget.ImageSwitcher; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.RelativeLayout; import android.widget.SeekBar; import android.widget.TextView; import android.widget.Toast; import com.bumptech.glide.Glide; import java.util.ArrayList; import ComicData.Comic; import RetailsWorm.HtmlAnalysisUtils; import RetailsWorm.NetWorkUtils; import Utils.Utils; import static ComicData.comicStaticValue.COMIC_PICS; import static ComicData.comicStaticValue.COMIC_PIC_DOM; /** * An example full-screen activity that shows and hides the system UI (i.e. * status bar and navigation/system bar) with user interaction. */ public final class WatchComicActivity extends AppCompatActivity implements View.OnClickListener&#123; /** * Whether or not the system UI should be auto-hidden after * &#123;@link #AUTO_HIDE_DELAY_MILLIS&#125; milliseconds. */ private static final boolean AUTO_HIDE = true; /** * If &#123;@link #AUTO_HIDE&#125; is set, the number of milliseconds to wait after * user interaction before hiding the system UI. */ private static final int AUTO_HIDE_DELAY_MILLIS = 1000; /** * 动画时间 */ private static final int UI_ANIMATION_DELAY = 200; private final Handler mHideHandler = new Handler(); private RecyclerView mContentView; private View mControlsView; private MyContentViewAdapter adapter; private int adapterNowPos,allItems; private final Runnable mShowPart2Runnable = new Runnable()&#123; @Override public void run()&#123; // Delayed display of UI elements ActionBar actionBar = getSupportActionBar(); if(actionBar != null) &#123; actionBar.show(); &#125; &#125; &#125;; /** * 显示或者隐藏状态 */ private boolean mVisible; Handler handler = new Handler()&#123; @Override public void handleMessage(Message msg)&#123; switch(msg.what) &#123; case NetWorkUtils.MSG_HTML: String html = msg.obj.toString(); if(!html.equals(NetWorkUtils.HTML_EMPTY)) &#123; InitLayoutValue(html); &#125; else &#123; Log.i(TAG,\"handleMessage: 网络错误！！\"); &#125; break; &#125; &#125; &#125;; /** * 处理网页 * @param html */ void InitLayoutValue(final String html) &#123; new AsyncTask&lt;String,Void,Void&gt;()&#123; @Override protected Void doInBackground(String... params)&#123; Log.i(TAG,\"doInBackground: 后台操作获取图片\"); comic = new Comic(); comic_Pics = HtmlAnalysisUtils.getComicPicsString(params[0],COMIC_PICS,5);//第5个位置是图片位置 comic.setName(HtmlAnalysisUtils.getComicDetails(params[0],COMIC_PIC_DOM.get(2),HtmlAnalysisUtils.WHAT_innerHTML).get(0)); comic_hua = HtmlAnalysisUtils.getComicDetails(params[0],COMIC_PIC_DOM.get(1),HtmlAnalysisUtils.WHAT_innerHTML).get(0).replace(comic.getName(),\"\");//去掉多余的名称 return null; &#125; @Override protected void onPostExecute(Void aVoid)&#123; super.onPostExecute(aVoid); //Log.i(TAG,\"onPostExecute: 获取图片完成\"); comic_name_bottom.setText(comic_hua); comic_name_top.setText(comic_hua); if(comic_Pics!=null) &#123; Log.i(TAG,\"onPostExecute: \"+comic_Pics.get(1)); //实例化adapter mContentView.setLayoutManager(new LinearLayoutManager(activity)); adapter = new MyContentViewAdapter(comic_Pics); mContentView.setAdapter(adapter); mContentView.setOnScrollListener(scrollListener); &#125; &#125; &#125;.execute(html); &#125; private RecyclerView.OnScrollListener scrollListener = new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); //设置seekbar seekBar.setMax(allItems-1); Log.i(TAG,\"onScrolled: \"+allItems); seekBar.setProgress(adapterNowPos); setpicText();//设置文字 &#125; &#125;; private static final String TAG = \"WatchComicActivity\"; /** * 漫画的VALUE */ public static String COMIC_VALUE = \"COMIC\"; public static String COMIC_LINK = \"CMOIC_LINK\"; public static String COMIC_HUA = \"HUA\"; public static String COMIC_NAME = \"NAME\"; private Comic comic; private String comic_link; private String comic_hua; private ArrayList&lt;String&gt; comic_Pics; private Activity activity; private LinearLayout toplayout; private Button showCtrlbtn,backBtn,feedbackBtn,downLoadPicBtn,sharePicBtn; private LinearLayout bottomlayout; private TextView nextToogle,toogleBtn,preToogle; private LinearLayout menu_content; private TextView comic_name_bottom,comic_pic_state,time,battery; private SeekBar seekBar; private LinearLayout small_status; private RelativeLayout bottom_seekBar_help; private TextView seekBar_help_now,seekBar_help_num; private Button backbtn; private TextView comic_name_top,pic_state_top; private LinearLayout indexBtn,download_comic_Btn,light_btn,phone_switch,options_btn; @Override protected void onCreate(Bundle savedInstanceState)&#123; super.onCreate(savedInstanceState); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_watch_comic); //注册电量监听广播 registerReceiver(batterReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED)); mVisible = false;//一开始是不可见状态 mContentView = (RecyclerView)findViewById(R.id.fullscreen_content); toplayout = (LinearLayout)findViewById(R.id.top_layout); bottomlayout = (LinearLayout)findViewById(R.id.bottom_layout); toogleBtn = (TextView)findViewById(R.id.toogle); nextToogle = (TextView)findViewById(R.id.nextHUAText); preToogle = (TextView)findViewById(R.id.preHUAText); menu_content = (LinearLayout)findViewById(R.id.menu_content); showCtrlbtn = (Button)findViewById(R.id.show_menuBtn); backBtn = (Button)findViewById(R.id.back_btn); feedbackBtn = (Button)findViewById(R.id.feed_backBtn); downLoadPicBtn = (Button)findViewById(R.id.downloadpic_Btn); sharePicBtn = (Button)findViewById(R.id.sharePicBtn); bottom_seekBar_help = (RelativeLayout)findViewById(R.id.bottom_seekBar_help); seekBar_help_now = (TextView)findViewById(R.id.seekBar_help_now); seekBar_help_num = (TextView)findViewById(R.id.seekBar_help_num); menu_content.setOnClickListener(this); showCtrlbtn.setOnClickListener(this); backBtn.setOnClickListener(this); feedbackBtn.setOnClickListener(this); downLoadPicBtn.setOnClickListener(this); sharePicBtn.setOnClickListener(this); comic_name_bottom = (TextView)findViewById(R.id.comic_name_bottom); comic_pic_state = (TextView)findViewById(R.id.comic_pic_state); time = (TextView)findViewById(R.id.time); battery = (TextView)findViewById(R.id.battery); time.setText(Utils.getTimeHour()); small_status = (LinearLayout)findViewById(R.id.small_status); seekBar = (SeekBar)findViewById(R.id.bottom_seekBar); seekBar.setOnSeekBarChangeListener(seekChangerListener); //Log.i(TAG,\"onCreate: \"+Utils.getPhoneBatteryInfo(this,BatteryManager.BATTERY_PROPERTY_CURRENT_NOW,Utils.DATATYPE_INT)); toogleBtn.setOnClickListener(this); nextToogle.setOnClickListener(this); preToogle.setOnClickListener(this); toogleBtn.setOnTouchListener(ctrl_touchlistenner); nextToogle.setOnTouchListener(ctrl_touchlistenner); preToogle.setOnTouchListener(ctrl_touchlistenner); comic_name_top = (TextView)findViewById(R.id.comic_name); pic_state_top = (TextView)findViewById(R.id.comic_pic_state_top); //底边菜单 indexBtn = (LinearLayout)findViewById(R.id.indexBtn); download_comic_Btn = (LinearLayout)findViewById(R.id.download_comic_Btn); light_btn = (LinearLayout)findViewById(R.id.light_btn); phone_switch = (LinearLayout)findViewById(R.id.phone_switch); options_btn = (LinearLayout)findViewById(R.id.options_btn); indexBtn.setOnClickListener(this); download_comic_Btn.setOnClickListener(this); light_btn.setOnClickListener(this); phone_switch.setOnClickListener(this); indexBtn.setOnClickListener(this); options_btn.setOnClickListener(this); activity = this; if(getIntent()!=null) &#123; Intent intent = getIntent(); comic = (Comic)intent.getSerializableExtra(COMIC_VALUE); comic_link = intent.getStringExtra(COMIC_LINK); new Runnable()&#123; @Override public void run()&#123; NetWorkUtils.getHtmlPage(activity,comic_link,handler);//获取网页数据 &#125; &#125;.run(); &#125; &#125; private float Sy = 0,Ey = 0;//放在外面是为了更新sy的值，让滑动更加顺滑 /** * 控制板的触摸事件监听，用来处理滑动冲突（控制面板与recyclerView的滑动冲突） */ View.OnTouchListener ctrl_touchlistenner = new View.OnTouchListener()&#123; @Override public boolean onTouch(View v,MotionEvent event)&#123; switch(event.getAction()) &#123; case MotionEvent.ACTION_DOWN: Sy = event.getY(); //Log.i(TAG,\"onTouch: 按下事件 \"+Sy); break; case MotionEvent.ACTION_MOVE: Ey = event.getY(); float res = (Ey-Sy); //Log.i(TAG,\"onTouch: 分发事件给recyclerView 移动距离为 \"+res); //让RecyclerView开始滑动 mContentView.scrollBy(mContentView.getScrollX(),mContentView.getScrollY()-(int)res); Sy = event.getY();//更新开始位置 break; &#125; return false; &#125; &#125;; /** * seekBar值改变的监听 */ SeekBar.OnSeekBarChangeListener seekChangerListener = new SeekBar.OnSeekBarChangeListener()&#123; @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser)&#123; //更新辅助面板 if(bottom_seekBar_help.getVisibility()==View.VISIBLE) &#123; seekBar_help_now.setText(progress + 1+\"\"); &#125; &#125; @Override public void onStartTrackingTouch(SeekBar seekBar)&#123; //显示辅助面板 bottom_seekBar_help.setVisibility(View.VISIBLE); seekBar_help_num.setText(seekBar.getMax()+1+\"\");//设置总数 &#125; @Override public void onStopTrackingTouch(SeekBar seekBar)&#123; //关闭辅助面板 bottom_seekBar_help.setVisibility(View.GONE); int progress = seekBar.getProgress(); Log.i(TAG,\"onProgressChanged: 选择了，第\"+progress); //设置图片状态（1/9）; adapterNowPos = progress; setpicText(); mContentView.scrollToPosition(adapterNowPos);//不能平稳滑动，否者联动出错 &#125; &#125;; /** * 设置图片文字（第几张/总共几张） */ void setpicText() &#123; String s = adapterNowPos+1+ \"/\" + allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); &#125; /** * 展示上下栏 */ void showPanel() &#123; //Log.i(TAG,\"hidePanel: 显示\"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,1.0f,Animation.RELATIVE_TO_SELF,0.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation1); bottomlayout.setAnimation(translateAnimation); toplayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 //底部状态栏消失 small_status.setVisibility(View.GONE); //隐藏上下操作板，注意只能是隐藏，不能GONE，否者会导致中间控制板占据所有屏幕的问题 nextToogle.setVisibility(View.INVISIBLE); preToogle.setVisibility(View.INVISIBLE); &#125; /** * 隐藏上下栏 */ void hidePanel() &#123; //Log.i(TAG,\"hidePanel: 隐藏\"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation); bottomlayout.setAnimation(translateAnimation1); toplayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 //底部状态栏显示 small_status.setVisibility(View.VISIBLE); //显示上下操作板 nextToogle.setVisibility(View.VISIBLE); preToogle.setVisibility(View.VISIBLE); &#125; /** * 触发器用来控制显示与隐藏 */ void toogle() &#123; if(mVisible) &#123; hidePanel(); mVisible = false; &#125; else &#123; showPanel(); mVisible = true; &#125; &#125; @Override public void onClick(View v)&#123; switch(v.getId()) &#123; case R.id.back_btn://返回按钮 onBackPressed();//调用返回 break; case R.id.show_menuBtn://显示操作平台按钮 //Log.i(TAG,\"onClick: 操作平台按钮\"); if(View.GONE == menu_content.getVisibility()) &#123; menu_content.setVisibility(View.VISIBLE); hidePanel(); mVisible = false; //底部状态栏消失 small_status.setVisibility(View.GONE); &#125; break; case R.id.feed_backBtn://反馈按钮 break; case R.id.downloadpic_Btn://下载此张图片按钮 break; case R.id.sharePicBtn://分享漫画链接或者此张图片 break; case R.id.toogle: //Log.i(TAG,\"onClick: 隐藏按钮按下\"); toogle(); break; case R.id.nextHUAText://下一张图片 adapterNowPos++; scroolRV_To(adapterNowPos); break; case R.id.preHUAText://上一张图片 adapterNowPos--; scroolRV_To(adapterNowPos); break; case R.id.menu_content://操作面板容器 menu_content.setVisibility(View.GONE); //底部状态栏显示 small_status.setVisibility(View.GONE); break; case R.id.indexBtn://目录按钮 //目录界面 break; case R.id.download_comic_Btn://下载漫画按钮 break; case R.id.light_btn://亮度按钮 break; case R.id.phone_switch://切换手机的横竖屏 break; case R.id.options_btn://选项按钮 break; &#125; &#125; /** * 滚动到位置 * @param pos */ void scroolRV_To(int pos) &#123; if(adapterNowPos&gt;=allItems) &#123; adapterNowPos = allItems; Toast.makeText(this,\"已经到顶啦！\",Toast.LENGTH_SHORT); &#125; else if(adapterNowPos &lt;= 0) &#123; adapterNowPos = 0; Toast.makeText(this,\"已经到底啦！\",Toast.LENGTH_SHORT); &#125; mContentView.smoothScrollToPosition(adapterNowPos); &#125; /** * 图片显示view的adapter */ class MyContentViewAdapter extends RecyclerView.Adapter &#123; private ArrayList&lt;String&gt; pics; private Context context; public MyContentViewAdapter(ArrayList&lt;String&gt; pics)&#123; this.pics = pics; &#125; @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType)&#123; context = parent.getContext(); View view = LayoutInflater.from(context) .inflate(R.layout.comicpics_item,parent,false); return new MyViewHolder(view); &#125; @Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position)&#123; MyViewHolder myViewHolder = (MyViewHolder)holder; myViewHolder.textView.setText(position+1+\"\");//设置占位 Glide.with(context) .load(pics.get(position)) .into(myViewHolder.imageView); &#125; @Override public int getItemCount()&#123; return pics.size(); &#125; class MyViewHolder extends RecyclerView.ViewHolder&#123; private View rootView; private ImageView imageView; private TextView textView; public MyViewHolder(View itemView)&#123; super(itemView); rootView = itemView; imageView = (ImageView)rootView.findViewById(R.id.imageView); textView = (TextView)rootView.findViewById(R.id.textView); &#125; &#125; &#125; public BroadcastReceiver batterReceiver = new BroadcastReceiver()&#123; @Override public void onReceive(Context context,Intent intent)&#123; int level = intent.getIntExtra(\"level\",0); //Log.i(TAG,\"onReceive: \"+level); battery.setText(level+\"%\"); &#125; &#125;; &#125; 文章到此结束，欢迎到我的项目地址或者新博客看看。","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"},{"name":"Android 漫画App漫吧（自写爬虫）开发","slug":"Android/Android-实战/Android-漫画App漫吧（自写爬虫）开发","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/Android-漫画App漫吧（自写爬虫）开发/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"UI","slug":"UI","permalink":"http://WinterSmileSB101.online/tags/UI/"},{"name":"界面","slug":"界面","permalink":"http://WinterSmileSB101.online/tags/界面/"},{"name":"漫吧","slug":"漫吧","permalink":"http://WinterSmileSB101.online/tags/漫吧/"},{"name":"Cartoon8","slug":"Cartoon8","permalink":"http://WinterSmileSB101.online/tags/Cartoon8/"}]},{"title":"漫吧漫画阅读界面的搭建（一）基础布局搭建（下）","slug":"漫吧漫画阅读界面的搭建（一）基础布局搭建（下）","date":"2017-03-22T05:30:47.000Z","updated":"2017-03-22T06:13:40.093Z","comments":true,"path":"2017/03/22/漫吧漫画阅读界面的搭建（一）基础布局搭建（下）/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/漫吧漫画阅读界面的搭建（一）基础布局搭建（下）/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址 想看第一篇的童鞋,漫吧漫画阅读界面的搭建（一）基础布局搭建（上）想直接看代码的童鞋，漫吧漫画阅读界面的搭建（一）基础布局搭建（完全代码）文章较长，看文章需要耐心。我们来接着上一篇文章，三、实现右下角的小状态栏先上布局代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!--底部小的状态栏--&gt; &lt;LinearLayout android:id=\"@+id/small_status\" android:layout_width=\"wrap_content\" android:layout_height=\"30dp\" android:layout_alignParentEnd=\"true\" android:layout_alignParentBottom=\"true\" android:background=\"@drawable/round_rect_pressed\" android:orientation=\"horizontal\"&gt; &lt;TextView android:id=\"@+id/comic_name_bottom\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:textColor=\"@color/colorSliteGray\" android:gravity=\"center\" android:layout_marginLeft=\"2dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:id=\"@+id/comic_pic_state\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:layout_marginLeft=\"10dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:id=\"@+id/time\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:layout_marginLeft=\"10dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/battery\" android:layout_marginLeft=\"10dp\" android:maxLines=\"1\" android:textSize=\"12sp\"/&gt; &lt;TextView android:id=\"@+id/battery\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:maxLines=\"1\" android:textColor=\"@color/colorSliteGray\" android:layout_marginRight=\"20dp\" android:textSize=\"12sp\"/&gt; &lt;/LinearLayout&gt; 然后再添上和前面布局相关联的代码就可以了，再加上相对应的按钮监听以及对应逻辑就可以了。四、解决问题我们这里有几个问题，1.RecyclerView与SeekBar以及提示文字（也就是现在是第几张图/总共的图片）首先获取RecyclerView的位置，获取RecyclerView的位置博文,贴上获取位置的代码1234567891011121314151617private RecyclerView.OnScrollListener scrollListener = new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); //l.findFirstCompletelyVisibleItemPosition(); //Log.i(TAG,\"onScrolled: \"+l.findFirstVisibleItemPosition()); if((adapterNowPos-1)!=l.findFirstVisibleItemPosition()) &#123; //不等于的时候才是有效改变 adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); //设置seekbar seekBar.setMax(allItems); seekBar.setProgress(adapterNowPos); &#125; &#125; &#125;; SeekBar值的监听123456789101112131415161718192021222324252627/** * seekBar值改变的监听 */ SeekBar.OnSeekBarChangeListener seekChangerListener = new SeekBar.OnSeekBarChangeListener()&#123; @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser)&#123; Log.i(TAG,\"onProgressChanged: 选择了，第\"+progress); //设置图片状态（1/9）; if(progress!=0) &#123; adapterNowPos = progress; String s = adapterNowPos + \"/\" + allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); scroolRV_To(adapterNowPos); &#125; &#125; @Override public void onStartTrackingTouch(SeekBar seekBar)&#123; &#125; @Override public void onStopTrackingTouch(SeekBar seekBar)&#123; &#125; &#125;; 滚动控制代码123456789101112131415161718/** * 滚动到位置 * @param pos */ void scroolRV_To(int pos) &#123; if(adapterNowPos&gt;=allItems) &#123; adapterNowPos = allItems; Toast.makeText(this,\"已经到顶啦！\",Toast.LENGTH_SHORT); &#125; else if(adapterNowPos&lt;=1) &#123; adapterNowPos = 1; Toast.makeText(this,\"已经到底啦！\",Toast.LENGTH_SHORT); &#125; mContentView.smoothScrollToPosition(adapterNowPos); &#125; 这样，第一个问题就解决了。2.上一张图片和下一张图片与上下菜单面板有点击事件冲突（上下点击事件被下一张下一张图片拦截）在隐藏和显示面板的时候，把上一张图片和下一张图片隐藏了，注意不能是设置GONE属性，否者会导致中间的（也就是显示或者隐藏上下菜单的控件全屏化）。3.控制面板和RecyclerView的滑动冲突处理这里由于我们的控制面板（也就是上一张图下一张图，以及上下菜单的控制面板）与RecyclerView的滑动有冲突，后者滑动事件被前者所拦截。解决方法：重写控制面板的OnTouch方法，在move中进行事件分发。下面上代码：12345678910111213141516171819202122232425262728private float Sy = 0,Ey = 0;//放在外面是为了更新sy的值，让滑动更加顺滑 /** * 控制板的触摸事件监听，用来处理滑动冲突（控制面板与recyclerView的滑动冲突） */ View.OnTouchListener ctrl_touchlistenner = new View.OnTouchListener()&#123; @Override public boolean onTouch(View v,MotionEvent event)&#123; switch(event.getAction()) &#123; case MotionEvent.ACTION_DOWN: Sy = event.getY(); //Log.i(TAG,\"onTouch: 按下事件 \"+Sy); break; case MotionEvent.ACTION_MOVE: Ey = event.getY(); float res = (Ey-Sy); if(Math.abs(res) &gt; 10) &#123; //Log.i(TAG,\"onTouch: 分发事件给recyclerView 移动距离为 \"+res); //让RecyclerView开始滑动 mContentView.scrollBy(mContentView.getScrollX(),mContentView.getScrollY()-(int)res); Sy = event.getY();//更新开始位置 &#125; break; &#125; return false; &#125; &#125;; 这样滑动冲突就解决了。4.SeekBar与RecyclerView的联动BUG直接拖动SeekBar然后更新RecyclerView的话，会导致SeekBar和RecyclerView都自带鬼畜效果。问题所在：在SeekBar中更新RecyclerView的时候不能让RecyclerView平稳滑动，这样的话会导致RecyclerView的onScrollListener被多次触发，而我们在onScrollListener中又更新了SeekBar，这样就导致了鬼畜的出现。解决方式：不实时更新，只在离开Seekbar的时候更新，实时更新一个文本来作为用户提示，用于辅助用户操作。下面贴上代码，辅助布局代码：1234567891011121314151617181920212223242526272829303132333435363738&lt;!--SeekBar的操作提示栏,默认不可见，按下SeekBar可见，抬起不可见--&gt; &lt;RelativeLayout android:id=\"@+id/bottom_seekBar_help\" android:layout_width=\"match_parent\" android:layout_height=\"30dp\" android:layout_above=\"@+id/bottom_layout\" android:layout_marginBottom=\"10dp\" android:background=\"#80000000\" android:visibility=\"gone\"&gt; &lt;LinearLayout android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:orientation=\"horizontal\" android:layout_centerInParent=\"true\"&gt; &lt;TextView android:id=\"@+id/seekBar_help_now\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorAqua\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:gravity=\"center\" android:layout_gravity=\"center\" android:text=\" / \" android:textColor=\"@color/colorSliteGray\"/&gt; &lt;TextView android:id=\"@+id/seekBar_help_num\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:layout_gravity=\"center\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\"/&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; java代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556private RecyclerView.OnScrollListener scrollListener = new RecyclerView.OnScrollListener()&#123; @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy)&#123; super.onScrolled(recyclerView,dx,dy); LinearLayoutManager l = (LinearLayoutManager)recyclerView.getLayoutManager(); adapterNowPos = l.findFirstVisibleItemPosition(); allItems = l.getItemCount(); //设置seekbar seekBar.setMax(allItems-1); Log.i(TAG,\"onScrolled: \"+allItems); seekBar.setProgress(adapterNowPos); setpicText();//设置文字 &#125; &#125;; /*** seekBar值改变的监听*/ SeekBar.OnSeekBarChangeListener seekChangerListener = new SeekBar.OnSeekBarChangeListener()&#123; @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser)&#123; //更新辅助面板 if(bottom_seekBar_help.getVisibility()==View.VISIBLE) &#123; seekBar_help_now.setText(progress + 1+\"\"); &#125; &#125; @Override public void onStartTrackingTouch(SeekBar seekBar)&#123; //显示辅助面板 bottom_seekBar_help.setVisibility(View.VISIBLE); seekBar_help_num.setText(seekBar.getMax()+1+\"\");//设置总数 &#125; @Override public void onStopTrackingTouch(SeekBar seekBar)&#123; //关闭辅助面板 bottom_seekBar_help.setVisibility(View.GONE); int progress = seekBar.getProgress(); Log.i(TAG,\"onProgressChanged: 选择了，第\"+progress); //设置图片状态（1/9）; adapterNowPos = progress; setpicText(); mContentView.scrollToPosition(adapterNowPos);//不能平稳滑动，否者联动出错 &#125; &#125;; /*** 设置图片文字（第几张/总共几张）*/ void setpicText() &#123; String s = adapterNowPos+1+ \"/\" + allItems; comic_pic_state.setText(s);//设置图片的数量 pic_state_top.setText(s); &#125; 这样就完美解决了问题,这个界面就基本完成！完整代码查看","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"},{"name":"Android 漫画App漫吧（自写爬虫）开发","slug":"Android/Android-实战/Android-漫画App漫吧（自写爬虫）开发","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/Android-漫画App漫吧（自写爬虫）开发/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"UI","slug":"UI","permalink":"http://WinterSmileSB101.online/tags/UI/"},{"name":"界面","slug":"界面","permalink":"http://WinterSmileSB101.online/tags/界面/"},{"name":"漫吧","slug":"漫吧","permalink":"http://WinterSmileSB101.online/tags/漫吧/"},{"name":"Cartoon8","slug":"Cartoon8","permalink":"http://WinterSmileSB101.online/tags/Cartoon8/"},{"name":"RecyclerView","slug":"RecyclerView","permalink":"http://WinterSmileSB101.online/tags/RecyclerView/"},{"name":"SeekBar","slug":"SeekBar","permalink":"http://WinterSmileSB101.online/tags/SeekBar/"},{"name":"滑动冲突","slug":"滑动冲突","permalink":"http://WinterSmileSB101.online/tags/滑动冲突/"}]},{"title":"漫吧漫画阅读界面的搭建（一）基础布局搭建（上）","slug":"uibuilder-first-1","date":"2017-03-22T02:59:43.000Z","updated":"2017-03-22T06:19:21.861Z","comments":true,"path":"2017/03/22/uibuilder-first-1/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/uibuilder-first-1/","excerpt":"","text":"版权声明：本文为 wintersmilesb101 -（个人独立博客– http://wintersmilesb101.online 欢迎访问）博主原创文章，未经博主允许不得转载。 项目 GitHub 地址 想看第二篇的童鞋,漫吧漫画阅读界面的搭建（一）基础布局搭建（下）想直接看代码的童鞋，漫吧漫画阅读界面的搭建（一）基础布局搭建（完全代码）文章较长，看文章需要耐心。老规矩，先上效果,（图片质量有点差，这是因为质量好老是会超过大小限制，请谅解） 一、首先我们来实现基本的图片显示部分这里想法是这样的，实现方式多样1.可以通过ViewPager控件然后加载Fragment来实现。2.可以通过RecyclerView或者ListView的item实现。3.可以通过轮播控件来实现。当然还有其他的方式。这里我使用的是第二种，通过RecyclerView的item来实现。下面上代码：item布局：123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_weight=\"1\" android:layout_height=\"0dp\"&gt; &lt;!--做出占位的字，图片加载出来后会被图片覆盖--&gt; &lt;TextView android:id=\"@+id/textView\" android:background=\"@color/colorSliteGray\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:textColor=\"@color/colorDimGray\" android:text=\"1\" android:textSize=\"80sp\" android:gravity=\"center\"/&gt; &lt;ImageView android:id=\"@+id/imageView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"fitXY\" android:layout_gravity=\"center\"/&gt; &lt;/RelativeLayout&gt; &lt;!--分隔线，让布局看起来更清晰，可以去掉--&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"3dp\" android:background=\"@color/colorSliteGray\" android:layout_alignParentBottom=\"true\"&gt;&lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 然后看看漫画查看界面的布局：123456789101112131415&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/colorSliteGray\" tools:context=\"winter.zxb.smilesb101.cartoon8.WatchComicActivity\"&gt; &lt;!-- The primary full-screen view. This can be replaced with whatever view is needed to present your content, e.g. VideoView, SurfaceView, TextureView, etc. --&gt; &lt;android.support.v7.widget.RecyclerView android:id=\"@+id/fullscreen_content\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:gravity=\"center\"/&gt; &lt;/RelativeLayout&gt; 这样就把图片显示的布局搭建好了，recyclerView的使用应该很简单美着里就不再赘述了。二、实现上下菜单这里我们通过TranslateAnimation配合布局的显示消失来实现消失和显示的动画具体的这篇博客有描述控件显示与隐藏动画那么第一步还是我们的界面，这里是接着前面的漫画主布局做的顶端布局：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!--顶部栏--&gt; &lt;LinearLayout android:id=\"@+id/top_layout\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:orientation=\"horizontal\" android:background=\"#80000000\" android:visibility=\"gone\" android:translationZ=\"99dp\"&gt; &lt;LinearLayout android:layout_width=\"0dp\" android:layout_height=\"match_parent\" android:layout_weight=\"1\" android:orientation=\"horizontal\"&gt; &lt;Button android:id=\"@+id/back_btn\" android:layout_width=\"10dp\" android:layout_height=\"20dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"15dp\" android:background=\"@mipmap/arrow_left_better\"/&gt; &lt;TextView android:id=\"@+id/comic_name\" android:layout_width=\"wrap_content\" android:layout_height=\"30dp\" android:layout_gravity=\"center_vertical\" android:gravity=\"center\" android:layout_marginLeft=\"10dp\" android:textColor=\"@color/colorWrite\"/&gt; &lt;TextView android:id=\"@+id/comic_pic_state_top\" android:layout_width=\"wrap_content\" android:layout_height=\"30dp\" android:layout_marginLeft=\"10dp\" android:textColor=\"@color/colorWrite\" android:layout_gravity=\"center_vertical\" android:gravity=\"center\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:orientation=\"horizontal\" android:layout_marginLeft=\"10dp\"&gt; &lt;Button android:id=\"@+id/show_menuBtn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/info_72px\" android:layout_marginRight=\"10dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;Button android:id=\"@+id/feed_backBtn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/edit_71\" android:layout_marginRight=\"10dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;Button android:id=\"@+id/downloadpic_Btn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/download_46\" android:layout_marginRight=\"10dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;Button android:id=\"@+id/sharePicBtn\" android:layout_width=\"20dp\" android:layout_height=\"20dp\" android:background=\"@mipmap/external_link_75\" android:layout_marginRight=\"20dp\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"10dp\"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 底部布局（同样是与漫画主布局在一个文件内）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149&lt;!--底部栏--&gt; LinearLayout android:id=\"@+id/bottom_layout\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" android:layout_alignParentBottom=\"true\" android:background=\"#80000000\" android:visibility=\"gone\" android:translationZ=\"99dp\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:orientation=\"horizontal\" android:layout_marginBottom=\"10dp\" android:layout_marginLeft=\"15dp\" android:layout_marginRight=\"15dp\" android:layout_marginTop=\"10dp\"&gt; &lt;TextView android:id=\"@+id/preHUA\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:text=\"@string/preHUA\" android:textColor=\"@color/colorSliteGray\" android:gravity=\"center\"/&gt; &lt;SeekBar android:id=\"@+id/bottom_seekBar\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:layout_marginRight=\"10dp\" android:layout_weight=\"1\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:id=\"@+id/nextHUA\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:text=\"@string/nextHUA\" android:textColor=\"@color/colorSliteGray\" android:gravity=\"center\"/&gt; &lt;/LinearLayout&gt; !--底部菜单栏--&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"10dp\" android:layout_marginBottom=\"10dp\" android:orientation=\"horizontal\" android:layout_marginLeft=\"20dp\" android:layout_marginRight=\"20dp\"&gt; &lt;LinearLayout android:id=\"@+id/indexBtn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/menu_expanded_109\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/index\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/download_comic_Btn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/downloadbtn\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/download\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/light_btn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/light_bulb_46\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/light\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/phone_switch\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/phonestatus_switch\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/landscape\"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=\"@+id/options_btn\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" android:orientation=\"vertical\"&gt; &lt;ImageView android:layout_width=\"30dp\" android:layout_height=\"30dp\" android:src=\"@mipmap/options_72\" android:layout_gravity=\"center\"/&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:gravity=\"center\" android:layout_gravity=\"center\" android:textColor=\"@color/colorSliteGray\" android:text=\"@string/options\"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 看了上面的布局代码，是不是觉得布局内容太多了?我们一可以使用引入布局来实现，这个看个人习惯，当然我建议通过引入布局的方式来做，这样代码看起来不会那么辛苦，修改起来也更简单。重点来了，我们需要动态的控制上下菜单布局的显示与隐藏。这里我们还需要一个接受用户点击的控件，来接收用户点击然后控制显示与影藏，这里可以看你喜好以及实际需求添加控件到合适位置。我添加的布局是（注意这里应该添加到RecyclerView的布局以下，因为RecyclerView是全屏的，而我们的主容器又是相对布局，添加到之前的话会导致点击事件被RecyclerView拦截）：1234567891011121314151617181920212223242526272829&lt;!--菜单按钮区域(实际作用区域)--&gt; &lt;LinearLayout android:id=\"@+id/menu_ctrl\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" android:visibility=\"visible\"&gt; &lt;!--上一张图片--&gt; &lt;TextView android:id=\"@+id/preHUAText\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\"&gt; &lt;/TextView&gt; &lt;!--显示或者隐藏状态栏的触发器--&gt; &lt;TextView android:id=\"@+id/toogle\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" android:layout_centerInParent=\"true\"&gt;&lt;/TextView&gt; &lt;!--下一张图片--&gt; &lt;TextView android:id=\"@+id/nextHUAText\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\"&gt; &lt;/TextView&gt; &lt;/LinearLayout&gt; 那么剩下的就是使用Java代码进行相关控制了直接上代码（很简单，主要是动画代码，前面我已经给出了相关博客，有问题可以去看看）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273private LinearLayout toplayout; private LinearLayout bottomlayout; /** * 动画时间 */ private static final int UI_ANIMATION_DELAY = 200; /** * 显示或者隐藏状态 */ private boolean mVisible; /** * 展示上下栏 */ void showPanel() &#123; //Log.i(TAG,\"hidePanel: 显示\"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,1.0f,Animation.RELATIVE_TO_SELF,0.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation1); bottomlayout.setAnimation(translateAnimation); toplayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.VISIBLE);//这里通过改变可见性来播放动画 //底部状态栏消失 small_status.setVisibility(View.GONE); //隐藏上下操作板，&lt;span style=\"font-family: Arial, Helvetica, sans-serif;\"&gt;防止与上下菜单冲突&lt;/span&gt;，注意只能是隐藏，不能GONE，否者会导致中间控制板占据所有屏幕的问题 nextToogle.setVisibility(View.INVISIBLE); preToogle.setVisibility(View.INVISIBLE); &#125; /** * 隐藏上下栏 */ void hidePanel() &#123; //Log.i(TAG,\"hidePanel: 隐藏\"); TranslateAnimation translateAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f, Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f); TranslateAnimation translateAnimation1 = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 1.0f); translateAnimation.setDuration(UI_ANIMATION_DELAY); translateAnimation1.setDuration(UI_ANIMATION_DELAY); toplayout.setAnimation(translateAnimation); bottomlayout.setAnimation(translateAnimation1); toplayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 bottomlayout.setVisibility(View.INVISIBLE);//这里通过改变可见性来播放动画 //底部状态栏显示 small_status.setVisibility(View.VISIBLE); //显示上下操作板，防止与上下菜单冲突 nextToogle.setVisibility(View.VISIBLE); preToogle.setVisibility(View.VISIBLE); &#125; /** * 触发器用来控制显示与隐藏 */ void toogle() &#123; if(mVisible) &#123; hidePanel(); mVisible = false; &#125; else &#123; showPanel(); mVisible = true; &#125; &#125; 接下来就是设定按下监听，然后调用toogle()方法就可以实现上下菜单栏的显示隐藏了。这篇先到这里，有兴趣的可以继续漫吧漫画阅读界面的搭建（一）基础布局搭建（下）","categories":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/categories/Android/"},{"name":"Android 实战","slug":"Android/Android-实战","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/"},{"name":"Android 漫画App漫吧（自写爬虫）开发","slug":"Android/Android-实战/Android-漫画App漫吧（自写爬虫）开发","permalink":"http://WinterSmileSB101.online/categories/Android/Android-实战/Android-漫画App漫吧（自写爬虫）开发/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://WinterSmileSB101.online/tags/Android/"},{"name":"UI","slug":"UI","permalink":"http://WinterSmileSB101.online/tags/UI/"},{"name":"界面","slug":"界面","permalink":"http://WinterSmileSB101.online/tags/界面/"},{"name":"漫吧","slug":"漫吧","permalink":"http://WinterSmileSB101.online/tags/漫吧/"},{"name":"Cartoon8","slug":"Cartoon8","permalink":"http://WinterSmileSB101.online/tags/Cartoon8/"}]},{"title":"常用颜色表","slug":"color-list","date":"2017-03-22T02:06:53.000Z","updated":"2017-03-22T02:50:34.962Z","comments":true,"path":"2017/03/22/color-list/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/color-list/","excerpt":"","text":"颜色名 16进制颜色值 rgb 颜色值 AliceBlue #F0F8FF rgb(240, 248, 255) AntiqueWhite #FAEBD7 rgb(250, 235, 215) Aqua #00FFFF rgb(0, 255, 255) Aquamarine #7FFFD4 rgb(127, 255, 212) Azure #F0FFFF rgb(240, 255, 255) Beige #F5F5DC rgb(245, 245, 220) Bisque #FFE4C4 rgb(255, 228, 196) Black #000000 rgb(0, 0, 0) BlanchedAlmond #FFEBCD rgb(255, 235, 205) Blue #0000FF rgb(0, 0, 255) BlueViolet #8A2BE2 rgb(138, 43, 226) Brown #A52A2A rgb(165, 42, 42) BurlyWood #DEB887 rgb(222, 184, 135) CadetBlue #5F9EA0 rgb(95, 158, 160) Chartreuse #7FFF00 rgb(127, 255, 0) Chocolate #D2691E rgb(210, 105, 30) Coral #FF7F50 rgb(255, 127, 80) CornflowerBlue #6495ED rgb(100, 149, 237) Cornsilk #FFF8DC rgb(255, 248, 220) Crimson #DC143C rgb(220, 20, 60) Cyan #00FFFF rgb(0, 255, 255) DarkBlue #00008B rgb(0, 0, 139) DarkCyan #008B8B rgb(0, 139, 139) DarkGoldenRod #B8860B rgb(184, 134, 11) DarkGray #A9A9A9 rgb(169, 169, 169) DarkGreen #006400 rgb(0, 100, 0) DarkKhaki #BDB76B rgb(189, 183, 107) DarkMagenta #8B008B rgb(139, 0, 139) DarkOliveGreen #556B2F rgb(85, 107, 47) Darkorange #FF8C00 rgb(255, 140, 0) DarkOrchid #9932CC rgb(153, 50, 204) DarkRed #8B0000 rgb(139, 0, 0) DarkSalmon #E9967A rgb(233, 150, 122) DarkSeaGreen #8FBC8F rgb(143, 188, 143) DarkSlateBlue #483D8B rgb(72, 61, 139) DarkSlateGray #2F4F4F rgb(47, 79, 79) DarkTurquoise #00CED1 rgb(0, 206, 209) DarkViolet #9400D3 rgb(148, 0, 211) DeepPink #FF1493 rgb(255, 20, 147) DeepSkyBlue #00BFFF rgb(0, 191, 255) DimGray #696969 rgb(105, 105, 105) DodgerBlue #1E90FF rgb(30, 144, 255) Feldspar #D19275 rgb(209, 146, 117) FireBrick #B22222 rgb(178, 34, 34) FloralWhite #FFFAF0 rgb(255, 250, 240) ForestGreen #228B22 rgb(34, 139, 34) Fuchsia #FF00FF rgb(255, 0, 255) Gainsboro #DCDCDC rgb(220, 220, 220) GhostWhite #F8F8FF rgb(248, 248, 255) Gold #FFD700 rgb(255, 215, 0) GoldenRod #DAA520 rgb(218, 165, 32) Gray #808080 rgb(128, 128, 128) Green #008000 rgb(0, 128, 0) GreenYellow #ADFF2F rgb(173, 255, 47) HoneyDew #F0FFF0 rgb(240, 255, 240) HotPink #FF69B4 rgb(255, 105, 180) IndianRed #CD5C5C rgb(205, 92, 92) Indigo #4B0082 rgb(75, 0, 130) Ivory #FFFFF0 rgb(255, 255, 240) Khaki #F0E68C rgb(240, 230, 140) Lavender #E6E6FA rgb(230, 230, 250) LavenderBlush #FFF0F5 rgb(255, 240, 245) LawnGreen #7CFC00 rgb(124, 252, 0) LemonChiffon #FFFACD rgb(255, 250, 205) LightBlue #ADD8E6 rgb(173, 216, 230) LightCoral #F08080 rgb(240, 128, 128) LightCyan #E0FFFF rgb(224, 255, 255) LightGoldenRodYellow #FAFAD2 rgb(250, 250, 210) LightGrey #D3D3D3 rgb(211, 211, 211) LightGreen #90EE90 rgb(144, 238, 144) LightPink #FFB6C1 rgb(255, 182, 193) LightSalmon #FFA07A rgb(255, 160, 122) LightSeaGreen #20B2AA rgb(32, 178, 170) LightSkyBlue #87CEFA rgb(135, 206, 250) LightSlateBlue #8470FF rgb(132, 112, 255) LightSlateGray #778899 rgb(119, 136, 153) LightSteelBlue #B0C4DE rgb(176, 196, 222) LightYellow #FFFFE0 rgb(255, 255, 224) Lime #00FF00 rgb(0, 255, 0) LimeGreen #32CD32 rgb(50, 205, 50) Linen #FAF0E6 rgb(250, 240, 230) Magenta #FF00FF rgb(255, 0, 255) Maroon #800000 rgb(128, 0, 0) MediumAquaMarine #66CDAA rgb(102, 205, 170) MediumBlue #0000CD rgb(0, 0, 205) MediumOrchid #BA55D3 rgb(186, 85, 211) MediumPurple #9370D8 rgb(147, 112, 216) MediumSeaGreen #3CB371 rgb(60, 179, 113) MediumSlateBlue #7B68EE rgb(123, 104, 238) MediumSpringGreen #00FA9A rgb(0, 250, 154) MediumTurquoise #48D1CC rgb(72, 209, 204) MediumVioletRed #C71585 rgb(199, 21, 133) MidnightBlue #191970 rgb(25, 25, 112) MintCream #F5FFFA rgb(245, 255, 250) MistyRose #FFE4E1 rgb(255, 228, 225) Moccasin #FFE4B5 rgb(255, 228, 181) NavajoWhite #FFDEAD rgb(255, 222, 173) Navy #000080 rgb(0, 0, 128) OldLace #FDF5E6 rgb(253, 245, 230) Olive #808000 rgb(128, 128, 0) OliveDrab #6B8E23 rgb(107, 142, 35) Orange #FFA500 rgb(255, 165, 0) OrangeRed #FF4500 rgb(255, 69, 0) Orchid #DA70D6 rgb(218, 112, 214) PaleGoldenRod #EEE8AA rgb(238, 232, 170) PaleGreen #98FB98 rgb(152, 251, 152) PaleTurquoise #AFEEEE rgb(175, 238, 238) PaleVioletRed #D87093 rgb(216, 112, 147) PapayaWhip #FFEFD5 rgb(255, 239, 213) PeachPuff #FFDAB9 rgb(255, 218, 185) Peru #CD853F rgb(205, 133, 63) Pink #FFC0CB rgb(255, 192, 203) Plum #DDA0DD rgb(221, 160, 221) PowderBlue #B0E0E6 rgb(176, 224, 230) Purple #800080 rgb(128, 0, 128) Red #FF0000 rgb(255, 0, 0) RosyBrown #BC8F8F rgb(188, 143, 143) RoyalBlue #4169E1 rgb(65, 105, 225) SaddleBrown #8B4513 rgb(139, 69, 19) Salmon #FA8072 rgb(250, 128, 114) SandyBrown #F4A460 rgb(244, 164, 96) SeaGreen #2E8B57 rgb(46, 139, 87) SeaShell #FFF5EE rgb(255, 245, 238) Sienna #A0522D rgb(160, 82, 45) Silver #C0C0C0 rgb(192, 192, 192) SkyBlue #87CEEB rgb(135, 206, 235) SlateBlue #6A5ACD rgb(106, 90, 205) SlateGray #708090 rgb(112, 128, 144) Snow #FFFAFA rgb(255, 250, 250) SpringGreen #00FF7F rgb(0, 255, 127) SteelBlue #4682B4 rgb(70, 130, 180) Tan #D2B48C rgb(210, 180, 140) Teal #008080 rgb(0, 128, 128) Thistle #D8BFD8 rgb(216, 191, 216) Tomato #FF6347 rgb(255, 99, 71) Turquoise #40E0D0 rgb(64, 224, 208) Violet #EE82EE rgb(238, 130, 238) VioletRed #D02090 rgb(208, 32, 144) Wheat #F5DEB3 rgb(245, 222, 179) White #FFFFFF rgb(255, 255, 255) WhiteSmoke #F5F5F5 rgb(245, 245, 245) Yellow #FFFF00 rgb(255, 255, 0) YellowGreen #9ACD32 rgb(154, 205, 50)","categories":[{"name":"颜色","slug":"颜色","permalink":"http://WinterSmileSB101.online/categories/颜色/"}],"tags":[{"name":"颜色","slug":"颜色","permalink":"http://WinterSmileSB101.online/tags/颜色/"},{"name":"16进制","slug":"16进制","permalink":"http://WinterSmileSB101.online/tags/16进制/"},{"name":"color","slug":"color","permalink":"http://WinterSmileSB101.online/tags/color/"}]},{"title":"Hexo 使用总结","slug":"summer-hexo","date":"2017-03-22T01:49:12.000Z","updated":"2017-03-22T02:03:04.582Z","comments":true,"path":"2017/03/22/summer-hexo/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/summer-hexo/","excerpt":"","text":"1.在 md 文件中引入图片等资源md 中引入图片是可以通过相对地址的，所以为了引用到，可以生成一遍，然后把图片放到 public 文件夹下的需求位置，然后通过相对地址引用就好了，来个栗子，我们放了一张 test.png 到 public/img/ 下，那么相对地址是：1/img/test.png 其他资源同样如此使用，不过为了节约空间，建议保存图片到其他位置（比如网盘之类或者云服务器，毕竟Github pages 空间有限）。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/tags/Hexo/"},{"name":"总结","slug":"总结","permalink":"http://WinterSmileSB101.online/tags/总结/"}]},{"title":"Next 使用总结","slug":"summer-next","date":"2017-03-22T01:36:37.000Z","updated":"2017-03-22T13:01:45.694Z","comments":true,"path":"2017/03/22/summer-next/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/summer-next/","excerpt":"","text":"1. Next 中的多级目录Next 是默认支持了多级目录的，那么要怎么设置呢？添加分类标签我就不说了，官方文档说的很清楚，我们创建（ hexo new summer_next）了一篇文章后,大概是这样子的12345---title: summer-nextdate: 2017-03-22 09:36:37tags:--- 默认并没有分类标签，我们想要实现把文章分类的话，就添加如下代码123categories:- Hexo--- 这样我们的文章就会被分类到 Hexo 类别下，那么如何实现多级分类呢？很简单，只需要在 Hexo （也就是你想要增加子分类的分类后），再写出分类，来个栗子12345categories:- Hexo- Next- 定制你的 Next 侧边栏--- 这样我们就实现了如下效果,多级菜单就实现了： 2. Next 中 Nest 动画背景这个很简单，直接打开 next/_config.yml 文件，找到 canvas ：false，然后改成 true 就好了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/categories/Hexo/"},{"name":"Next","slug":"Hexo/Next","permalink":"http://WinterSmileSB101.online/categories/Hexo/Next/"}],"tags":[{"name":"Next","slug":"Next","permalink":"http://WinterSmileSB101.online/tags/Next/"},{"name":"总结","slug":"总结","permalink":"http://WinterSmileSB101.online/tags/总结/"}]},{"title":"定制你的 Next 侧边栏---定制社交链接","slug":"custom-your-next-sidebar","date":"2017-03-22T01:07:11.000Z","updated":"2017-03-22T12:59:53.665Z","comments":true,"path":"2017/03/22/custom-your-next-sidebar/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/custom-your-next-sidebar/","excerpt":"","text":"Next 侧边栏文件的位置为（next/layout/_macro/sidebar.swig）实现自定义的社交这里有人就会觉得我是多事了，我确实是蛋疼，不仅蛋疼还胃疼，我直接按照 Next 上的主题配置社交模块，居然没有任何反应，作为一个才入坑的萌新，迫于无奈，只能使用笨法子来暴力解决了。还是看看症状图吧，服药前 服药后 下面说治病过程，打开侧边栏文件，找到如下位置（ 82 行）1234567891011121314&lt;div class=\"links-of-author motion-element\"&gt; &#123;% if theme.social %&#125; &#123;% for name, link in theme.social %&#125; &lt;span class=\"links-of-author-item\"&gt; &lt;a href=\"&#123;&#123; link &#125;&#125;\" target=\"_blank\" title=\"&#123;&#123; name &#125;&#125;\"&gt; &#123;% if theme.social_icons.enable %&#125; &lt;i class=\"fa fa-fw fa-&#123;&#123; theme.social_icons[name] | default('globe') | lower &#125;&#125;\"&gt;&lt;/i&gt; &#123;% endif %&#125; &#123;&#123; name &#125;&#125; &lt;/a&gt; &lt;/span&gt; &#123;% endfor %&#125; &#123;% endif %&#125; &lt;/div&gt; 可以看到这里是使用了遍历来生成我们的社交，但是不知为毛我的没有。所以就暴力一点。直接全部改成下面的样子123456789101112131415161718192021222324252627282930313233343536&lt;!--自己写的社交链接--&gt; &lt;div class=\"links-of-author motion-element\"&gt; &lt;span class=\"links-of-author-item\"&gt; &lt;a href=\"https://github.com/WinterSmileSB101\" title=\"Github\"&gt; &lt;i class=\"fa fa-fw fa-github fa-lg\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;span class=\"links-of-author-item\"&gt; &lt;a href=\"http://weibo.com/5602632941/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1\" title=\"微博\"&gt; &lt;i class=\"fa fa-fw fa-weibo fa-lg\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;span class=\"links-of-author-item\"&gt; &lt;a href=\"http://www.jianshu.com/users/73344bc7e890/timeline\" title=\"简书\"&gt; &lt;i class=\"fa fa-fw fa-bookmark fa-lg\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt;&lt;br /&gt; &lt;span class=\"links-of-author-item\"&gt; &lt;a href=\"https://www.douban.com/people/159359470/\" title=\"豆瓣\"&gt; &lt;i class=\"fa fa-fw fa-newspaper-o fa-lg\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;span class=\"links-of-author-item\"&gt; &lt;a href=\"http://blog.csdn.net/qq_21265915\" title=\"CSDN博客\"&gt; &lt;i class=\"fa fa-fw fa-bug fa-lg\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/span&gt; &lt;/div&gt; &lt;!--自己写的社交链接--&gt; 个人觉得这里条目也不多，就直接全部写出来了，懒得去搞那些花里胡哨的东西（懒癌症又犯了），把 href 中的换成对应你的链接就可以了，如果多了可以删除一些，少了可以增加一些，真是美滋滋。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/categories/Hexo/"},{"name":"Next","slug":"Hexo/Next","permalink":"http://WinterSmileSB101.online/categories/Hexo/Next/"},{"name":"定制你的 Next 侧边栏","slug":"Hexo/Next/定制你的-Next-侧边栏","permalink":"http://WinterSmileSB101.online/categories/Hexo/Next/定制你的-Next-侧边栏/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/tags/Hexo/"},{"name":"定制","slug":"定制","permalink":"http://WinterSmileSB101.online/tags/定制/"},{"name":"Next","slug":"Next","permalink":"http://WinterSmileSB101.online/tags/Next/"},{"name":"侧边栏","slug":"侧边栏","permalink":"http://WinterSmileSB101.online/tags/侧边栏/"}]},{"title":"为你的Hexo添加Nest动画","slug":"Next-Use-Nest","date":"2017-03-22T00:35:38.000Z","updated":"2017-03-22T01:04:56.054Z","comments":true,"path":"2017/03/22/Next-Use-Nest/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/22/Next-Use-Nest/","excerpt":"","text":"如果你没有使用 Hexo 主题（或者主题中没有集合Nest）1.添加下列代码到你的布局文件中的 标签之前（位置/layout/layout.ejs）1&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 2.在引用的同时可以对 Nest 进行相关的配置 color ： 线条颜色, 默认: ‘0,0,0’ ；三个数字分别为(R,G,B)，注意用,分割 opacity : 线条透明度（0~1）, 默认: 0.5 count : 线条的总数量, 默认: 150，（建议修改少点，否者 cpu 占用过高） zIndex : 背景的z-index属性，css属性用于控制所在层的位置, 默认: -13.举个栗子 1&lt;script type=&quot;text/javascript&quot; color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 然后编译，提交，就大功告成 如果你使用集成了 Nest 的主题，就去主题配置中开启这里以 Next 主题为栗子（主题配置文件在 next/_config.yml,默认是false），找到12# Canvas-nestcanvas_nest: false 在文档的大概接近最下方的位置，把 false 修改成 ture，然后编译，提交，就大功告成","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/categories/Hexo/"}],"tags":[{"name":"动画","slug":"动画","permalink":"http://WinterSmileSB101.online/tags/动画/"},{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/tags/Hexo/"},{"name":"Nest","slug":"Nest","permalink":"http://WinterSmileSB101.online/tags/Nest/"}]},{"title":"使用GitHubPages+Hexo+域名创建独立私有博客","slug":"CreatYourOwnWithGithubpages-and-Hexo","date":"2017-03-20T13:57:48.000Z","updated":"2017-03-22T12:54:39.354Z","comments":true,"path":"2017/03/20/CreatYourOwnWithGithubpages-and-Hexo/","link":"","permalink":"http://WinterSmileSB101.online/2017/03/20/CreatYourOwnWithGithubpages-and-Hexo/","excerpt":"","text":"使用GitHubPages+Hexo+域名创建自己的独立私有博客为什么要搭建独立私有博客？1.独立的才是最好的。2.可以使用免费的github控件来托管自己的博文。3.可以通过个性域名而不是绑定的二级域名。4.可以自由的定制自己博客的所有东西（所有的所有都可以自由定制，想想都激动啊）。搭建步骤1.安装Node.js- 绿色安装可以直接在网上下载绿色版的node.js，这样就可以不用安装了，但是需要自己配置环境变量，然后通过cmd中键入node来进入node.js- 下载node.js中文网官网下载图例：1.英文官网 2.中文官网 - 安装过程基本一路next，你也可以改变安装的位置，安装位置默认是在C盘。 安装完成后我们可以通过cmd键入node来进入node.js或者直接通过开始菜单中node.js文件夹下的node.js command prompt 来直接进入node.js交互模式，如下图 2.更改NPM源国外的NPM源并不稳定，即使翻墙也不一定能将Hexo下载下来，所以这里直接更改为淘宝源。1$ npm config set registry https://registry.npm.taobao.org npm info underscore 3.安装Hexo这里安装的是hexo最新版本，如果想安装以前的的版本请运行命令1$ npm install -g hexo 4.快速开始- Hexo 文档这里再贴上Hexo的文档，想研究的可以看看Hexo中文文档- 建立Hexo工程1$ hexo init blog 上述命令的意思为在当前命令目录创建一个名为blog的文件夹来作为工程的根目录，想要在其他地方创建可以直接cd到那个位置然后再运行上诉命令（这里blog也是可以随便你定义的）输入命令后会是一顿加载过程，不用管，你现在可以去喝口水或者休息一下眼睛。等一会再回来应该就会看到如下界面(由于输出太多中间我就省略了) 好那么现在我们的工程初始化就算完成了。- 新建一个md文档这里就需要两步了，先需要进入工程文件夹1$ cd blog 先来看看如果不进入的话会出现什么情况 现在看看正确的情况 然后我们创建md文档文件–当然是老套路，一言不合就HelloWorld，此时会在/blog/sources/_post/目录下生成HelloWorld.md文件。1$ hexo new \"HelloWorld\" 这里的”HelloWorld”是文件的名称，也是我们的文章标题的名称，可以自由定义- 把我们建立的md文件交付Hexo生成静态网页文件使用Hexo引擎将Markdown格式的文件解析成可以使用浏览器查看的HTML文件，HTML文件存储在blog/public目录下。命令如下1$ hexo generate 或者简化的写法1$ hexo g 结果如下 - 运行Hexo 服务器1$ hexo server 打开命令行提示的地址，一般是http://0.0.0.0:4000/，或者是http://localhost:4000,既可以看到我们的Hexo网站。如果提示找不到server命令则需要运行命令1$ npm install hexo-server--save Hexo3.0之后把server独立出来了，所以需要单独安装。运行命令后,可以看到这里我们的服务器地址是http://localhost:4000/ 现在访问http://loaclhost:4000/，可以看到我们所写的文章已经提交到Hexo服务器上了 以后新建文件同理，修改了内容之后需要先生成静态网页文件再启动服务器。- Hexo 安装主题安装主题需要从Git上克隆，Hexo提供了默认主题landscape。如果想要使用别人的主题则需要用到Git工具。Windows用户和Mac用户安装Git都比较简单，Windows用户登录git官网下载软件安装，Mac用户只需在命令行中键入Git命令就会自动提示安装（详细安装教程请移步Git）。安装完成后打开命令行工具（Windows用户打开开始菜单Git目录下的Git Bash）。或者直接在你的Hexo工程的根文件夹打开cmd键入如下命令（这里以yilia主题为例，Git地址）1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置修改hexo工程根目录下的 _config.yml ： theme: yiliaHexo 更新主题12$ cd themes/yilia$ git pull 具体yilia主题配置请移步Git地址- 附上一些 Hexo 主题地址yilia知乎：好看的 Hexo 主题排行下面我们就要把 Hexo 的静态网页上传到GitHub pages上去- 申请GitHub账号已经有的同学可以无视首先进入网站 GitHub然后点击右上角的 sign up 进入注册界面，如下 输入你的用户名（不能改，而且只能有一个），其他的就和一般的注册没啥两样。必要：GitHub的邮箱必须要绑定且验证，要不然没有免费静态空间—应该是这样的，Git具体配置注册帐号以及验证完成后，登录Github点击右上角 + 号，点击 New Repository（新建仓库）如下图 进入新建仓库界面，这里是重点，仓库的名称必须是 yourusername.github.io,这里 yourusername 就是你注册时候的 username 必须严格按照这种命名方式，否者是不能通关过 yourusername.github.io 访问到此页面的，具体如下图,其中 youruesrname 就是前面的 owner 单用户的时候可以直接这样看，多用户时注意区别，由于我已经创建了 WinterSmileSB101.github.io 所以他提示已经存在，你在确定输入无误之后就点击3的位置，其他的东西你也可以进行配置，不配置也无所谓。 下面在浏览器中输入WinterSmileSB101.github.io ,由于这里我已经搭建完成所以效果如下： 现在就要把我们的静态网页文件通过 Hexo 上传到 Github 上我们的个人主页上了在工程目录安装 deployer-git 命令如下1$ npm install hexo-deployer-git --save 在/blog/_config.yml中修改deploy属性(注意:之后有空格，否则出错)1234deploy: type: git repository: https://github.com/WinterSmileSB101/WinterSmileSB101.github.io.git branch: master 把repository： 后的换成你自己的 Git 仓库地址如何找到自己的Git项目地址(如果直接进入项目主界面看不到链接，就按下图顺序操作) 这里使用的是 http 方式提交到Git，可能会频繁的要求输入帐号以及密码，嫌麻烦可以通过SSH的方式提交然后再通过下面命令提交代码到Git12$ hexo generate$ hexo deploy 以后有修改的话就依次运行上面代码提交Git，就可以了这里可能在运行 hexo deploy 的时候出现如下问题1error deployer not found:github 有几种方式解决这个问题- 注意 type 的值： hexo 更新到3.0之后，deploy的type 的github需要改成git- 解决方法：npm install hexo-deployer-git –save 改了之后执行，然后再部署，就可以了恭喜你，现在你已经拥有一个自己的私有博客了！下面是域名申请与绑定，不想使用个人域名的就可以不用接着往下再看了。- 使用域名来访问你的 Hexo申请域名申请域名有几种方式，比如腾讯云、阿里云（推荐）、GoDaddy 等等。这里我用 阿里云 为例子先登录，这里可以直接通过淘宝帐号登录阿里云然后1234graph LR点击产品--&gt;域名注册域名注册--&gt;在搜索框里输入你想注册的域名在搜索框里输入你想注册的域名--&gt;点击查询 过程如下图 我们可以看到，这里就检查出了域名是否被注册，选择没被注册的加入清单然后去结算就好了。 绑定域名到yourusername.github.io打开你的 Hexo 项目文件夹，进入source文件夹，并新建文本文档名为 CNAME（注意没有后缀名），如下图 然后通过记事本打开 CNAME 文件，输入你购买的域名并且保存，如下图 我们还需要解析域名12graph LR进入控制台--&gt;点击左侧域名 出现如下,然后点击解析 进入域名解析界面,点击添加解析，然后会提示验证，验证即可 这里的记录类型我们选择 CNAME主机记录可以不用管记录值填写前面的 yourusername.github.io，如下 记录类型选择 A 的话 记录值就要填写通过 cmd ping yourusername.github.io 所得出的IP地址。如下（红圈的部分即为 IP 地址） 然后点击保存，这时候你又可以去休息一下了，因为这个修改会有 1 - 几分钟左右的缓存时间，也就是可能不会马上生效。休息完了回来，打开浏览器，输入你的域名，比如我这里申请的是WinterSmileSB101.online，见证奇迹的时刻来了， 别急，还没按下 Enter 呢OK 看到这里相信你已经搭建好了自己的独立私有博客了，接下来就去丰富它吧Hexo 生成的是 md 文件（markDown文件），一种很强大的标记语言，使用她我们能简单的控制格式，简单的做出各种专业图等等，具体使用方式MarkDown中文文档以及一些 markDown 编辑器1.好用的 markDown 编辑器2.有道云笔记3.七款优秀的 markDown 编辑器3.Atom(推荐，我现在就在用支持导出PDF等，也支持实时预览，真的很强大的一款编辑器)","categories":[{"name":"博客","slug":"博客","permalink":"http://WinterSmileSB101.online/categories/博客/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://WinterSmileSB101.online/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://WinterSmileSB101.online/tags/Github/"},{"name":"独立博客","slug":"独立博客","permalink":"http://WinterSmileSB101.online/tags/独立博客/"},{"name":"搭建博客","slug":"搭建博客","permalink":"http://WinterSmileSB101.online/tags/搭建博客/"}]}]}